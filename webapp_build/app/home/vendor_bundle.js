/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(1);
	__webpack_require__(5);
	module.exports = __webpack_require__(9);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\nvar jquery = __webpack_require__(2);\nvar underscore = __webpack_require__(5);\n\n//     Backbone.js 1.1.2\n\n//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function (root, factory) {\n\n    // Set up Backbone appropriately for the environment. Start with AMD.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5), __webpack_require__(2), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, exports) {\n            // Export global even in AMD case in case this script is loaded with\n            // others that may still expect a global Backbone.\n            root.Backbone = factory(root, exports, _, $);\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n        // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n    } else if (typeof exports !== 'undefined') {\n        var _ = require('underscore');\n        factory(root, exports, _);\n\n        // Finally, as a browser global.\n    } else {\n        root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n    }\n\n}(this, function (root, Backbone, _, $) {\n\n    // Initial Setup\n    // -------------\n\n    // Save the previous value of the `Backbone` variable, so that it can be\n    // restored later on, if `noConflict` is used.\n    var previousBackbone = root.Backbone;\n\n    // Create local references to array methods we'll want to use later.\n    var array = [];\n    var push = array.push;\n    var slice = array.slice;\n    var splice = array.splice;\n\n    // Current version of the library. Keep in sync with `package.json`.\n    Backbone.VERSION = '1.1.2';\n\n    // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n    // the `$` variable.\n    Backbone.$ = $;\n\n    // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n    // to its previous owner. Returns a reference to this Backbone object.\n    Backbone.noConflict = function () {\n        root.Backbone = previousBackbone;\n        return this;\n    };\n\n    // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n    // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n    // set a `X-Http-Method-Override` header.\n    Backbone.emulateHTTP = false;\n\n    // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n    // `application/json` requests ... will encode the body as\n    // `application/x-www-form-urlencoded` instead and will send the model in a\n    // form param named `model`.\n    Backbone.emulateJSON = false;\n\n    // Backbone.Events\n    // ---------------\n\n    // A module that can be mixed in to *any object* in order to provide it with\n    // custom events. You may bind with `on` or remove with `off` callback\n    // functions to an event; `trigger`-ing an event fires all callbacks in\n    // succession.\n    //\n    //     var object = {};\n    //     _.extend(object, Backbone.Events);\n    //     object.on('expand', function(){ alert('expanded'); });\n    //     object.trigger('expand');\n    //\n    var Events = Backbone.Events = {\n        // Bind an event to a `callback` function. Passing `\"all\"` will bind\n        // the callback to all events fired.\n        on: function (name, callback, context) {\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback)\n                return this;\n            this._events || (this._events = {});\n            var events = this._events[name] || (this._events[name] = []);\n            events.push({callback: callback, context: context, ctx: context || this});\n            return this;\n        },\n        // Bind an event to only be triggered a single time. After the first time\n        // the callback is invoked, it will be removed.\n        once: function (name, callback, context) {\n            if (!eventsApi(this, 'once', name, [callback, context]) || !callback)\n                return this;\n            var self = this;\n            var once = _.once(function () {\n                self.off(name, once);\n                callback.apply(this, arguments);\n            });\n            once._callback = callback;\n            return this.on(name, once, context);\n        },\n        // Remove one or many callbacks. If `context` is null, removes all\n        // callbacks with that function. If `callback` is null, removes all\n        // callbacks for the event. If `name` is null, removes all bound\n        // callbacks for all events.\n        off: function (name, callback, context) {\n            var retain, ev, events, names, i, l, j, k;\n            if (!this._events || !eventsApi(this, 'off', name, [callback, context]))\n                return this;\n            if (!name && !callback && !context) {\n                this._events = void 0;\n                return this;\n            }\n            names = name ? [name] : _.keys(this._events);\n            for (i = 0, l = names.length; i < l; i++) {\n                name = names[i];\n                if (events = this._events[name]) {\n                    this._events[name] = retain = [];\n                    if (callback || context) {\n                        for (j = 0, k = events.length; j < k; j++) {\n                            ev = events[j];\n                            if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                                (context && context !== ev.context)) {\n                                retain.push(ev);\n                            }\n                        }\n                    }\n                    if (!retain.length)\n                        delete this._events[name];\n                }\n            }\n\n            return this;\n        },\n        // Trigger one or many events, firing all bound callbacks. Callbacks are\n        // passed the same arguments as `trigger` is, apart from the event name\n        // (unless you're listening on `\"all\"`, which will cause your callback to\n        // receive the true name of the event as the first argument).\n        trigger: function (name) {\n            if (!this._events)\n                return this;\n            var args = slice.call(arguments, 1);\n            if (!eventsApi(this, 'trigger', name, args))\n                return this;\n            var events = this._events[name];\n            var allEvents = this._events.all;\n            if (events)\n                triggerEvents(events, args);\n            if (allEvents)\n                triggerEvents(allEvents, arguments);\n            return this;\n        },\n        // Tell this object to stop listening to either specific events ... or\n        // to every object it's currently listening to.\n        stopListening: function (obj, name, callback) {\n            var listeningTo = this._listeningTo;\n            if (!listeningTo)\n                return this;\n            var remove = !name && !callback;\n            if (!callback && typeof name === 'object')\n                callback = this;\n            if (obj)\n                (listeningTo = {})[obj._listenId] = obj;\n            for (var id in listeningTo) {\n                obj = listeningTo[id];\n                obj.off(name, callback, this);\n                if (remove || _.isEmpty(obj._events))\n                    delete this._listeningTo[id];\n            }\n            return this;\n        }\n\n    };\n\n    // Regular expression used to split event strings.\n    var eventSplitter = /\\s+/;\n\n    // Implement fancy features of the Events API such as multiple event\n    // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n    // in terms of the existing API.\n    var eventsApi = function (obj, action, name, rest) {\n        if (!name)\n            return true;\n\n        // Handle event maps.\n        if (typeof name === 'object') {\n            for (var key in name) {\n                obj[action].apply(obj, [key, name[key]].concat(rest));\n            }\n            return false;\n        }\n\n        // Handle space separated event names.\n        if (eventSplitter.test(name)) {\n            var names = name.split(eventSplitter);\n            for (var i = 0, l = names.length; i < l; i++) {\n                obj[action].apply(obj, [names[i]].concat(rest));\n            }\n            return false;\n        }\n\n        return true;\n    };\n\n    // A difficult-to-believe, but optimized internal dispatch function for\n    // triggering events. Tries to keep the usual cases speedy (most internal\n    // Backbone events have 3 arguments).\n    var triggerEvents = function (events, args) {\n        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n        switch (args.length) {\n            case 0:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx);\n                return;\n            case 1:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx, a1);\n                return;\n            case 2:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx, a1, a2);\n                return;\n            case 3:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n                return;\n            default:\n                while (++i < l)\n                    (ev = events[i]).callback.apply(ev.ctx, args);\n                return;\n        }\n    };\n\n    var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n    // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n    // listen to an event in another object ... keeping track of what it's\n    // listening to.\n    _.each(listenMethods, function (implementation, method) {\n        Events[method] = function (obj, name, callback) {\n            var listeningTo = this._listeningTo || (this._listeningTo = {});\n            var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n            listeningTo[id] = obj;\n            if (!callback && typeof name === 'object')\n                callback = this;\n            obj[implementation](name, callback, this);\n            return this;\n        };\n    });\n\n    // Aliases for backwards compatibility.\n    Events.bind = Events.on;\n    Events.unbind = Events.off;\n\n    // Allow the `Backbone` object to serve as a global event bus, for folks who\n    // want global \"pubsub\" in a convenient place.\n    _.extend(Backbone, Events);\n\n    // Backbone.Model\n    // --------------\n\n    // Backbone **Models** are the basic data object in the framework --\n    // frequently representing a row in a table in a database on your server.\n    // A discrete chunk of data and a bunch of useful, related methods for\n    // performing computations and transformations on that data.\n\n    // Create a new model with the specified attributes. A client id (`cid`)\n    // is automatically generated and assigned for you.\n    var Model = Backbone.Model = function (attributes, options) {\n        var attrs = attributes || {};\n        options || (options = {});\n        this.cid = _.uniqueId('c');\n        this.attributes = {};\n        if (options.collection)\n            this.collection = options.collection;\n        if (options.parse)\n            attrs = this.parse(attrs, options) || {};\n        attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n        this.set(attrs, options);\n        this.changed = {};\n        this.initialize.apply(this, arguments);\n    };\n\n    // Attach all inheritable methods to the Model prototype.\n    _.extend(Model.prototype, Events, {\n        // A hash of attributes whose current and previous value differ.\n        changed: null,\n        // The value returned during the last failed validation.\n        validationError: null,\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n        // CouchDB users may want to set this to `\"_id\"`.\n        idAttribute: 'id',\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // Return a copy of the model's `attributes` object.\n        toJSON: function (options) {\n            return _.clone(this.attributes);\n        },\n        // Proxy `Backbone.sync` by default -- but override this if you need\n        // custom syncing semantics for *this* particular model.\n        sync: function () {\n            return Backbone.sync.apply(this, arguments);\n        },\n        // Get the value of an attribute.\n        get: function (attr) {\n            return this.attributes[attr];\n        },\n        // Get the HTML-escaped value of an attribute.\n        escape: function (attr) {\n            return _.escape(this.get(attr));\n        },\n        // Returns `true` if the attribute contains a value that is not null\n        // or undefined.\n        has: function (attr) {\n            return this.get(attr) != null;\n        },\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\n        // the core primitive operation of a model, updating the data and notifying\n        // anyone who needs to know about the change in state. The heart of the beast.\n        set: function (key, val, options) {\n            var attr, attrs, unset, changes, silent, changing, prev, current;\n            if (key == null)\n                return this;\n\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            if (typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n\n            options || (options = {});\n\n            // Run validation.\n            if (!this._validate(attrs, options))\n                return false;\n\n            // Extract attributes and options.\n            unset = options.unset;\n            silent = options.silent;\n            changes = [];\n            changing = this._changing;\n            this._changing = true;\n\n            if (!changing) {\n                this._previousAttributes = _.clone(this.attributes);\n                this.changed = {};\n            }\n            current = this.attributes, prev = this._previousAttributes;\n\n            // Check for changes of `id`.\n            if (this.idAttribute in attrs)\n                this.id = attrs[this.idAttribute];\n\n            // For each `set` attribute, update or delete the current value.\n            for (attr in attrs) {\n                val = attrs[attr];\n                if (!_.isEqual(current[attr], val))\n                    changes.push(attr);\n                if (!_.isEqual(prev[attr], val)) {\n                    this.changed[attr] = val;\n                } else {\n                    delete this.changed[attr];\n                }\n                unset ? delete current[attr] : current[attr] = val;\n            }\n\n            // Trigger all relevant attribute changes.\n            if (!silent) {\n                if (changes.length)\n                    this._pending = options;\n                for (var i = 0, l = changes.length; i < l; i++) {\n                    this.trigger('change:' + changes[i], this, current[changes[i]], options);\n                }\n            }\n\n            // You might be wondering why there's a `while` loop here. Changes can\n            // be recursively nested within `\"change\"` events.\n            if (changing)\n                return this;\n            if (!silent) {\n                while (this._pending) {\n                    options = this._pending;\n                    this._pending = false;\n                    this.trigger('change', this, options);\n                }\n            }\n            this._pending = false;\n            this._changing = false;\n            return this;\n        },\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n        // if the attribute doesn't exist.\n        unset: function (attr, options) {\n            return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n        },\n        // Clear all attributes on the model, firing `\"change\"`.\n        clear: function (options) {\n            var attrs = {};\n            for (var key in this.attributes)\n                attrs[key] = void 0;\n            return this.set(attrs, _.extend({}, options, {unset: true}));\n        },\n        // Determine if the model has changed since the last `\"change\"` event.\n        // If you specify an attribute name, determine if that attribute has changed.\n        hasChanged: function (attr) {\n            if (attr == null)\n                return !_.isEmpty(this.changed);\n            return _.has(this.changed, attr);\n        },\n        // Return an object containing all the attributes that have changed, or\n        // false if there are no changed attributes. Useful for determining what\n        // parts of a view need to be updated and/or what attributes need to be\n        // persisted to the server. Unset attributes will be set to undefined.\n        // You can also pass an attributes object to diff against the model,\n        // determining if there *would be* a change.\n        changedAttributes: function (diff) {\n            if (!diff)\n                return this.hasChanged() ? _.clone(this.changed) : false;\n            var val, changed = false;\n            var old = this._changing ? this._previousAttributes : this.attributes;\n            for (var attr in diff) {\n                if (_.isEqual(old[attr], (val = diff[attr])))\n                    continue;\n                (changed || (changed = {}))[attr] = val;\n            }\n            return changed;\n        },\n        // Get the previous value of an attribute, recorded at the time the last\n        // `\"change\"` event was fired.\n        previous: function (attr) {\n            if (attr == null || !this._previousAttributes)\n                return null;\n            return this._previousAttributes[attr];\n        },\n        // Get all of the attributes of the model at the time of the previous\n        // `\"change\"` event.\n        previousAttributes: function () {\n            return _.clone(this._previousAttributes);\n        },\n        // Fetch the model from the server. If the server's representation of the\n        // model differs from its current attributes, they will be overridden,\n        // triggering a `\"change\"` event.\n        fetch: function (options) {\n            options = options ? _.clone(options) : {};\n            if (options.parse === void 0)\n                options.parse = true;\n            var model = this;\n            var success = options.success;\n            options.success = function (resp) {\n                if (!model.set(model.parse(resp, options), options))\n                    return false;\n                if (success)\n                    success(model, resp, options);\n                model.trigger('sync', model, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync('read', this, options);\n        },\n        // Set a hash of model attributes, and sync the model to the server.\n        // If the server returns an attributes hash that differs, the model's\n        // state will be `set` again.\n        save: function (key, val, options) {\n            var attrs, method, xhr, attributes = this.attributes;\n\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            if (key == null || typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n\n            options = _.extend({validate: true}, options);\n\n            // If we're not waiting and attributes exist, save acts as\n            // `set(attr).save(null, opts)` with validation. Otherwise, check if\n            // the model will be valid when the attributes, if any, are set.\n            if (attrs && !options.wait) {\n                if (!this.set(attrs, options))\n                    return false;\n            } else {\n                if (!this._validate(attrs, options))\n                    return false;\n            }\n\n            // Set temporary attributes if `{wait: true}`.\n            if (attrs && options.wait) {\n                this.attributes = _.extend({}, attributes, attrs);\n            }\n\n            // After a successful server-side save, the client is (optionally)\n            // updated with the server-side state.\n            if (options.parse === void 0)\n                options.parse = true;\n            var model = this;\n            var success = options.success;\n            options.success = function (resp) {\n                // Ensure attributes are restored during synchronous saves.\n                model.attributes = attributes;\n                var serverAttrs = model.parse(resp, options);\n                if (options.wait)\n                    serverAttrs = _.extend(attrs || {}, serverAttrs);\n                if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n                    return false;\n                }\n                if (success)\n                    success(model, resp, options);\n                model.trigger('sync', model, resp, options);\n            };\n            wrapError(this, options);\n\n            method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n            if (method === 'patch')\n                options.attrs = attrs;\n            xhr = this.sync(method, this, options);\n\n            // Restore attributes.\n            if (attrs && options.wait)\n                this.attributes = attributes;\n\n            return xhr;\n        },\n        // Destroy this model on the server if it was already persisted.\n        // Optimistically removes the model from its collection, if it has one.\n        // If `wait: true` is passed, waits for the server to respond before removal.\n        destroy: function (options) {\n            options = options ? _.clone(options) : {};\n            var model = this;\n            var success = options.success;\n\n            var destroy = function () {\n                model.trigger('destroy', model, model.collection, options);\n            };\n\n            options.success = function (resp) {\n                if (options.wait || model.isNew())\n                    destroy();\n                if (success)\n                    success(model, resp, options);\n                if (!model.isNew())\n                    model.trigger('sync', model, resp, options);\n            };\n\n            if (this.isNew()) {\n                options.success();\n                return false;\n            }\n            wrapError(this, options);\n\n            var xhr = this.sync('delete', this, options);\n            if (!options.wait)\n                destroy();\n            return xhr;\n        },\n        // Default URL for the model's representation on the server -- if you're\n        // using Backbone's restful methods, override this to change the endpoint\n        // that will be called.\n        url: function () {\n            var base =\n                _.result(this, 'urlRoot') ||\n                _.result(this.collection, 'url') ||\n                urlError();\n            if (this.isNew())\n                return base;\n            return base.replace(/([^\\/])$/, '$1/') + encodeURIComponent(this.id);\n        },\n        // **parse** converts a response into the hash of attributes to be `set` on\n        // the model. The default implementation is just to pass the response along.\n        parse: function (resp, options) {\n            return resp;\n        },\n        // Create a new model with identical attributes to this one.\n        clone: function () {\n            return new this.constructor(this.attributes);\n        },\n        // A model is new if it has never been saved to the server, and lacks an id.\n        isNew: function () {\n            return !this.has(this.idAttribute);\n        },\n        // Check if the model is currently in a valid state.\n        isValid: function (options) {\n            return this._validate({}, _.extend(options || {}, {validate: true}));\n        },\n        // Run validation against the next complete set of model attributes,\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n        _validate: function (attrs, options) {\n            if (!options.validate || !this.validate)\n                return true;\n            attrs = _.extend({}, this.attributes, attrs);\n            var error = this.validationError = this.validate(attrs, options) || null;\n            if (!error)\n                return true;\n            this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n            return false;\n        }\n\n    });\n\n    // Underscore methods that we want to implement on the Model.\n    var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\n\n    // Mix in each Underscore method as a proxy to `Model#attributes`.\n    _.each(modelMethods, function (method) {\n        Model.prototype[method] = function () {\n            var args = slice.call(arguments);\n            args.unshift(this.attributes);\n            return _[method].apply(_, args);\n        };\n    });\n\n    // Backbone.Collection\n    // -------------------\n\n    // If models tend to represent a single row of data, a Backbone Collection is\n    // more analagous to a table full of data ... or a small slice or page of that\n    // table, or a collection of rows that belong together for a particular reason\n    // -- all of the messages in this particular folder, all of the documents\n    // belonging to this particular author, and so on. Collections maintain\n    // indexes of their models, both in order, and for lookup by `id`.\n\n    // Create a new **Collection**, perhaps to contain a specific type of `model`.\n    // If a `comparator` is specified, the Collection will maintain\n    // its models in sort order, as they're added and removed.\n    var Collection = Backbone.Collection = function (models, options) {\n        options || (options = {});\n        if (options.model)\n            this.model = options.model;\n        if (options.comparator !== void 0)\n            this.comparator = options.comparator;\n        this._reset();\n        this.initialize.apply(this, arguments);\n        if (models)\n            this.reset(models, _.extend({silent: true}, options));\n    };\n\n    // Default options for `Collection#set`.\n    var setOptions = {add: true, remove: true, merge: true};\n    var addOptions = {add: true, remove: false};\n\n    // Define the Collection's inheritable methods.\n    _.extend(Collection.prototype, Events, {\n        // The default model for a collection is just a **Backbone.Model**.\n        // This should be overridden in most cases.\n        model: Model,\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // The JSON representation of a Collection is an array of the\n        // models' attributes.\n        toJSON: function (options) {\n            return this.map(function (model) {\n                return model.toJSON(options);\n            });\n        },\n        // Proxy `Backbone.sync` by default.\n        sync: function () {\n            return Backbone.sync.apply(this, arguments);\n        },\n        // Add a model, or list of models to the set.\n        add: function (models, options) {\n            return this.set(models, _.extend({merge: false}, options, addOptions));\n        },\n        // Remove a model, or a list of models from the set.\n        remove: function (models, options) {\n            var singular = !_.isArray(models);\n            models = singular ? [models] : _.clone(models);\n            options || (options = {});\n            var i, l, index, model;\n            for (i = 0, l = models.length; i < l; i++) {\n                model = models[i] = this.get(models[i]);\n                if (!model)\n                    continue;\n                delete this._byId[model.id];\n                delete this._byId[model.cid];\n                index = this.indexOf(model);\n                this.models.splice(index, 1);\n                this.length--;\n                if (!options.silent) {\n                    options.index = index;\n                    model.trigger('remove', model, this, options);\n                }\n                this._removeReference(model, options);\n            }\n            return singular ? models[0] : models;\n        },\n        // Update a collection by `set`-ing a new list of models, adding new ones,\n        // removing models that are no longer present, and merging models that\n        // already exist in the collection, as necessary. Similar to **Model#set**,\n        // the core operation for updating the data contained by the collection.\n        set: function (models, options) {\n            options = _.defaults({}, options, setOptions);\n            if (options.parse)\n                models = this.parse(models, options);\n            var singular = !_.isArray(models);\n            models = singular ? (models ? [models] : []) : _.clone(models);\n            var i, l, id, model, attrs, existing, sort;\n            var at = options.at;\n            var targetModel = this.model;\n            var sortable = this.comparator && (at == null) && options.sort !== false;\n            var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n            var toAdd = [], toRemove = [], modelMap = {};\n            var add = options.add, merge = options.merge, remove = options.remove;\n            var order = !sortable && add && remove ? [] : false;\n\n            // Turn bare objects into model references, and prevent invalid models\n            // from being added.\n            for (i = 0, l = models.length; i < l; i++) {\n                attrs = models[i] || {};\n                if (attrs instanceof Model) {\n                    id = model = attrs;\n                } else {\n                    id = attrs[targetModel.prototype.idAttribute || 'id'];\n                }\n\n                // If a duplicate is found, prevent it from being added and\n                // optionally merge it into the existing model.\n                if (existing = this.get(id)) {\n                    if (remove)\n                        modelMap[existing.cid] = true;\n                    if (merge) {\n                        attrs = attrs === model ? model.attributes : attrs;\n                        if (options.parse)\n                            attrs = existing.parse(attrs, options);\n                        existing.set(attrs, options);\n                        if (sortable && !sort && existing.hasChanged(sortAttr))\n                            sort = true;\n                    }\n                    models[i] = existing;\n\n                    // If this is a new, valid model, push it to the `toAdd` list.\n                } else if (add) {\n                    model = models[i] = this._prepareModel(attrs, options);\n                    if (!model)\n                        continue;\n                    toAdd.push(model);\n                    this._addReference(model, options);\n                }\n\n                // Do not add multiple models with the same `id`.\n                model = existing || model;\n                if (order && (model.isNew() || !modelMap[model.id]))\n                    order.push(model);\n                modelMap[model.id] = true;\n            }\n\n            // Remove nonexistent models if appropriate.\n            if (remove) {\n                for (i = 0, l = this.length; i < l; ++i) {\n                    if (!modelMap[(model = this.models[i]).cid])\n                        toRemove.push(model);\n                }\n                if (toRemove.length)\n                    this.remove(toRemove, options);\n            }\n\n            // See if sorting is needed, update `length` and splice in new models.\n            if (toAdd.length || (order && order.length)) {\n                if (sortable)\n                    sort = true;\n                this.length += toAdd.length;\n                if (at != null) {\n                    for (i = 0, l = toAdd.length; i < l; i++) {\n                        this.models.splice(at + i, 0, toAdd[i]);\n                    }\n                } else {\n                    if (order)\n                        this.models.length = 0;\n                    var orderedModels = order || toAdd;\n                    for (i = 0, l = orderedModels.length; i < l; i++) {\n                        this.models.push(orderedModels[i]);\n                    }\n                }\n            }\n\n            // Silently sort the collection if appropriate.\n            if (sort)\n                this.sort({silent: true});\n\n            // Unless silenced, it's time to fire all appropriate add/sort events.\n            if (!options.silent) {\n                for (i = 0, l = toAdd.length; i < l; i++) {\n                    (model = toAdd[i]).trigger('add', model, this, options);\n                }\n                if (sort || (order && order.length))\n                    this.trigger('sort', this, options);\n            }\n\n            // Return the added (or merged) model (or models).\n            return singular ? models[0] : models;\n        },\n        // When you have more items than you want to add or remove individually,\n        // you can reset the entire set with a new list of models, without firing\n        // any granular `add` or `remove` events. Fires `reset` when finished.\n        // Useful for bulk operations and optimizations.\n        reset: function (models, options) {\n            options || (options = {});\n            for (var i = 0, l = this.models.length; i < l; i++) {\n                this._removeReference(this.models[i], options);\n            }\n            options.previousModels = this.models;\n            this._reset();\n            models = this.add(models, _.extend({silent: true}, options));\n            if (!options.silent)\n                this.trigger('reset', this, options);\n            return models;\n        },\n        // Add a model to the end of the collection.\n        push: function (model, options) {\n            return this.add(model, _.extend({at: this.length}, options));\n        },\n        // Remove a model from the end of the collection.\n        pop: function (options) {\n            var model = this.at(this.length - 1);\n            this.remove(model, options);\n            return model;\n        },\n        // Add a model to the beginning of the collection.\n        unshift: function (model, options) {\n            return this.add(model, _.extend({at: 0}, options));\n        },\n        // Remove a model from the beginning of the collection.\n        shift: function (options) {\n            var model = this.at(0);\n            this.remove(model, options);\n            return model;\n        },\n        // Slice out a sub-array of models from the collection.\n        slice: function () {\n            return slice.apply(this.models, arguments);\n        },\n        // Get a model from the set by id.\n        get: function (obj) {\n            if (obj == null)\n                return void 0;\n            return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];\n        },\n        // Get the model at the given index.\n        at: function (index) {\n            return this.models[index];\n        },\n        // Return models with matching attributes. Useful for simple cases of\n        // `filter`.\n        where: function (attrs, first) {\n            if (_.isEmpty(attrs))\n                return first ? void 0 : [];\n            return this[first ? 'find' : 'filter'](function (model) {\n                for (var key in attrs) {\n                    if (attrs[key] !== model.get(key))\n                        return false;\n                }\n                return true;\n            });\n        },\n        // Return the first model with matching attributes. Useful for simple cases\n        // of `find`.\n        findWhere: function (attrs) {\n            return this.where(attrs, true);\n        },\n        // Force the collection to re-sort itself. You don't need to call this under\n        // normal circumstances, as the set will maintain sort order as each item\n        // is added.\n        sort: function (options) {\n            if (!this.comparator)\n                throw new Error('Cannot sort a set without a comparator');\n            options || (options = {});\n\n            // Run sort based on type of `comparator`.\n            if (_.isString(this.comparator) || this.comparator.length === 1) {\n                this.models = this.sortBy(this.comparator, this);\n            } else {\n                this.models.sort(_.bind(this.comparator, this));\n            }\n\n            if (!options.silent)\n                this.trigger('sort', this, options);\n            return this;\n        },\n        // Pluck an attribute from each model in the collection.\n        pluck: function (attr) {\n            return _.invoke(this.models, 'get', attr);\n        },\n        // Fetch the default set of models for this collection, resetting the\n        // collection when they arrive. If `reset: true` is passed, the response\n        // data will be passed through the `reset` method instead of `set`.\n        fetch: function (options) {\n            options = options ? _.clone(options) : {};\n            if (options.parse === void 0)\n                options.parse = true;\n            var success = options.success;\n            var collection = this;\n            options.success = function (resp) {\n                var method = options.reset ? 'reset' : 'set';\n                collection[method](resp, options);\n                if (success)\n                    success(collection, resp, options);\n                collection.trigger('sync', collection, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync('read', this, options);\n        },\n        // Create a new instance of a model in this collection. Add the model to the\n        // collection immediately, unless `wait: true` is passed, in which case we\n        // wait for the server to agree.\n        create: function (model, options) {\n            options = options ? _.clone(options) : {};\n            if (!(model = this._prepareModel(model, options)))\n                return false;\n            if (!options.wait)\n                this.add(model, options);\n            var collection = this;\n            var success = options.success;\n            options.success = function (model, resp) {\n                if (options.wait)\n                    collection.add(model, options);\n                if (success)\n                    success(model, resp, options);\n            };\n            model.save(null, options);\n            return model;\n        },\n        // **parse** converts a response into a list of models to be added to the\n        // collection. The default implementation is just to pass it through.\n        parse: function (resp, options) {\n            return resp;\n        },\n        // Create a new collection with an identical list of models as this one.\n        clone: function () {\n            return new this.constructor(this.models);\n        },\n        // Private method to reset all internal state. Called when the collection\n        // is first initialized or reset.\n        _reset: function () {\n            this.length = 0;\n            this.models = [];\n            this._byId = {};\n        },\n        // Prepare a hash of attributes (or other model) to be added to this\n        // collection.\n        _prepareModel: function (attrs, options) {\n            if (attrs instanceof Model)\n                return attrs;\n            options = options ? _.clone(options) : {};\n            options.collection = this;\n            var model = new this.model(attrs, options);\n            if (!model.validationError)\n                return model;\n            this.trigger('invalid', this, model.validationError, options);\n            return false;\n        },\n        // Internal method to create a model's ties to a collection.\n        _addReference: function (model, options) {\n            this._byId[model.cid] = model;\n            if (model.id != null)\n                this._byId[model.id] = model;\n            if (!model.collection)\n                model.collection = this;\n            model.on('all', this._onModelEvent, this);\n        },\n        // Internal method to sever a model's ties to a collection.\n        _removeReference: function (model, options) {\n            if (this === model.collection)\n                delete model.collection;\n            model.off('all', this._onModelEvent, this);\n        },\n        // Internal method called every time a model in the set fires an event.\n        // Sets need to update their indexes when models change ids. All other\n        // events simply proxy through. \"add\" and \"remove\" events that originate\n        // in other collections are ignored.\n        _onModelEvent: function (event, model, collection, options) {\n            if ((event === 'add' || event === 'remove') && collection !== this)\n                return;\n            if (event === 'destroy')\n                this.remove(model, options);\n            if (model && event === 'change:' + model.idAttribute) {\n                delete this._byId[model.previous(model.idAttribute)];\n                if (model.id != null)\n                    this._byId[model.id] = model;\n            }\n            this.trigger.apply(this, arguments);\n        }\n\n    });\n\n    // Underscore methods that we want to implement on the Collection.\n    // 90% of the core usefulness of Backbone Collections is actually implemented\n    // right here:\n    var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\n        'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\n        'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\n        'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\n        'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',\n        'lastIndexOf', 'isEmpty', 'chain', 'sample'];\n\n    // Mix in each Underscore method as a proxy to `Collection#models`.\n    _.each(methods, function (method) {\n        Collection.prototype[method] = function () {\n            var args = slice.call(arguments);\n            args.unshift(this.models);\n            return _[method].apply(_, args);\n        };\n    });\n\n    // Underscore methods that take a property name as an argument.\n    var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];\n\n    // Use attributes instead of properties.\n    _.each(attributeMethods, function (method) {\n        Collection.prototype[method] = function (value, context) {\n            var iterator = _.isFunction(value) ? value : function (model) {\n                return model.get(value);\n            };\n            return _[method](this.models, iterator, context);\n        };\n    });\n\n    // Backbone.View\n    // -------------\n\n    // Backbone Views are almost more convention than they are actual code. A View\n    // is simply a JavaScript object that represents a logical chunk of UI in the\n    // DOM. This might be a single item, an entire list, a sidebar or panel, or\n    // even the surrounding frame which wraps your whole app. Defining a chunk of\n    // UI as a **View** allows you to define your DOM events declaratively, without\n    // having to worry about render order ... and makes it easy for the view to\n    // react to specific changes in the state of your models.\n\n    // Creating a Backbone.View creates its initial element outside of the DOM,\n    // if an existing element is not provided...\n    var View = Backbone.View = function (options) {\n        this.cid = _.uniqueId('view');\n        options || (options = {});\n        _.extend(this, _.pick(options, viewOptions));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n        this.delegateEvents();\n    };\n\n    // Cached regex to split keys for `delegate`.\n    var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n    // List of view options to be merged as properties.\n    var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n    // Set up all inheritable **Backbone.View** properties and methods.\n    _.extend(View.prototype, Events, {\n        // The default `tagName` of a View's element is `\"div\"`.\n        tagName: 'div',\n        // jQuery delegate for element lookup, scoped to DOM elements within the\n        // current view. This should be preferred to global lookups where possible.\n        $: function (selector) {\n            return this.$el.find(selector);\n        },\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // **render** is the core function that your view should override, in order\n        // to populate its element (`this.el`), with the appropriate HTML. The\n        // convention is for **render** to always return `this`.\n        render: function () {\n            return this;\n        },\n        // Remove this view by taking the element out of the DOM, and removing any\n        // applicable Backbone.Events listeners.\n        remove: function () {\n            this.$el.remove();\n            this.stopListening();\n            return this;\n        },\n        // Change the view's element (`this.el` property), including event\n        // re-delegation.\n        setElement: function (element, delegate) {\n            if (this.$el)\n                this.undelegateEvents();\n            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n            this.el = this.$el[0];\n            if (delegate !== false)\n                this.delegateEvents();\n            return this;\n        },\n        // Set callbacks, where `this.events` is a hash of\n        //\n        // *{\"event selector\": \"callback\"}*\n        //\n        //     {\n        //       'mousedown .title':  'edit',\n        //       'click .button':     'save',\n        //       'click .open':       function(e) { ... }\n        //     }\n        //\n        // pairs. Callbacks will be bound to the view, with `this` set properly.\n        // Uses event delegation for efficiency.\n        // Omitting the selector binds the event to `this.el`.\n        // This only works for delegate-able events: not `focus`, `blur`, and\n        // not `change`, `submit`, and `reset` in Internet Explorer.\n        delegateEvents: function (events) {\n            if (!(events || (events = _.result(this, 'events'))))\n                return this;\n            this.undelegateEvents();\n            for (var key in events) {\n                var method = events[key];\n                if (!_.isFunction(method))\n                    method = this[events[key]];\n                if (!method)\n                    continue;\n\n                var match = key.match(delegateEventSplitter);\n                var eventName = match[1], selector = match[2];\n                method = _.bind(method, this);\n                eventName += '.delegateEvents' + this.cid;\n                if (selector === '') {\n                    this.$el.on(eventName, method);\n                } else {\n                    this.$el.on(eventName, selector, method);\n                }\n            }\n            return this;\n        },\n        // Clears all callbacks previously bound to the view with `delegateEvents`.\n        // You usually don't need to use this, but may wish to if you have multiple\n        // Backbone views attached to the same DOM element.\n        undelegateEvents: function () {\n            this.$el.off('.delegateEvents' + this.cid);\n            return this;\n        },\n        // Ensure that the View has a DOM element to render into.\n        // If `this.el` is a string, pass it through `$()`, take the first\n        // matching element, and re-assign it to `el`. Otherwise, create\n        // an element from the `id`, `className` and `tagName` properties.\n        _ensureElement: function () {\n            if (!this.el) {\n                var attrs = _.extend({}, _.result(this, 'attributes'));\n                if (this.id)\n                    attrs.id = _.result(this, 'id');\n                if (this.className)\n                    attrs['class'] = _.result(this, 'className');\n                var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\n                this.setElement($el, false);\n            } else {\n                this.setElement(_.result(this, 'el'), false);\n            }\n        }\n\n    });\n\n    // Backbone.sync\n    // -------------\n\n    // Override this function to change the manner in which Backbone persists\n    // models to the server. You will be passed the type of request, and the\n    // model in question. By default, makes a RESTful Ajax request\n    // to the model's `url()`. Some possible customizations could be:\n    //\n    // * Use `setTimeout` to batch rapid-fire updates into a single request.\n    // * Send up the models as XML instead of JSON.\n    // * Persist models via WebSockets instead of Ajax.\n    //\n    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n    // as `POST`, with a `_method` parameter containing the true HTTP method,\n    // as well as all requests with the body as `application/x-www-form-urlencoded`\n    // instead of `application/json` with the model in a param named `model`.\n    // Useful when interfacing with server-side languages like **PHP** that make\n    // it difficult to read the body of `PUT` requests.\n    Backbone.sync = function (method, model, options) {\n        var type = methodMap[method];\n\n        // Default options, unless specified.\n        _.defaults(options || (options = {}), {\n            emulateHTTP: Backbone.emulateHTTP,\n            emulateJSON: Backbone.emulateJSON\n        });\n\n        // Default JSON-request options.\n        var params = {type: type, dataType: 'json'};\n\n        // Ensure that we have a URL.\n        if (!options.url) {\n            params.url = _.result(model, 'url') || urlError();\n        }\n\n        // Ensure that we have the appropriate request data.\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n            params.contentType = 'application/json';\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\n        }\n\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\n        if (options.emulateJSON) {\n            params.contentType = 'application/x-www-form-urlencoded';\n            params.data = params.data ? {model: params.data} : {};\n        }\n\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n        // And an `X-HTTP-Method-Override` header.\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n            params.type = 'POST';\n            if (options.emulateJSON)\n                params.data._method = type;\n            var beforeSend = options.beforeSend;\n            options.beforeSend = function (xhr) {\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\n                if (beforeSend)\n                    return beforeSend.apply(this, arguments);\n            };\n        }\n\n        // Don't process data on a non-GET request.\n        if (params.type !== 'GET' && !options.emulateJSON) {\n            params.processData = false;\n        }\n\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\n        // that still has ActiveX enabled by default, override jQuery to use that\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\n        if (params.type === 'PATCH' && noXhrPatch) {\n            params.xhr = function () {\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\n            };\n        }\n\n        // Make the request, allowing the user to override any Ajax options.\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n        model.trigger('request', model, xhr, options);\n        return xhr;\n    };\n\n    var noXhrPatch =\n        typeof window !== 'undefined' && !!window.ActiveXObject &&\n        !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n    // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n    var methodMap = {\n        'create': 'POST',\n        'update': 'PUT',\n        'patch': 'PATCH',\n        'delete': 'DELETE',\n        'read': 'GET'\n    };\n\n    // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n    // Override this if you'd like to use a different library.\n    Backbone.ajax = function () {\n        return Backbone.$.ajax.apply(Backbone.$, arguments);\n    };\n\n    // Backbone.Router\n    // ---------------\n\n    // Routers map faux-URLs to actions, and fire events when routes are\n    // matched. Creating a new one sets its `routes` hash, if not set statically.\n    var Router = Backbone.Router = function (options) {\n        options || (options = {});\n        if (options.routes)\n            this.routes = options.routes;\n        this._bindRoutes();\n        this.initialize.apply(this, arguments);\n    };\n\n    // Cached regular expressions for matching named param parts and splatted\n    // parts of route strings.\n    var optionalParam = /\\((.*?)\\)/g;\n    var namedParam = /(\\(\\?)?:\\w+/g;\n    var splatParam = /\\*\\w+/g;\n    var escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n    // Set up all inheritable **Backbone.Router** properties and methods.\n    _.extend(Router.prototype, Events, {\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // Manually bind a single named route to a callback. For example:\n        //\n        //     this.route('search/:query/p:num', 'search', function(query, num) {\n        //       ...\n        //     });\n        //\n        route: function (route, name, callback) {\n            if (!_.isRegExp(route))\n                route = this._routeToRegExp(route);\n            if (_.isFunction(name)) {\n                callback = name;\n                name = '';\n            }\n            if (!callback)\n                callback = this[name];\n            var router = this;\n            Backbone.history.route(route, function (fragment) {\n                var args = router._extractParameters(route, fragment);\n                router.execute(callback, args);\n                router.trigger.apply(router, ['route:' + name].concat(args));\n                router.trigger('route', name, args);\n                Backbone.history.trigger('route', router, name, args);\n            });\n            return this;\n        },\n        // Execute a route handler with the provided parameters.  This is an\n        // excellent place to do pre-route setup or post-route cleanup.\n        execute: function (callback, args) {\n            if (callback)\n                callback.apply(this, args);\n        },\n        // Simple proxy to `Backbone.history` to save a fragment into the history.\n        navigate: function (fragment, options) {\n            Backbone.history.navigate(fragment, options);\n            return this;\n        },\n        // Bind all defined routes to `Backbone.history`. We have to reverse the\n        // order of the routes here to support behavior where the most general\n        // routes can be defined at the bottom of the route map.\n        _bindRoutes: function () {\n            if (!this.routes)\n                return;\n            this.routes = _.result(this, 'routes');\n            var route, routes = _.keys(this.routes);\n            while ((route = routes.pop()) != null) {\n                this.route(route, this.routes[route]);\n            }\n        },\n        // Convert a route string into a regular expression, suitable for matching\n        // against the current location hash.\n        _routeToRegExp: function (route) {\n            route = route.replace(escapeRegExp, '\\\\$&')\n                .replace(optionalParam, '(?:$1)?')\n                .replace(namedParam, function (match, optional) {\n                    return optional ? match : '([^/?]+)';\n                })\n                .replace(splatParam, '([^?]*?)');\n            return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n        },\n        // Given a route, and a URL fragment that it matches, return the array of\n        // extracted decoded parameters. Empty or unmatched parameters will be\n        // treated as `null` to normalize cross-browser behavior.\n        _extractParameters: function (route, fragment) {\n            var params = route.exec(fragment).slice(1);\n            return _.map(params, function (param, i) {\n                // Don't decode the search params.\n                if (i === params.length - 1)\n                    return param || null;\n                return param ? decodeURIComponent(param) : null;\n            });\n        }\n\n    });\n\n    // Backbone.History\n    // ----------------\n\n    // Handles cross-browser history management, based on either\n    // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n    // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n    // and URL fragments. If the browser supports neither (old IE, natch),\n    // falls back to polling.\n    var History = Backbone.History = function () {\n        this.handlers = [];\n        _.bindAll(this, 'checkUrl');\n\n        // Ensure that `History` can be used outside of the browser.\n        if (typeof window !== 'undefined') {\n            this.location = window.location;\n            this.history = window.history;\n        }\n    };\n\n    // Cached regex for stripping a leading hash/slash and trailing space.\n    var routeStripper = /^[#\\/]|\\s+$/g;\n\n    // Cached regex for stripping leading and trailing slashes.\n    var rootStripper = /^\\/+|\\/+$/g;\n\n    // Cached regex for detecting MSIE.\n    var isExplorer = /msie [\\w.]+/;\n\n    // Cached regex for removing a trailing slash.\n    var trailingSlash = /\\/$/;\n\n    // Cached regex for stripping urls of hash.\n    var pathStripper = /#.*$/;\n\n    // Has the history handling already been started?\n    History.started = false;\n\n    // Set up all inheritable **Backbone.History** properties and methods.\n    _.extend(History.prototype, Events, {\n        // The default interval to poll for hash changes, if necessary, is\n        // twenty times a second.\n        interval: 50,\n        // Are we at the app root?\n        atRoot: function () {\n            return this.location.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n        },\n        // Gets the true hash value. Cannot use location.hash directly due to bug\n        // in Firefox where location.hash will always be decoded.\n        getHash: function (window) {\n            var match = (window || this).location.href.match(/#(.*)$/);\n            return match ? match[1] : '';\n        },\n        // Get the cross-browser normalized URL fragment, either from the URL,\n        // the hash, or the override.\n        getFragment: function (fragment, forcePushState) {\n            if (fragment == null) {\n                if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n                    fragment = decodeURI(this.location.pathname + this.location.search);\n                    var root = this.root.replace(trailingSlash, '');\n                    if (!fragment.indexOf(root))\n                        fragment = fragment.slice(root.length);\n                } else {\n                    fragment = this.getHash();\n                }\n            }\n            return fragment.replace(routeStripper, '');\n        },\n        // Start the hash change handling, returning `true` if the current URL matches\n        // an existing route, and `false` otherwise.\n        start: function (options) {\n            if (History.started)\n                throw new Error(\"Backbone.history has already been started\");\n            History.started = true;\n\n            // Figure out the initial configuration. Do we need an iframe?\n            // Is pushState desired ... is it available?\n            this.options = _.extend({root: '/'}, this.options, options);\n            this.root = this.options.root;\n            this._wantsHashChange = this.options.hashChange !== false;\n            this._wantsPushState = !!this.options.pushState;\n            this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);\n            var fragment = this.getFragment();\n            var docMode = document.documentMode;\n            var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n            // Normalize root to always include a leading and trailing slash.\n            this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n            if (oldIE && this._wantsHashChange) {\n                var frame = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\">');\n                this.iframe = frame.hide().appendTo('body')[0].contentWindow;\n                this.navigate(fragment);\n            }\n\n            // Depending on whether we're using pushState or hashes, and whether\n            // 'onhashchange' is supported, determine how we check the URL state.\n            if (this._hasPushState) {\n                Backbone.$(window).on('popstate', this.checkUrl);\n            } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n                Backbone.$(window).on('hashchange', this.checkUrl);\n            } else if (this._wantsHashChange) {\n                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n            }\n\n            // Determine if we need to change the base url, for a pushState link\n            // opened by a non-pushState browser.\n            this.fragment = fragment;\n            var loc = this.location;\n\n            // Transition from hashChange to pushState or vice versa if both are\n            // requested.\n            if (this._wantsHashChange && this._wantsPushState) {\n\n                // If we've started off with a route from a `pushState`-enabled\n                // browser, but we're currently in a browser that doesn't support it...\n                if (!this._hasPushState && !this.atRoot()) {\n                    this.fragment = this.getFragment(null, true);\n                    this.location.replace(this.root + '#' + this.fragment);\n                    // Return immediately as browser will do redirect to new url\n                    return true;\n\n                    // Or if we've started out with a hash-based route, but we're currently\n                    // in a browser where it could be `pushState`-based instead...\n                } else if (this._hasPushState && this.atRoot() && loc.hash) {\n                    this.fragment = this.getHash().replace(routeStripper, '');\n                    this.history.replaceState({}, document.title, this.root + this.fragment);\n                }\n\n            }\n\n            if (!this.options.silent)\n                return this.loadUrl();\n        },\n        // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n        // but possibly useful for unit testing Routers.\n        stop: function () {\n            Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\n            if (this._checkUrlInterval)\n                clearInterval(this._checkUrlInterval);\n            History.started = false;\n        },\n        // Add a route to be tested when the fragment changes. Routes added later\n        // may override previous routes.\n        route: function (route, callback) {\n            this.handlers.unshift({route: route, callback: callback});\n        },\n        // Checks the current URL to see if it has changed, and if it has,\n        // calls `loadUrl`, normalizing across the hidden iframe.\n        checkUrl: function (e) {\n            var current = this.getFragment();\n            if (current === this.fragment && this.iframe) {\n                current = this.getFragment(this.getHash(this.iframe));\n            }\n            if (current === this.fragment)\n                return false;\n            if (this.iframe)\n                this.navigate(current);\n            this.loadUrl();\n        },\n        // Attempt to load the current URL fragment. If a route succeeds with a\n        // match, returns `true`. If no defined routes matches the fragment,\n        // returns `false`.\n        loadUrl: function (fragment) {\n            fragment = this.fragment = this.getFragment(fragment);\n            return _.any(this.handlers, function (handler) {\n                if (handler.route.test(fragment)) {\n                    handler.callback(fragment);\n                    return true;\n                }\n            });\n        },\n        // Save a fragment into the hash history, or replace the URL state if the\n        // 'replace' option is passed. You are responsible for properly URL-encoding\n        // the fragment in advance.\n        //\n        // The options object can contain `trigger: true` if you wish to have the\n        // route callback be fired (not usually desirable), or `replace: true`, if\n        // you wish to modify the current URL without adding an entry to the history.\n        navigate: function (fragment, options) {\n            if (!History.started)\n                return false;\n            if (!options || options === true)\n                options = {trigger: !!options};\n\n            var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n            // Strip the hash for matching.\n            fragment = fragment.replace(pathStripper, '');\n\n            if (this.fragment === fragment)\n                return;\n            this.fragment = fragment;\n\n            // Don't include a trailing slash on the root.\n            if (fragment === '' && url !== '/')\n                url = url.slice(0, -1);\n\n            // If pushState is available, we use it to set the fragment as a real URL.\n            if (this._hasPushState) {\n                this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n                // If hash changes haven't been explicitly disabled, update the hash\n                // fragment to store history.\n            } else if (this._wantsHashChange) {\n                this._updateHash(this.location, fragment, options.replace);\n                if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\n                    // Opening and closing the iframe tricks IE7 and earlier to push a\n                    // history entry on hash-tag change.  When replace is true, we don't\n                    // want this.\n                    if (!options.replace)\n                        this.iframe.document.open().close();\n                    this._updateHash(this.iframe.location, fragment, options.replace);\n                }\n\n                // If you've told us that you explicitly don't want fallback hashchange-\n                // based history, then `navigate` becomes a page refresh.\n            } else {\n                return this.location.assign(url);\n            }\n            if (options.trigger)\n                return this.loadUrl(fragment);\n        },\n        // Update the hash location, either replacing the current entry, or adding\n        // a new one to the browser history.\n        _updateHash: function (location, fragment, replace) {\n            if (replace) {\n                var href = location.href.replace(/(javascript:|#).*$/, '');\n                location.replace(href + '#' + fragment);\n            } else {\n                // Some browsers require that `hash` contains a leading #.\n                location.hash = '#' + fragment;\n            }\n        }\n\n    });\n\n    // Create the default Backbone.history.\n    Backbone.history = new History;\n\n    // Helpers\n    // -------\n\n    // Helper function to correctly set up the prototype chain, for subclasses.\n    // Similar to `goog.inherits`, but uses a hash of prototype properties and\n    // class properties to be extended.\n    var extend = function (protoProps, staticProps) {\n        var parent = this;\n        var child;\n\n        // The constructor function for the new subclass is either defined by you\n        // (the \"constructor\" property in your `extend` definition), or defaulted\n        // by us to simply call the parent's constructor.\n        if (protoProps && _.has(protoProps, 'constructor')) {\n            child = protoProps.constructor;\n        } else {\n            child = function () {\n                return parent.apply(this, arguments);\n            };\n        }\n\n        // Add static properties to the constructor function, if supplied.\n        _.extend(child, parent, staticProps);\n\n        // Set the prototype chain to inherit from `parent`, without calling\n        // `parent`'s constructor function.\n        var Surrogate = function () {\n            this.constructor = child;\n        };\n        Surrogate.prototype = parent.prototype;\n        child.prototype = new Surrogate;\n\n        // Add prototype properties (instance properties) to the subclass,\n        // if supplied.\n        if (protoProps)\n            _.extend(child.prototype, protoProps);\n\n        // Set a convenience property in case the parent's prototype is needed\n        // later.\n        child.__super__ = parent.prototype;\n\n        return child;\n    };\n\n    // Set up inheritance for the model, collection, router, view and history.\n    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n    // Throw an error when a URL is needed, and none is supplied.\n    var urlError = function () {\n        throw new Error('A \"url\" property or function must be specified');\n    };\n\n    // Wrap an optional error callback with a fallback error event.\n    var wrapError = function (model, options) {\n        var error = options.error;\n        options.error = function (resp) {\n            if (error)\n                error(model, resp, options);\n            model.trigger('error', model, resp, options);\n        };\n    };\n\n    return Backbone;\n\n}));\n\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = Backbone;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license\n //@ sourceMappingURL=jquery.min.map\n */\n(function (e, t) {\n    var n, r, i = typeof t, o = e.location, a = e.document, s = a.documentElement, l = e.jQuery, u = e.$, c = {}, p = [], f = \"1.10.2\", d = p.concat, h = p.push, g = p.slice, m = p.indexOf, y = c.toString, v = c.hasOwnProperty, b = f.trim, x = function (e, t) {\n        return new x.fn.init(e, t, r)\n    }, w = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source, T = /\\S+/g, C = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, N = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/, k = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/, E = /^[\\],:{}\\s]*$/, S = /(?:^|:|,)(?:\\s*\\[)+/g, A = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g, j = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g, D = /^-ms-/, L = /-([\\da-z])/gi, H = function (e, t) {\n        return t.toUpperCase()\n    }, q = function (e) {\n        (a.addEventListener || \"load\" === e.type || \"complete\" === a.readyState) && (_(), x.ready())\n    }, _ = function () {\n        a.addEventListener ? (a.removeEventListener(\"DOMContentLoaded\", q, !1), e.removeEventListener(\"load\", q, !1)) : (a.detachEvent(\"onreadystatechange\", q), e.detachEvent(\"onload\", q))\n    };\n    x.fn = x.prototype = {jquery: f, constructor: x, init: function (e, n, r) {\n            var i, o;\n            if (!e)\n                return this;\n            if (\"string\" == typeof e) {\n                if (i = \"<\" === e.charAt(0) && \">\" === e.charAt(e.length - 1) && e.length >= 3 ? [null, e, null] : N.exec(e), !i || !i[1] && n)\n                    return!n || n.jquery ? (n || r).find(e) : this.constructor(n).find(e);\n                if (i[1]) {\n                    if (n = n instanceof x ? n[0] : n, x.merge(this, x.parseHTML(i[1], n && n.nodeType ? n.ownerDocument || n : a, !0)), k.test(i[1]) && x.isPlainObject(n))\n                        for (i in n)\n                            x.isFunction(this[i]) ? this[i](n[i]) : this.attr(i, n[i]);\n                    return this\n                }\n                if (o = a.getElementById(i[2]), o && o.parentNode) {\n                    if (o.id !== i[2])\n                        return r.find(e);\n                    this.length = 1, this[0] = o\n                }\n                return this.context = a, this.selector = e, this\n            }\n            return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : x.isFunction(e) ? r.ready(e) : (e.selector !== t && (this.selector = e.selector, this.context = e.context), x.makeArray(e, this))\n        }, selector: \"\", length: 0, toArray: function () {\n            return g.call(this)\n        }, get: function (e) {\n            return null == e ? this.toArray() : 0 > e ? this[this.length + e] : this[e]\n        }, pushStack: function (e) {\n            var t = x.merge(this.constructor(), e);\n            return t.prevObject = this, t.context = this.context, t\n        }, each: function (e, t) {\n            return x.each(this, e, t)\n        }, ready: function (e) {\n            return x.ready.promise().done(e), this\n        }, slice: function () {\n            return this.pushStack(g.apply(this, arguments))\n        }, first: function () {\n            return this.eq(0)\n        }, last: function () {\n            return this.eq(-1)\n        }, eq: function (e) {\n            var t = this.length, n = +e + (0 > e ? t : 0);\n            return this.pushStack(n >= 0 && t > n ? [this[n]] : [])\n        }, map: function (e) {\n            return this.pushStack(x.map(this, function (t, n) {\n                return e.call(t, n, t)\n            }))\n        }, end: function () {\n            return this.prevObject || this.constructor(null)\n        }, push: h, sort: [].sort, splice: [].splice}, x.fn.init.prototype = x.fn, x.extend = x.fn.extend = function () {\n        var e, n, r, i, o, a, s = arguments[0] || {}, l = 1, u = arguments.length, c = !1;\n        for (\"boolean\" == typeof s && (c = s, s = arguments[1] || {}, l = 2), \"object\" == typeof s || x.isFunction(s) || (s = {}), u === l && (s = this, --l); u > l; l++)\n            if (null != (o = arguments[l]))\n                for (i in o)\n                    e = s[i], r = o[i], s !== r && (c && r && (x.isPlainObject(r) || (n = x.isArray(r))) ? (n ? (n = !1, a = e && x.isArray(e) ? e : []) : a = e && x.isPlainObject(e) ? e : {}, s[i] = x.extend(c, a, r)) : r !== t && (s[i] = r));\n        return s\n    }, x.extend({expando: \"jQuery\" + (f + Math.random()).replace(/\\D/g, \"\"), noConflict: function (t) {\n            return e.$ === x && (e.$ = u), t && e.jQuery === x && (e.jQuery = l), x\n        }, isReady: !1, readyWait: 1, holdReady: function (e) {\n            e ? x.readyWait++ : x.ready(!0)\n        }, ready: function (e) {\n            if (e === !0 ? !--x.readyWait : !x.isReady) {\n                if (!a.body)\n                    return setTimeout(x.ready);\n                x.isReady = !0, e !== !0 && --x.readyWait > 0 || (n.resolveWith(a, [x]), x.fn.trigger && x(a).trigger(\"ready\").off(\"ready\"))\n            }\n        }, isFunction: function (e) {\n            return\"function\" === x.type(e)\n        }, isArray: Array.isArray || function (e) {\n            return\"array\" === x.type(e)\n        }, isWindow: function (e) {\n            return null != e && e == e.window\n        }, isNumeric: function (e) {\n            return!isNaN(parseFloat(e)) && isFinite(e)\n        }, type: function (e) {\n            return null == e ? e + \"\" : \"object\" == typeof e || \"function\" == typeof e ? c[y.call(e)] || \"object\" : typeof e\n        }, isPlainObject: function (e) {\n            var n;\n            if (!e || \"object\" !== x.type(e) || e.nodeType || x.isWindow(e))\n                return!1;\n            try {\n                if (e.constructor && !v.call(e, \"constructor\") && !v.call(e.constructor.prototype, \"isPrototypeOf\"))\n                    return!1\n            } catch (r) {\n                return!1\n            }\n            if (x.support.ownLast)\n                for (n in e)\n                    return v.call(e, n);\n            for (n in e)\n                ;\n            return n === t || v.call(e, n)\n        }, isEmptyObject: function (e) {\n            var t;\n            for (t in e)\n                return!1;\n            return!0\n        }, error: function (e) {\n            throw Error(e)\n        }, parseHTML: function (e, t, n) {\n            if (!e || \"string\" != typeof e)\n                return null;\n            \"boolean\" == typeof t && (n = t, t = !1), t = t || a;\n            var r = k.exec(e), i = !n && [];\n            return r ? [t.createElement(r[1])] : (r = x.buildFragment([e], t, i), i && x(i).remove(), x.merge([], r.childNodes))\n        }, parseJSON: function (n) {\n            return e.JSON && e.JSON.parse ? e.JSON.parse(n) : null === n ? n : \"string\" == typeof n && (n = x.trim(n), n && E.test(n.replace(A, \"@\").replace(j, \"]\").replace(S, \"\"))) ? Function(\"return \" + n)() : (x.error(\"Invalid JSON: \" + n), t)\n        }, parseXML: function (n) {\n            var r, i;\n            if (!n || \"string\" != typeof n)\n                return null;\n            try {\n                e.DOMParser ? (i = new DOMParser, r = i.parseFromString(n, \"text/xml\")) : (r = new ActiveXObject(\"Microsoft.XMLDOM\"), r.async = \"false\", r.loadXML(n))\n            } catch (o) {\n                r = t\n            }\n            return r && r.documentElement && !r.getElementsByTagName(\"parsererror\").length || x.error(\"Invalid XML: \" + n), r\n        }, noop: function () {\n        }, globalEval: function (t) {\n            t && x.trim(t) && (e.execScript || function (t) {\n                e.eval.call(e, t)\n            })(t)\n        }, camelCase: function (e) {\n            return e.replace(D, \"ms-\").replace(L, H)\n        }, nodeName: function (e, t) {\n            return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()\n        }, each: function (e, t, n) {\n            var r, i = 0, o = e.length, a = M(e);\n            if (n) {\n                if (a) {\n                    for (; o > i; i++)\n                        if (r = t.apply(e[i], n), r === !1)\n                            break\n                } else\n                    for (i in e)\n                        if (r = t.apply(e[i], n), r === !1)\n                            break\n            } else if (a) {\n                for (; o > i; i++)\n                    if (r = t.call(e[i], i, e[i]), r === !1)\n                        break\n            } else\n                for (i in e)\n                    if (r = t.call(e[i], i, e[i]), r === !1)\n                        break;\n            return e\n        }, trim: b && !b.call(\"\\ufeff\\u00a0\") ? function (e) {\n            return null == e ? \"\" : b.call(e)\n        } : function (e) {\n            return null == e ? \"\" : (e + \"\").replace(C, \"\")\n        }, makeArray: function (e, t) {\n            var n = t || [];\n            return null != e && (M(Object(e)) ? x.merge(n, \"string\" == typeof e ? [e] : e) : h.call(n, e)), n\n        }, inArray: function (e, t, n) {\n            var r;\n            if (t) {\n                if (m)\n                    return m.call(t, e, n);\n                for (r = t.length, n = n?0 > n?Math.max(0, r + n):n:0; r > n; n++)\n                    if (n in t && t[n] === e)\n                        return n\n            }\n            return-1\n        }, merge: function (e, n) {\n            var r = n.length, i = e.length, o = 0;\n            if (\"number\" == typeof r)\n                for (; r > o; o++)\n                    e[i++] = n[o];\n            else\n                while (n[o] !== t)\n                    e[i++] = n[o++];\n            return e.length = i, e\n        }, grep: function (e, t, n) {\n            var r, i = [], o = 0, a = e.length;\n            for (n = !!n; a > o; o++)\n                r = !!t(e[o], o), n !== r && i.push(e[o]);\n            return i\n        }, map: function (e, t, n) {\n            var r, i = 0, o = e.length, a = M(e), s = [];\n            if (a)\n                for (; o > i; i++)\n                    r = t(e[i], i, n), null != r && (s[s.length] = r);\n            else\n                for (i in e)\n                    r = t(e[i], i, n), null != r && (s[s.length] = r);\n            return d.apply([], s)\n        }, guid: 1, proxy: function (e, n) {\n            var r, i, o;\n            return\"string\" == typeof n && (o = e[n], n = e, e = o), x.isFunction(e) ? (r = g.call(arguments, 2), i = function () {\n                return e.apply(n || this, r.concat(g.call(arguments)))\n            }, i.guid = e.guid = e.guid || x.guid++, i) : t\n        }, access: function (e, n, r, i, o, a, s) {\n            var l = 0, u = e.length, c = null == r;\n            if (\"object\" === x.type(r)) {\n                o = !0;\n                for (l in r)\n                    x.access(e, n, l, r[l], !0, a, s)\n            } else if (i !== t && (o = !0, x.isFunction(i) || (s = !0), c && (s ? (n.call(e, i), n = null) : (c = n, n = function (e, t, n) {\n                return c.call(x(e), n)\n            })), n))\n                for (; u > l; l++)\n                    n(e[l], r, s ? i : i.call(e[l], l, n(e[l], r)));\n            return o ? e : c ? n.call(e) : u ? n(e[0], r) : a\n        }, now: function () {\n            return(new Date).getTime()\n        }, swap: function (e, t, n, r) {\n            var i, o, a = {};\n            for (o in t)\n                a[o] = e.style[o], e.style[o] = t[o];\n            i = n.apply(e, r || []);\n            for (o in t)\n                e.style[o] = a[o];\n            return i\n        }}), x.ready.promise = function (t) {\n        if (!n)\n            if (n = x.Deferred(), \"complete\" === a.readyState)\n                setTimeout(x.ready);\n            else if (a.addEventListener)\n                a.addEventListener(\"DOMContentLoaded\", q, !1), e.addEventListener(\"load\", q, !1);\n            else {\n                a.attachEvent(\"onreadystatechange\", q), e.attachEvent(\"onload\", q);\n                var r = !1;\n                try {\n                    r = null == e.frameElement && a.documentElement\n                } catch (i) {\n                }\n                r && r.doScroll && function o() {\n                    if (!x.isReady) {\n                        try {\n                            r.doScroll(\"left\")\n                        } catch (e) {\n                            return setTimeout(o, 50)\n                        }\n                        _(), x.ready()\n                    }\n                }()\n            }\n        return n.promise(t)\n    }, x.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (e, t) {\n        c[\"[object \" + t + \"]\"] = t.toLowerCase()\n    });\n    function M(e) {\n        var t = e.length, n = x.type(e);\n        return x.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : \"array\" === n || \"function\" !== n && (0 === t || \"number\" == typeof t && t > 0 && t - 1 in e)\n    }\n    r = x(a), function (e, t) {\n        var n, r, i, o, a, s, l, u, c, p, f, d, h, g, m, y, v, b = \"sizzle\" + -new Date, w = e.document, T = 0, C = 0, N = st(), k = st(), E = st(), S = !1, A = function (e, t) {\n            return e === t ? (S = !0, 0) : 0\n        }, j = typeof t, D = 1 << 31, L = {}.hasOwnProperty, H = [], q = H.pop, _ = H.push, M = H.push, O = H.slice, F = H.indexOf || function (e) {\n            var t = 0, n = this.length;\n            for (; n > t; t++)\n                if (this[t] === e)\n                    return t;\n            return-1\n        }, B = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\", P = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\", R = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\", W = R.replace(\"w\", \"w#\"), $ = \"\\\\[\" + P + \"*(\" + R + \")\" + P + \"*(?:([*^$|!~]?=)\" + P + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + W + \")|)|)\" + P + \"*\\\\]\", I = \":(\" + R + \")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + $.replace(3, 8) + \")*)|.*)\\\\)|)\", z = RegExp(\"^\" + P + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + P + \"+$\", \"g\"), X = RegExp(\"^\" + P + \"*,\" + P + \"*\"), U = RegExp(\"^\" + P + \"*([>+~]|\" + P + \")\" + P + \"*\"), V = RegExp(P + \"*[+~]\"), Y = RegExp(\"=\" + P + \"*([^\\\\]'\\\"]*)\" + P + \"*\\\\]\", \"g\"), J = RegExp(I), G = RegExp(\"^\" + W + \"$\"), Q = {ID: RegExp(\"^#(\" + R + \")\"), CLASS: RegExp(\"^\\\\.(\" + R + \")\"), TAG: RegExp(\"^(\" + R.replace(\"w\", \"w*\") + \")\"), ATTR: RegExp(\"^\" + $), PSEUDO: RegExp(\"^\" + I), CHILD: RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + P + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + P + \"*(?:([+-]|)\" + P + \"*(\\\\d+)|))\" + P + \"*\\\\)|)\", \"i\"), bool: RegExp(\"^(?:\" + B + \")$\", \"i\"), needsContext: RegExp(\"^\" + P + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + P + \"*((?:-\\\\d)?\\\\d*)\" + P + \"*\\\\)|)(?=[^-]|$)\", \"i\")}, K = /^[^{]+\\{\\s*\\[native \\w/, Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/, et = /^(?:input|select|textarea|button)$/i, tt = /^h\\d$/i, nt = /'|\\\\/g, rt = RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + P + \"?|(\" + P + \")|.)\", \"ig\"), it = function (e, t, n) {\n            var r = \"0x\" + t - 65536;\n            return r !== r || n ? t : 0 > r ? String.fromCharCode(r + 65536) : String.fromCharCode(55296 | r >> 10, 56320 | 1023 & r)\n        };\n        try {\n            M.apply(H = O.call(w.childNodes), w.childNodes), H[w.childNodes.length].nodeType\n        } catch (ot) {\n            M = {apply: H.length ? function (e, t) {\n                    _.apply(e, O.call(t))\n                } : function (e, t) {\n                    var n = e.length, r = 0;\n                    while (e[n++] = t[r++])\n                        ;\n                    e.length = n - 1\n                }}\n        }\n        function at(e, t, n, i) {\n            var o, a, s, l, u, c, d, m, y, x;\n            if ((t ? t.ownerDocument || t : w) !== f && p(t), t = t || f, n = n || [], !e || \"string\" != typeof e)\n                return n;\n            if (1 !== (l = t.nodeType) && 9 !== l)\n                return[];\n            if (h && !i) {\n                if (o = Z.exec(e))\n                    if (s = o[1]) {\n                        if (9 === l) {\n                            if (a = t.getElementById(s), !a || !a.parentNode)\n                                return n;\n                            if (a.id === s)\n                                return n.push(a), n\n                        } else if (t.ownerDocument && (a = t.ownerDocument.getElementById(s)) && v(t, a) && a.id === s)\n                            return n.push(a), n\n                    } else {\n                        if (o[2])\n                            return M.apply(n, t.getElementsByTagName(e)), n;\n                        if ((s = o[3]) && r.getElementsByClassName && t.getElementsByClassName)\n                            return M.apply(n, t.getElementsByClassName(s)), n\n                    }\n                if (r.qsa && (!g || !g.test(e))) {\n                    if (m = d = b, y = t, x = 9 === l && e, 1 === l && \"object\" !== t.nodeName.toLowerCase()) {\n                        c = mt(e), (d = t.getAttribute(\"id\")) ? m = d.replace(nt, \"\\\\$&\") : t.setAttribute(\"id\", m), m = \"[id='\" + m + \"'] \", u = c.length;\n                        while (u--)\n                            c[u] = m + yt(c[u]);\n                        y = V.test(e) && t.parentNode || t, x = c.join(\",\")\n                    }\n                    if (x)\n                        try {\n                            return M.apply(n, y.querySelectorAll(x)), n\n                        } catch (T) {\n                        } finally {\n                            d || t.removeAttribute(\"id\")\n                        }\n                }\n            }\n            return kt(e.replace(z, \"$1\"), t, n, i)\n        }\n        function st() {\n            var e = [];\n            function t(n, r) {\n                return e.push(n += \" \") > o.cacheLength && delete t[e.shift()], t[n] = r\n            }\n            return t\n        }\n        function lt(e) {\n            return e[b] = !0, e\n        }\n        function ut(e) {\n            var t = f.createElement(\"div\");\n            try {\n                return!!e(t)\n            } catch (n) {\n                return!1\n            } finally {\n                t.parentNode && t.parentNode.removeChild(t), t = null\n            }\n        }\n        function ct(e, t) {\n            var n = e.split(\"|\"), r = e.length;\n            while (r--)\n                o.attrHandle[n[r]] = t\n        }\n        function pt(e, t) {\n            var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || D) - (~e.sourceIndex || D);\n            if (r)\n                return r;\n            if (n)\n                while (n = n.nextSibling)\n                    if (n === t)\n                        return-1;\n            return e ? 1 : -1\n        }\n        function ft(e) {\n            return function (t) {\n                var n = t.nodeName.toLowerCase();\n                return\"input\" === n && t.type === e\n            }\n        }\n        function dt(e) {\n            return function (t) {\n                var n = t.nodeName.toLowerCase();\n                return(\"input\" === n || \"button\" === n) && t.type === e\n            }\n        }\n        function ht(e) {\n            return lt(function (t) {\n                return t = +t, lt(function (n, r) {\n                    var i, o = e([], n.length, t), a = o.length;\n                    while (a--)\n                        n[i = o[a]] && (n[i] = !(r[i] = n[i]))\n                })\n            })\n        }\n        s = at.isXML = function (e) {\n            var t = e && (e.ownerDocument || e).documentElement;\n            return t ? \"HTML\" !== t.nodeName : !1\n        }, r = at.support = {}, p = at.setDocument = function (e) {\n            var n = e ? e.ownerDocument || e : w, i = n.defaultView;\n            return n !== f && 9 === n.nodeType && n.documentElement ? (f = n, d = n.documentElement, h = !s(n), i && i.attachEvent && i !== i.top && i.attachEvent(\"onbeforeunload\", function () {\n                p()\n            }), r.attributes = ut(function (e) {\n                return e.className = \"i\", !e.getAttribute(\"className\")\n            }), r.getElementsByTagName = ut(function (e) {\n                return e.appendChild(n.createComment(\"\")), !e.getElementsByTagName(\"*\").length\n            }), r.getElementsByClassName = ut(function (e) {\n                return e.innerHTML = \"<div class='a'></div><div class='a i'></div>\", e.firstChild.className = \"i\", 2 === e.getElementsByClassName(\"i\").length\n            }), r.getById = ut(function (e) {\n                return d.appendChild(e).id = b, !n.getElementsByName || !n.getElementsByName(b).length\n            }), r.getById ? (o.find.ID = function (e, t) {\n                if (typeof t.getElementById !== j && h) {\n                    var n = t.getElementById(e);\n                    return n && n.parentNode ? [n] : []\n                }\n            }, o.filter.ID = function (e) {\n                var t = e.replace(rt, it);\n                return function (e) {\n                    return e.getAttribute(\"id\") === t\n                }\n            }) : (delete o.find.ID, o.filter.ID = function (e) {\n                var t = e.replace(rt, it);\n                return function (e) {\n                    var n = typeof e.getAttributeNode !== j && e.getAttributeNode(\"id\");\n                    return n && n.value === t\n                }\n            }), o.find.TAG = r.getElementsByTagName ? function (e, n) {\n                return typeof n.getElementsByTagName !== j ? n.getElementsByTagName(e) : t\n            } : function (e, t) {\n                var n, r = [], i = 0, o = t.getElementsByTagName(e);\n                if (\"*\" === e) {\n                    while (n = o[i++])\n                        1 === n.nodeType && r.push(n);\n                    return r\n                }\n                return o\n            }, o.find.CLASS = r.getElementsByClassName && function (e, n) {\n                return typeof n.getElementsByClassName !== j && h ? n.getElementsByClassName(e) : t\n            }, m = [], g = [], (r.qsa = K.test(n.querySelectorAll)) && (ut(function (e) {\n                e.innerHTML = \"<select><option selected=''></option></select>\", e.querySelectorAll(\"[selected]\").length || g.push(\"\\\\[\" + P + \"*(?:value|\" + B + \")\"), e.querySelectorAll(\":checked\").length || g.push(\":checked\")\n            }), ut(function (e) {\n                var t = n.createElement(\"input\");\n                t.setAttribute(\"type\", \"hidden\"), e.appendChild(t).setAttribute(\"t\", \"\"), e.querySelectorAll(\"[t^='']\").length && g.push(\"[*^$]=\" + P + \"*(?:''|\\\"\\\")\"), e.querySelectorAll(\":enabled\").length || g.push(\":enabled\", \":disabled\"), e.querySelectorAll(\"*,:x\"), g.push(\",.*:\")\n            })), (r.matchesSelector = K.test(y = d.webkitMatchesSelector || d.mozMatchesSelector || d.oMatchesSelector || d.msMatchesSelector)) && ut(function (e) {\n                r.disconnectedMatch = y.call(e, \"div\"), y.call(e, \"[s!='']:x\"), m.push(\"!=\", I)\n            }), g = g.length && RegExp(g.join(\"|\")), m = m.length && RegExp(m.join(\"|\")), v = K.test(d.contains) || d.compareDocumentPosition ? function (e, t) {\n                var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode;\n                return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)))\n            } : function (e, t) {\n                if (t)\n                    while (t = t.parentNode)\n                        if (t === e)\n                            return!0;\n                return!1\n            }, A = d.compareDocumentPosition ? function (e, t) {\n                if (e === t)\n                    return S = !0, 0;\n                var i = t.compareDocumentPosition && e.compareDocumentPosition && e.compareDocumentPosition(t);\n                return i ? 1 & i || !r.sortDetached && t.compareDocumentPosition(e) === i ? e === n || v(w, e) ? -1 : t === n || v(w, t) ? 1 : c ? F.call(c, e) - F.call(c, t) : 0 : 4 & i ? -1 : 1 : e.compareDocumentPosition ? -1 : 1\n            } : function (e, t) {\n                var r, i = 0, o = e.parentNode, a = t.parentNode, s = [e], l = [t];\n                if (e === t)\n                    return S = !0, 0;\n                if (!o || !a)\n                    return e === n ? -1 : t === n ? 1 : o ? -1 : a ? 1 : c ? F.call(c, e) - F.call(c, t) : 0;\n                if (o === a)\n                    return pt(e, t);\n                r = e;\n                while (r = r.parentNode)\n                    s.unshift(r);\n                r = t;\n                while (r = r.parentNode)\n                    l.unshift(r);\n                while (s[i] === l[i])\n                    i++;\n                return i ? pt(s[i], l[i]) : s[i] === w ? -1 : l[i] === w ? 1 : 0\n            }, n) : f\n        }, at.matches = function (e, t) {\n            return at(e, null, null, t)\n        }, at.matchesSelector = function (e, t) {\n            if ((e.ownerDocument || e) !== f && p(e), t = t.replace(Y, \"='$1']\"), !(!r.matchesSelector || !h || m && m.test(t) || g && g.test(t)))\n                try {\n                    var n = y.call(e, t);\n                    if (n || r.disconnectedMatch || e.document && 11 !== e.document.nodeType)\n                        return n\n                } catch (i) {\n                }\n            return at(t, f, null, [e]).length > 0\n        }, at.contains = function (e, t) {\n            return(e.ownerDocument || e) !== f && p(e), v(e, t)\n        }, at.attr = function (e, n) {\n            (e.ownerDocument || e) !== f && p(e);\n            var i = o.attrHandle[n.toLowerCase()], a = i && L.call(o.attrHandle, n.toLowerCase()) ? i(e, n, !h) : t;\n            return a === t ? r.attributes || !h ? e.getAttribute(n) : (a = e.getAttributeNode(n)) && a.specified ? a.value : null : a\n        }, at.error = function (e) {\n            throw Error(\"Syntax error, unrecognized expression: \" + e)\n        }, at.uniqueSort = function (e) {\n            var t, n = [], i = 0, o = 0;\n            if (S = !r.detectDuplicates, c = !r.sortStable && e.slice(0), e.sort(A), S) {\n                while (t = e[o++])\n                    t === e[o] && (i = n.push(o));\n                while (i--)\n                    e.splice(n[i], 1)\n            }\n            return e\n        }, a = at.getText = function (e) {\n            var t, n = \"\", r = 0, i = e.nodeType;\n            if (i) {\n                if (1 === i || 9 === i || 11 === i) {\n                    if (\"string\" == typeof e.textContent)\n                        return e.textContent;\n                    for (e = e.firstChild; e; e = e.nextSibling)\n                        n += a(e)\n                } else if (3 === i || 4 === i)\n                    return e.nodeValue\n            } else\n                for (; t = e[r]; r++)\n                    n += a(t);\n            return n\n        }, o = at.selectors = {cacheLength: 50, createPseudo: lt, match: Q, attrHandle: {}, find: {}, relative: {\">\": {dir: \"parentNode\", first: !0}, \" \": {dir: \"parentNode\"}, \"+\": {dir: \"previousSibling\", first: !0}, \"~\": {dir: \"previousSibling\"}}, preFilter: {ATTR: function (e) {\n                    return e[1] = e[1].replace(rt, it), e[3] = (e[4] || e[5] || \"\").replace(rt, it), \"~=\" === e[2] && (e[3] = \" \" + e[3] + \" \"), e.slice(0, 4)\n                }, CHILD: function (e) {\n                    return e[1] = e[1].toLowerCase(), \"nth\" === e[1].slice(0, 3) ? (e[3] || at.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * (\"even\" === e[3] || \"odd\" === e[3])), e[5] = +(e[7] + e[8] || \"odd\" === e[3])) : e[3] && at.error(e[0]), e\n                }, PSEUDO: function (e) {\n                    var n, r = !e[5] && e[2];\n                    return Q.CHILD.test(e[0]) ? null : (e[3] && e[4] !== t ? e[2] = e[4] : r && J.test(r) && (n = mt(r, !0)) && (n = r.indexOf(\")\", r.length - n) - r.length) && (e[0] = e[0].slice(0, n), e[2] = r.slice(0, n)), e.slice(0, 3))\n                }}, filter: {TAG: function (e) {\n                    var t = e.replace(rt, it).toLowerCase();\n                    return\"*\" === e ? function () {\n                        return!0\n                    } : function (e) {\n                        return e.nodeName && e.nodeName.toLowerCase() === t\n                    }\n                }, CLASS: function (e) {\n                    var t = N[e + \" \"];\n                    return t || (t = RegExp(\"(^|\" + P + \")\" + e + \"(\" + P + \"|$)\")) && N(e, function (e) {\n                        return t.test(\"string\" == typeof e.className && e.className || typeof e.getAttribute !== j && e.getAttribute(\"class\") || \"\")\n                    })\n                }, ATTR: function (e, t, n) {\n                    return function (r) {\n                        var i = at.attr(r, e);\n                        return null == i ? \"!=\" === t : t ? (i += \"\", \"=\" === t ? i === n : \"!=\" === t ? i !== n : \"^=\" === t ? n && 0 === i.indexOf(n) : \"*=\" === t ? n && i.indexOf(n) > -1 : \"$=\" === t ? n && i.slice(-n.length) === n : \"~=\" === t ? (\" \" + i + \" \").indexOf(n) > -1 : \"|=\" === t ? i === n || i.slice(0, n.length + 1) === n + \"-\" : !1) : !0\n                    }\n                }, CHILD: function (e, t, n, r, i) {\n                    var o = \"nth\" !== e.slice(0, 3), a = \"last\" !== e.slice(-4), s = \"of-type\" === t;\n                    return 1 === r && 0 === i ? function (e) {\n                        return!!e.parentNode\n                    } : function (t, n, l) {\n                        var u, c, p, f, d, h, g = o !== a ? \"nextSibling\" : \"previousSibling\", m = t.parentNode, y = s && t.nodeName.toLowerCase(), v = !l && !s;\n                        if (m) {\n                            if (o) {\n                                while (g) {\n                                    p = t;\n                                    while (p = p[g])\n                                        if (s ? p.nodeName.toLowerCase() === y : 1 === p.nodeType)\n                                            return!1;\n                                    h = g = \"only\" === e && !h && \"nextSibling\"\n                                }\n                                return!0\n                            }\n                            if (h = [a ? m.firstChild : m.lastChild], a && v) {\n                                c = m[b] || (m[b] = {}), u = c[e] || [], d = u[0] === T && u[1], f = u[0] === T && u[2], p = d && m.childNodes[d];\n                                while (p = ++d && p && p[g] || (f = d = 0) || h.pop())\n                                    if (1 === p.nodeType && ++f && p === t) {\n                                        c[e] = [T, d, f];\n                                        break\n                                    }\n                            } else if (v && (u = (t[b] || (t[b] = {}))[e]) && u[0] === T)\n                                f = u[1];\n                            else\n                                while (p = ++d && p && p[g] || (f = d = 0) || h.pop())\n                                    if ((s ? p.nodeName.toLowerCase() === y : 1 === p.nodeType) && ++f && (v && ((p[b] || (p[b] = {}))[e] = [T, f]), p === t))\n                                        break;\n                            return f -= i, f === r || 0 === f % r && f / r >= 0\n                        }\n                    }\n                }, PSEUDO: function (e, t) {\n                    var n, r = o.pseudos[e] || o.setFilters[e.toLowerCase()] || at.error(\"unsupported pseudo: \" + e);\n                    return r[b] ? r(t) : r.length > 1 ? (n = [e, e, \"\", t], o.setFilters.hasOwnProperty(e.toLowerCase()) ? lt(function (e, n) {\n                        var i, o = r(e, t), a = o.length;\n                        while (a--)\n                            i = F.call(e, o[a]), e[i] = !(n[i] = o[a])\n                    }) : function (e) {\n                        return r(e, 0, n)\n                    }) : r\n                }}, pseudos: {not: lt(function (e) {\n                    var t = [], n = [], r = l(e.replace(z, \"$1\"));\n                    return r[b] ? lt(function (e, t, n, i) {\n                        var o, a = r(e, null, i, []), s = e.length;\n                        while (s--)\n                            (o = a[s]) && (e[s] = !(t[s] = o))\n                    }) : function (e, i, o) {\n                        return t[0] = e, r(t, null, o, n), !n.pop()\n                    }\n                }), has: lt(function (e) {\n                    return function (t) {\n                        return at(e, t).length > 0\n                    }\n                }), contains: lt(function (e) {\n                    return function (t) {\n                        return(t.textContent || t.innerText || a(t)).indexOf(e) > -1\n                    }\n                }), lang: lt(function (e) {\n                    return G.test(e || \"\") || at.error(\"unsupported lang: \" + e), e = e.replace(rt, it).toLowerCase(), function (t) {\n                        var n;\n                        do\n                            if (n = h ? t.lang : t.getAttribute(\"xml:lang\") || t.getAttribute(\"lang\"))\n                                return n = n.toLowerCase(), n === e || 0 === n.indexOf(e + \"-\");\n                        while ((t = t.parentNode) && 1 === t.nodeType);\n                        return!1\n                    }\n                }), target: function (t) {\n                    var n = e.location && e.location.hash;\n                    return n && n.slice(1) === t.id\n                }, root: function (e) {\n                    return e === d\n                }, focus: function (e) {\n                    return e === f.activeElement && (!f.hasFocus || f.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)\n                }, enabled: function (e) {\n                    return e.disabled === !1\n                }, disabled: function (e) {\n                    return e.disabled === !0\n                }, checked: function (e) {\n                    var t = e.nodeName.toLowerCase();\n                    return\"input\" === t && !!e.checked || \"option\" === t && !!e.selected\n                }, selected: function (e) {\n                    return e.parentNode && e.parentNode.selectedIndex, e.selected === !0\n                }, empty: function (e) {\n                    for (e = e.firstChild; e; e = e.nextSibling)\n                        if (e.nodeName > \"@\" || 3 === e.nodeType || 4 === e.nodeType)\n                            return!1;\n                    return!0\n                }, parent: function (e) {\n                    return!o.pseudos.empty(e)\n                }, header: function (e) {\n                    return tt.test(e.nodeName)\n                }, input: function (e) {\n                    return et.test(e.nodeName)\n                }, button: function (e) {\n                    var t = e.nodeName.toLowerCase();\n                    return\"input\" === t && \"button\" === e.type || \"button\" === t\n                }, text: function (e) {\n                    var t;\n                    return\"input\" === e.nodeName.toLowerCase() && \"text\" === e.type && (null == (t = e.getAttribute(\"type\")) || t.toLowerCase() === e.type)\n                }, first: ht(function () {\n                    return[0]\n                }), last: ht(function (e, t) {\n                    return[t - 1]\n                }), eq: ht(function (e, t, n) {\n                    return[0 > n ? n + t : n]\n                }), even: ht(function (e, t) {\n                    var n = 0;\n                    for (; t > n; n += 2)\n                        e.push(n);\n                    return e\n                }), odd: ht(function (e, t) {\n                    var n = 1;\n                    for (; t > n; n += 2)\n                        e.push(n);\n                    return e\n                }), lt: ht(function (e, t, n) {\n                    var r = 0 > n ? n + t : n;\n                    for (; --r >= 0; )\n                        e.push(r);\n                    return e\n                }), gt: ht(function (e, t, n) {\n                    var r = 0 > n ? n + t : n;\n                    for (; t > ++r; )\n                        e.push(r);\n                    return e\n                })}}, o.pseudos.nth = o.pseudos.eq;\n        for (n in{radio:!0, checkbox:!0, file:!0, password:!0, image:!0})\n            o.pseudos[n] = ft(n);\n        for (n in{submit:!0, reset:!0})\n            o.pseudos[n] = dt(n);\n        function gt() {\n        }\n        gt.prototype = o.filters = o.pseudos, o.setFilters = new gt;\n        function mt(e, t) {\n            var n, r, i, a, s, l, u, c = k[e + \" \"];\n            if (c)\n                return t ? 0 : c.slice(0);\n            s = e, l = [], u = o.preFilter;\n            while (s) {\n                (!n || (r = X.exec(s))) && (r && (s = s.slice(r[0].length) || s), l.push(i = [])), n = !1, (r = U.exec(s)) && (n = r.shift(), i.push({value: n, type: r[0].replace(z, \" \")}), s = s.slice(n.length));\n                for (a in o.filter)\n                    !(r = Q[a].exec(s)) || u[a] && !(r = u[a](r)) || (n = r.shift(), i.push({value: n, type: a, matches: r}), s = s.slice(n.length));\n                if (!n)\n                    break\n            }\n            return t ? s.length : s ? at.error(e) : k(e, l).slice(0)\n        }\n        function yt(e) {\n            var t = 0, n = e.length, r = \"\";\n            for (; n > t; t++)\n                r += e[t].value;\n            return r\n        }\n        function vt(e, t, n) {\n            var r = t.dir, o = n && \"parentNode\" === r, a = C++;\n            return t.first ? function (t, n, i) {\n                while (t = t[r])\n                    if (1 === t.nodeType || o)\n                        return e(t, n, i)\n            } : function (t, n, s) {\n                var l, u, c, p = T + \" \" + a;\n                if (s) {\n                    while (t = t[r])\n                        if ((1 === t.nodeType || o) && e(t, n, s))\n                            return!0\n                } else\n                    while (t = t[r])\n                        if (1 === t.nodeType || o)\n                            if (c = t[b] || (t[b] = {}), (u = c[r]) && u[0] === p) {\n                                if ((l = u[1]) === !0 || l === i)\n                                    return l === !0\n                            } else if (u = c[r] = [p], u[1] = e(t, n, s) || i, u[1] === !0)\n                                return!0\n            }\n        }\n        function bt(e) {\n            return e.length > 1 ? function (t, n, r) {\n                var i = e.length;\n                while (i--)\n                    if (!e[i](t, n, r))\n                        return!1;\n                return!0\n            } : e[0]\n        }\n        function xt(e, t, n, r, i) {\n            var o, a = [], s = 0, l = e.length, u = null != t;\n            for (; l > s; s++)\n                (o = e[s]) && (!n || n(o, r, i)) && (a.push(o), u && t.push(s));\n            return a\n        }\n        function wt(e, t, n, r, i, o) {\n            return r && !r[b] && (r = wt(r)), i && !i[b] && (i = wt(i, o)), lt(function (o, a, s, l) {\n                var u, c, p, f = [], d = [], h = a.length, g = o || Nt(t || \"*\", s.nodeType ? [s] : s, []), m = !e || !o && t ? g : xt(g, f, e, s, l), y = n ? i || (o ? e : h || r) ? [] : a : m;\n                if (n && n(m, y, s, l), r) {\n                    u = xt(y, d), r(u, [], s, l), c = u.length;\n                    while (c--)\n                        (p = u[c]) && (y[d[c]] = !(m[d[c]] = p))\n                }\n                if (o) {\n                    if (i || e) {\n                        if (i) {\n                            u = [], c = y.length;\n                            while (c--)\n                                (p = y[c]) && u.push(m[c] = p);\n                            i(null, y = [], u, l)\n                        }\n                        c = y.length;\n                        while (c--)\n                            (p = y[c]) && (u = i ? F.call(o, p) : f[c]) > -1 && (o[u] = !(a[u] = p))\n                    }\n                } else\n                    y = xt(y === a ? y.splice(h, y.length) : y), i ? i(null, a, y, l) : M.apply(a, y)\n            })\n        }\n        function Tt(e) {\n            var t, n, r, i = e.length, a = o.relative[e[0].type], s = a || o.relative[\" \"], l = a ? 1 : 0, c = vt(function (e) {\n                return e === t\n            }, s, !0), p = vt(function (e) {\n                return F.call(t, e) > -1\n            }, s, !0), f = [function (e, n, r) {\n                    return!a && (r || n !== u) || ((t = n).nodeType ? c(e, n, r) : p(e, n, r))\n                }];\n            for (; i > l; l++)\n                if (n = o.relative[e[l].type])\n                    f = [vt(bt(f), n)];\n                else {\n                    if (n = o.filter[e[l].type].apply(null, e[l].matches), n[b]) {\n                        for (r = ++l; i > r; r++)\n                            if (o.relative[e[r].type])\n                                break;\n                        return wt(l > 1 && bt(f), l > 1 && yt(e.slice(0, l - 1).concat({value: \" \" === e[l - 2].type ? \"*\" : \"\"})).replace(z, \"$1\"), n, r > l && Tt(e.slice(l, r)), i > r && Tt(e = e.slice(r)), i > r && yt(e))\n                    }\n                    f.push(n)\n                }\n            return bt(f)\n        }\n        function Ct(e, t) {\n            var n = 0, r = t.length > 0, a = e.length > 0, s = function (s, l, c, p, d) {\n                var h, g, m, y = [], v = 0, b = \"0\", x = s && [], w = null != d, C = u, N = s || a && o.find.TAG(\"*\", d && l.parentNode || l), k = T += null == C ? 1 : Math.random() || .1;\n                for (w && (u = l !== f && l, i = n); null != (h = N[b]); b++) {\n                    if (a && h) {\n                        g = 0;\n                        while (m = e[g++])\n                            if (m(h, l, c)) {\n                                p.push(h);\n                                break\n                            }\n                        w && (T = k, i = ++n)\n                    }\n                    r && ((h = !m && h) && v--, s && x.push(h))\n                }\n                if (v += b, r && b !== v) {\n                    g = 0;\n                    while (m = t[g++])\n                        m(x, y, l, c);\n                    if (s) {\n                        if (v > 0)\n                            while (b--)\n                                x[b] || y[b] || (y[b] = q.call(p));\n                        y = xt(y)\n                    }\n                    M.apply(p, y), w && !s && y.length > 0 && v + t.length > 1 && at.uniqueSort(p)\n                }\n                return w && (T = k, u = C), x\n            };\n            return r ? lt(s) : s\n        }\n        l = at.compile = function (e, t) {\n            var n, r = [], i = [], o = E[e + \" \"];\n            if (!o) {\n                t || (t = mt(e)), n = t.length;\n                while (n--)\n                    o = Tt(t[n]), o[b] ? r.push(o) : i.push(o);\n                o = E(e, Ct(i, r))\n            }\n            return o\n        };\n        function Nt(e, t, n) {\n            var r = 0, i = t.length;\n            for (; i > r; r++)\n                at(e, t[r], n);\n            return n\n        }\n        function kt(e, t, n, i) {\n            var a, s, u, c, p, f = mt(e);\n            if (!i && 1 === f.length) {\n                if (s = f[0] = f[0].slice(0), s.length > 2 && \"ID\" === (u = s[0]).type && r.getById && 9 === t.nodeType && h && o.relative[s[1].type]) {\n                    if (t = (o.find.ID(u.matches[0].replace(rt, it), t) || [])[0], !t)\n                        return n;\n                    e = e.slice(s.shift().value.length)\n                }\n                a = Q.needsContext.test(e) ? 0 : s.length;\n                while (a--) {\n                    if (u = s[a], o.relative[c = u.type])\n                        break;\n                    if ((p = o.find[c]) && (i = p(u.matches[0].replace(rt, it), V.test(s[0].type) && t.parentNode || t))) {\n                        if (s.splice(a, 1), e = i.length && yt(s), !e)\n                            return M.apply(n, i), n;\n                        break\n                    }\n                }\n            }\n            return l(e, f)(i, t, !h, n, V.test(e)), n\n        }\n        r.sortStable = b.split(\"\").sort(A).join(\"\") === b, r.detectDuplicates = S, p(), r.sortDetached = ut(function (e) {\n            return 1 & e.compareDocumentPosition(f.createElement(\"div\"))\n        }), ut(function (e) {\n            return e.innerHTML = \"<a href='#'></a>\", \"#\" === e.firstChild.getAttribute(\"href\")\n        }) || ct(\"type|href|height|width\", function (e, n, r) {\n            return r ? t : e.getAttribute(n, \"type\" === n.toLowerCase() ? 1 : 2)\n        }), r.attributes && ut(function (e) {\n            return e.innerHTML = \"<input/>\", e.firstChild.setAttribute(\"value\", \"\"), \"\" === e.firstChild.getAttribute(\"value\")\n        }) || ct(\"value\", function (e, n, r) {\n            return r || \"input\" !== e.nodeName.toLowerCase() ? t : e.defaultValue\n        }), ut(function (e) {\n            return null == e.getAttribute(\"disabled\")\n        }) || ct(B, function (e, n, r) {\n            var i;\n            return r ? t : (i = e.getAttributeNode(n)) && i.specified ? i.value : e[n] === !0 ? n.toLowerCase() : null\n        }), x.find = at, x.expr = at.selectors, x.expr[\":\"] = x.expr.pseudos, x.unique = at.uniqueSort, x.text = at.getText, x.isXMLDoc = at.isXML, x.contains = at.contains\n    }(e);\n    var O = {};\n    function F(e) {\n        var t = O[e] = {};\n        return x.each(e.match(T) || [], function (e, n) {\n            t[n] = !0\n        }), t\n    }\n    x.Callbacks = function (e) {\n        e = \"string\" == typeof e ? O[e] || F(e) : x.extend({}, e);\n        var n, r, i, o, a, s, l = [], u = !e.once && [], c = function (t) {\n            for (r = e.memory && t, i = !0, a = s || 0, s = 0, o = l.length, n = !0; l && o > a; a++)\n                if (l[a].apply(t[0], t[1]) === !1 && e.stopOnFalse) {\n                    r = !1;\n                    break\n                }\n            n = !1, l && (u ? u.length && c(u.shift()) : r ? l = [] : p.disable())\n        }, p = {add: function () {\n                if (l) {\n                    var t = l.length;\n                    (function i(t) {\n                        x.each(t, function (t, n) {\n                            var r = x.type(n);\n                            \"function\" === r ? e.unique && p.has(n) || l.push(n) : n && n.length && \"string\" !== r && i(n)\n                        })\n                    })(arguments), n ? o = l.length : r && (s = t, c(r))\n                }\n                return this\n            }, remove: function () {\n                return l && x.each(arguments, function (e, t) {\n                    var r;\n                    while ((r = x.inArray(t, l, r)) > - 1)\n                        l.splice(r, 1), n && (o >= r && o--, a >= r && a--)\n                }), this\n            }, has: function (e) {\n                return e ? x.inArray(e, l) > -1 : !(!l || !l.length)\n            }, empty: function () {\n                return l = [], o = 0, this\n            }, disable: function () {\n                return l = u = r = t, this\n            }, disabled: function () {\n                return!l\n            }, lock: function () {\n                return u = t, r || p.disable(), this\n            }, locked: function () {\n                return!u\n            }, fireWith: function (e, t) {\n                return!l || i && !u || (t = t || [], t = [e, t.slice ? t.slice() : t], n ? u.push(t) : c(t)), this\n            }, fire: function () {\n                return p.fireWith(this, arguments), this\n            }, fired: function () {\n                return!!i\n            }};\n        return p\n    }, x.extend({Deferred: function (e) {\n            var t = [[\"resolve\", \"done\", x.Callbacks(\"once memory\"), \"resolved\"], [\"reject\", \"fail\", x.Callbacks(\"once memory\"), \"rejected\"], [\"notify\", \"progress\", x.Callbacks(\"memory\")]], n = \"pending\", r = {state: function () {\n                    return n\n                }, always: function () {\n                    return i.done(arguments).fail(arguments), this\n                }, then: function () {\n                    var e = arguments;\n                    return x.Deferred(function (n) {\n                        x.each(t, function (t, o) {\n                            var a = o[0], s = x.isFunction(e[t]) && e[t];\n                            i[o[1]](function () {\n                                var e = s && s.apply(this, arguments);\n                                e && x.isFunction(e.promise) ? e.promise().done(n.resolve).fail(n.reject).progress(n.notify) : n[a + \"With\"](this === r ? n.promise() : this, s ? [e] : arguments)\n                            })\n                        }), e = null\n                    }).promise()\n                }, promise: function (e) {\n                    return null != e ? x.extend(e, r) : r\n                }}, i = {};\n            return r.pipe = r.then, x.each(t, function (e, o) {\n                var a = o[2], s = o[3];\n                r[o[1]] = a.add, s && a.add(function () {\n                    n = s\n                }, t[1 ^ e][2].disable, t[2][2].lock), i[o[0]] = function () {\n                    return i[o[0] + \"With\"](this === i ? r : this, arguments), this\n                }, i[o[0] + \"With\"] = a.fireWith\n            }), r.promise(i), e && e.call(i, i), i\n        }, when: function (e) {\n            var t = 0, n = g.call(arguments), r = n.length, i = 1 !== r || e && x.isFunction(e.promise) ? r : 0, o = 1 === i ? e : x.Deferred(), a = function (e, t, n) {\n                return function (r) {\n                    t[e] = this, n[e] = arguments.length > 1 ? g.call(arguments) : r, n === s ? o.notifyWith(t, n) : --i || o.resolveWith(t, n)\n                }\n            }, s, l, u;\n            if (r > 1)\n                for (s = Array(r), l = Array(r), u = Array(r); r > t; t++)\n                    n[t] && x.isFunction(n[t].promise) ? n[t].promise().done(a(t, u, n)).fail(o.reject).progress(a(t, l, s)) : --i;\n            return i || o.resolveWith(u, n), o.promise()\n        }}), x.support = function (t) {\n        var n, r, o, s, l, u, c, p, f, d = a.createElement(\"div\");\n        if (d.setAttribute(\"className\", \"t\"), d.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\", n = d.getElementsByTagName(\"*\") || [], r = d.getElementsByTagName(\"a\")[0], !r || !r.style || !n.length)\n            return t;\n        s = a.createElement(\"select\"), u = s.appendChild(a.createElement(\"option\")), o = d.getElementsByTagName(\"input\")[0], r.style.cssText = \"top:1px;float:left;opacity:.5\", t.getSetAttribute = \"t\" !== d.className, t.leadingWhitespace = 3 === d.firstChild.nodeType, t.tbody = !d.getElementsByTagName(\"tbody\").length, t.htmlSerialize = !!d.getElementsByTagName(\"link\").length, t.style = /top/.test(r.getAttribute(\"style\")), t.hrefNormalized = \"/a\" === r.getAttribute(\"href\"), t.opacity = /^0.5/.test(r.style.opacity), t.cssFloat = !!r.style.cssFloat, t.checkOn = !!o.value, t.optSelected = u.selected, t.enctype = !!a.createElement(\"form\").enctype, t.html5Clone = \"<:nav></:nav>\" !== a.createElement(\"nav\").cloneNode(!0).outerHTML, t.inlineBlockNeedsLayout = !1, t.shrinkWrapBlocks = !1, t.pixelPosition = !1, t.deleteExpando = !0, t.noCloneEvent = !0, t.reliableMarginRight = !0, t.boxSizingReliable = !0, o.checked = !0, t.noCloneChecked = o.cloneNode(!0).checked, s.disabled = !0, t.optDisabled = !u.disabled;\n        try {\n            delete d.test\n        } catch (h) {\n            t.deleteExpando = !1\n        }\n        o = a.createElement(\"input\"), o.setAttribute(\"value\", \"\"), t.input = \"\" === o.getAttribute(\"value\"), o.value = \"t\", o.setAttribute(\"type\", \"radio\"), t.radioValue = \"t\" === o.value, o.setAttribute(\"checked\", \"t\"), o.setAttribute(\"name\", \"t\"), l = a.createDocumentFragment(), l.appendChild(o), t.appendChecked = o.checked, t.checkClone = l.cloneNode(!0).cloneNode(!0).lastChild.checked, d.attachEvent && (d.attachEvent(\"onclick\", function () {\n            t.noCloneEvent = !1\n        }), d.cloneNode(!0).click());\n        for (f in{submit:!0, change:!0, focusin:!0})\n            d.setAttribute(c = \"on\" + f, \"t\"), t[f + \"Bubbles\"] = c in e || d.attributes[c].expando === !1;\n        d.style.backgroundClip = \"content-box\", d.cloneNode(!0).style.backgroundClip = \"\", t.clearCloneStyle = \"content-box\" === d.style.backgroundClip;\n        for (f in x(t))\n            break;\n        return t.ownLast = \"0\" !== f, x(function () {\n            var n, r, o, s = \"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\", l = a.getElementsByTagName(\"body\")[0];\n            l && (n = a.createElement(\"div\"), n.style.cssText = \"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\", l.appendChild(n).appendChild(d), d.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\", o = d.getElementsByTagName(\"td\"), o[0].style.cssText = \"padding:0;margin:0;border:0;display:none\", p = 0 === o[0].offsetHeight, o[0].style.display = \"\", o[1].style.display = \"none\", t.reliableHiddenOffsets = p && 0 === o[0].offsetHeight, d.innerHTML = \"\", d.style.cssText = \"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\", x.swap(l, null != l.style.zoom ? {zoom: 1} : {}, function () {\n                t.boxSizing = 4 === d.offsetWidth\n            }), e.getComputedStyle && (t.pixelPosition = \"1%\" !== (e.getComputedStyle(d, null) || {}).top, t.boxSizingReliable = \"4px\" === (e.getComputedStyle(d, null) || {width: \"4px\"}).width, r = d.appendChild(a.createElement(\"div\")), r.style.cssText = d.style.cssText = s, r.style.marginRight = r.style.width = \"0\", d.style.width = \"1px\", t.reliableMarginRight = !parseFloat((e.getComputedStyle(r, null) || {}).marginRight)), typeof d.style.zoom !== i && (d.innerHTML = \"\", d.style.cssText = s + \"width:1px;padding:1px;display:inline;zoom:1\", t.inlineBlockNeedsLayout = 3 === d.offsetWidth, d.style.display = \"block\", d.innerHTML = \"<div></div>\", d.firstChild.style.width = \"5px\", t.shrinkWrapBlocks = 3 !== d.offsetWidth, t.inlineBlockNeedsLayout && (l.style.zoom = 1)), l.removeChild(n), n = d = o = r = null)\n        }), n = s = l = u = r = o = null, t\n    }({});\n    var B = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/, P = /([A-Z])/g;\n    function R(e, n, r, i) {\n        if (x.acceptData(e)) {\n            var o, a, s = x.expando, l = e.nodeType, u = l ? x.cache : e, c = l ? e[s] : e[s] && s;\n            if (c && u[c] && (i || u[c].data) || r !== t || \"string\" != typeof n)\n                return c || (c = l ? e[s] = p.pop() || x.guid++ : s), u[c] || (u[c] = l ? {} : {toJSON: x.noop}), (\"object\" == typeof n || \"function\" == typeof n) && (i ? u[c] = x.extend(u[c], n) : u[c].data = x.extend(u[c].data, n)), a = u[c], i || (a.data || (a.data = {}), a = a.data), r !== t && (a[x.camelCase(n)] = r), \"string\" == typeof n ? (o = a[n], null == o && (o = a[x.camelCase(n)])) : o = a, o\n        }\n    }\n    function W(e, t, n) {\n        if (x.acceptData(e)) {\n            var r, i, o = e.nodeType, a = o ? x.cache : e, s = o ? e[x.expando] : x.expando;\n            if (a[s]) {\n                if (t && (r = n ? a[s] : a[s].data)) {\n                    x.isArray(t) ? t = t.concat(x.map(t, x.camelCase)) : t in r ? t = [t] : (t = x.camelCase(t), t = t in r ? [t] : t.split(\" \")), i = t.length;\n                    while (i--)\n                        delete r[t[i]];\n                    if (n ? !I(r) : !x.isEmptyObject(r))\n                        return\n                }\n                (n || (delete a[s].data, I(a[s]))) && (o ? x.cleanData([e], !0) : x.support.deleteExpando || a != a.window ? delete a[s] : a[s] = null)\n            }\n        }\n    }\n    x.extend({cache: {}, noData: {applet: !0, embed: !0, object: \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"}, hasData: function (e) {\n            return e = e.nodeType ? x.cache[e[x.expando]] : e[x.expando], !!e && !I(e)\n        }, data: function (e, t, n) {\n            return R(e, t, n)\n        }, removeData: function (e, t) {\n            return W(e, t)\n        }, _data: function (e, t, n) {\n            return R(e, t, n, !0)\n        }, _removeData: function (e, t) {\n            return W(e, t, !0)\n        }, acceptData: function (e) {\n            if (e.nodeType && 1 !== e.nodeType && 9 !== e.nodeType)\n                return!1;\n            var t = e.nodeName && x.noData[e.nodeName.toLowerCase()];\n            return!t || t !== !0 && e.getAttribute(\"classid\") === t\n        }}), x.fn.extend({data: function (e, n) {\n            var r, i, o = null, a = 0, s = this[0];\n            if (e === t) {\n                if (this.length && (o = x.data(s), 1 === s.nodeType && !x._data(s, \"parsedAttrs\"))) {\n                    for (r = s.attributes; r.length > a; a++)\n                        i = r[a].name, 0 === i.indexOf(\"data-\") && (i = x.camelCase(i.slice(5)), $(s, i, o[i]));\n                    x._data(s, \"parsedAttrs\", !0)\n                }\n                return o\n            }\n            return\"object\" == typeof e ? this.each(function () {\n                x.data(this, e)\n            }) : arguments.length > 1 ? this.each(function () {\n                x.data(this, e, n)\n            }) : s ? $(s, e, x.data(s, e)) : null\n        }, removeData: function (e) {\n            return this.each(function () {\n                x.removeData(this, e)\n            })\n        }});\n    function $(e, n, r) {\n        if (r === t && 1 === e.nodeType) {\n            var i = \"data-\" + n.replace(P, \"-$1\").toLowerCase();\n            if (r = e.getAttribute(i), \"string\" == typeof r) {\n                try {\n                    r = \"true\" === r ? !0 : \"false\" === r ? !1 : \"null\" === r ? null : +r + \"\" === r ? +r : B.test(r) ? x.parseJSON(r) : r\n                } catch (o) {\n                }\n                x.data(e, n, r)\n            } else\n                r = t\n        }\n        return r\n    }\n    function I(e) {\n        var t;\n        for (t in e)\n            if ((\"data\" !== t || !x.isEmptyObject(e[t])) && \"toJSON\" !== t)\n                return!1;\n        return!0\n    }\n    x.extend({queue: function (e, n, r) {\n            var i;\n            return e ? (n = (n || \"fx\") + \"queue\", i = x._data(e, n), r && (!i || x.isArray(r) ? i = x._data(e, n, x.makeArray(r)) : i.push(r)), i || []) : t\n        }, dequeue: function (e, t) {\n            t = t || \"fx\";\n            var n = x.queue(e, t), r = n.length, i = n.shift(), o = x._queueHooks(e, t), a = function () {\n                x.dequeue(e, t)\n            };\n            \"inprogress\" === i && (i = n.shift(), r--), i && (\"fx\" === t && n.unshift(\"inprogress\"), delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire()\n        }, _queueHooks: function (e, t) {\n            var n = t + \"queueHooks\";\n            return x._data(e, n) || x._data(e, n, {empty: x.Callbacks(\"once memory\").add(function () {\n                    x._removeData(e, t + \"queue\"), x._removeData(e, n)\n                })})\n        }}), x.fn.extend({queue: function (e, n) {\n            var r = 2;\n            return\"string\" != typeof e && (n = e, e = \"fx\", r--), r > arguments.length ? x.queue(this[0], e) : n === t ? this : this.each(function () {\n                var t = x.queue(this, e, n);\n                x._queueHooks(this, e), \"fx\" === e && \"inprogress\" !== t[0] && x.dequeue(this, e)\n            })\n        }, dequeue: function (e) {\n            return this.each(function () {\n                x.dequeue(this, e)\n            })\n        }, delay: function (e, t) {\n            return e = x.fx ? x.fx.speeds[e] || e : e, t = t || \"fx\", this.queue(t, function (t, n) {\n                var r = setTimeout(t, e);\n                n.stop = function () {\n                    clearTimeout(r)\n                }\n            })\n        }, clearQueue: function (e) {\n            return this.queue(e || \"fx\", [])\n        }, promise: function (e, n) {\n            var r, i = 1, o = x.Deferred(), a = this, s = this.length, l = function () {\n                --i || o.resolveWith(a, [a])\n            };\n            \"string\" != typeof e && (n = e, e = t), e = e || \"fx\";\n            while (s--)\n                r = x._data(a[s], e + \"queueHooks\"), r && r.empty && (i++, r.empty.add(l));\n            return l(), o.promise(n)\n        }});\n    var z, X, U = /[\\t\\r\\n\\f]/g, V = /\\r/g, Y = /^(?:input|select|textarea|button|object)$/i, J = /^(?:a|area)$/i, G = /^(?:checked|selected)$/i, Q = x.support.getSetAttribute, K = x.support.input;\n    x.fn.extend({attr: function (e, t) {\n            return x.access(this, x.attr, e, t, arguments.length > 1)\n        }, removeAttr: function (e) {\n            return this.each(function () {\n                x.removeAttr(this, e)\n            })\n        }, prop: function (e, t) {\n            return x.access(this, x.prop, e, t, arguments.length > 1)\n        }, removeProp: function (e) {\n            return e = x.propFix[e] || e, this.each(function () {\n                try {\n                    this[e] = t, delete this[e]\n                } catch (n) {\n                }\n            })\n        }, addClass: function (e) {\n            var t, n, r, i, o, a = 0, s = this.length, l = \"string\" == typeof e && e;\n            if (x.isFunction(e))\n                return this.each(function (t) {\n                    x(this).addClass(e.call(this, t, this.className))\n                });\n            if (l)\n                for (t = (e || \"\").match(T) || []; s > a; a++)\n                    if (n = this[a], r = 1 === n.nodeType && (n.className ? (\" \" + n.className + \" \").replace(U, \" \") : \" \")) {\n                        o = 0;\n                        while (i = t[o++])\n                            0 > r.indexOf(\" \" + i + \" \") && (r += i + \" \");\n                        n.className = x.trim(r)\n                    }\n            return this\n        }, removeClass: function (e) {\n            var t, n, r, i, o, a = 0, s = this.length, l = 0 === arguments.length || \"string\" == typeof e && e;\n            if (x.isFunction(e))\n                return this.each(function (t) {\n                    x(this).removeClass(e.call(this, t, this.className))\n                });\n            if (l)\n                for (t = (e || \"\").match(T) || []; s > a; a++)\n                    if (n = this[a], r = 1 === n.nodeType && (n.className ? (\" \" + n.className + \" \").replace(U, \" \") : \"\")) {\n                        o = 0;\n                        while (i = t[o++])\n                            while (r.indexOf(\" \" + i + \" \") >= 0)\n                                r = r.replace(\" \" + i + \" \", \" \");\n                        n.className = e ? x.trim(r) : \"\"\n                    }\n            return this\n        }, toggleClass: function (e, t) {\n            var n = typeof e;\n            return\"boolean\" == typeof t && \"string\" === n ? t ? this.addClass(e) : this.removeClass(e) : x.isFunction(e) ? this.each(function (n) {\n                x(this).toggleClass(e.call(this, n, this.className, t), t)\n            }) : this.each(function () {\n                if (\"string\" === n) {\n                    var t, r = 0, o = x(this), a = e.match(T) || [];\n                    while (t = a[r++])\n                        o.hasClass(t) ? o.removeClass(t) : o.addClass(t)\n                } else\n                    (n === i || \"boolean\" === n) && (this.className && x._data(this, \"__className__\", this.className), this.className = this.className || e === !1 ? \"\" : x._data(this, \"__className__\") || \"\")\n            })\n        }, hasClass: function (e) {\n            var t = \" \" + e + \" \", n = 0, r = this.length;\n            for (; r > n; n++)\n                if (1 === this[n].nodeType && (\" \" + this[n].className + \" \").replace(U, \" \").indexOf(t) >= 0)\n                    return!0;\n            return!1\n        }, val: function (e) {\n            var n, r, i, o = this[0];\n            {\n                if (arguments.length)\n                    return i = x.isFunction(e), this.each(function (n) {\n                        var o;\n                        1 === this.nodeType && (o = i ? e.call(this, n, x(this).val()) : e, null == o ? o = \"\" : \"number\" == typeof o ? o += \"\" : x.isArray(o) && (o = x.map(o, function (e) {\n                            return null == e ? \"\" : e + \"\"\n                        })), r = x.valHooks[this.type] || x.valHooks[this.nodeName.toLowerCase()], r && \"set\"in r && r.set(this, o, \"value\") !== t || (this.value = o))\n                    });\n                if (o)\n                    return r = x.valHooks[o.type] || x.valHooks[o.nodeName.toLowerCase()], r && \"get\"in r && (n = r.get(o, \"value\")) !== t ? n : (n = o.value, \"string\" == typeof n ? n.replace(V, \"\") : null == n ? \"\" : n)\n            }\n        }}), x.extend({valHooks: {option: {get: function (e) {\n                    var t = x.find.attr(e, \"value\");\n                    return null != t ? t : e.text\n                }}, select: {get: function (e) {\n                    var t, n, r = e.options, i = e.selectedIndex, o = \"select-one\" === e.type || 0 > i, a = o ? null : [], s = o ? i + 1 : r.length, l = 0 > i ? s : o ? i : 0;\n                    for (; s > l; l++)\n                        if (n = r[l], !(!n.selected && l !== i || (x.support.optDisabled ? n.disabled : null !== n.getAttribute(\"disabled\")) || n.parentNode.disabled && x.nodeName(n.parentNode, \"optgroup\"))) {\n                            if (t = x(n).val(), o)\n                                return t;\n                            a.push(t)\n                        }\n                    return a\n                }, set: function (e, t) {\n                    var n, r, i = e.options, o = x.makeArray(t), a = i.length;\n                    while (a--)\n                        r = i[a], (r.selected = x.inArray(x(r).val(), o) >= 0) && (n = !0);\n                    return n || (e.selectedIndex = -1), o\n                }}}, attr: function (e, n, r) {\n            var o, a, s = e.nodeType;\n            if (e && 3 !== s && 8 !== s && 2 !== s)\n                return typeof e.getAttribute === i ? x.prop(e, n, r) : (1 === s && x.isXMLDoc(e) || (n = n.toLowerCase(), o = x.attrHooks[n] || (x.expr.match.bool.test(n) ? X : z)), r === t ? o && \"get\"in o && null !== (a = o.get(e, n)) ? a : (a = x.find.attr(e, n), null == a ? t : a) : null !== r ? o && \"set\"in o && (a = o.set(e, r, n)) !== t ? a : (e.setAttribute(n, r + \"\"), r) : (x.removeAttr(e, n), t))\n        }, removeAttr: function (e, t) {\n            var n, r, i = 0, o = t && t.match(T);\n            if (o && 1 === e.nodeType)\n                while (n = o[i++])\n                    r = x.propFix[n] || n, x.expr.match.bool.test(n) ? K && Q || !G.test(n) ? e[r] = !1 : e[x.camelCase(\"default-\" + n)] = e[r] = !1 : x.attr(e, n, \"\"), e.removeAttribute(Q ? n : r)\n        }, attrHooks: {type: {set: function (e, t) {\n                    if (!x.support.radioValue && \"radio\" === t && x.nodeName(e, \"input\")) {\n                        var n = e.value;\n                        return e.setAttribute(\"type\", t), n && (e.value = n), t\n                    }\n                }}}, propFix: {\"for\": \"htmlFor\", \"class\": \"className\"}, prop: function (e, n, r) {\n            var i, o, a, s = e.nodeType;\n            if (e && 3 !== s && 8 !== s && 2 !== s)\n                return a = 1 !== s || !x.isXMLDoc(e), a && (n = x.propFix[n] || n, o = x.propHooks[n]), r !== t ? o && \"set\"in o && (i = o.set(e, r, n)) !== t ? i : e[n] = r : o && \"get\"in o && null !== (i = o.get(e, n)) ? i : e[n]\n        }, propHooks: {tabIndex: {get: function (e) {\n                    var t = x.find.attr(e, \"tabindex\");\n                    return t ? parseInt(t, 10) : Y.test(e.nodeName) || J.test(e.nodeName) && e.href ? 0 : -1\n                }}}}), X = {set: function (e, t, n) {\n            return t === !1 ? x.removeAttr(e, n) : K && Q || !G.test(n) ? e.setAttribute(!Q && x.propFix[n] || n, n) : e[x.camelCase(\"default-\" + n)] = e[n] = !0, n\n        }}, x.each(x.expr.match.bool.source.match(/\\w+/g), function (e, n) {\n        var r = x.expr.attrHandle[n] || x.find.attr;\n        x.expr.attrHandle[n] = K && Q || !G.test(n) ? function (e, n, i) {\n            var o = x.expr.attrHandle[n], a = i ? t : (x.expr.attrHandle[n] = t) != r(e, n, i) ? n.toLowerCase() : null;\n            return x.expr.attrHandle[n] = o, a\n        } : function (e, n, r) {\n            return r ? t : e[x.camelCase(\"default-\" + n)] ? n.toLowerCase() : null\n        }\n    }), K && Q || (x.attrHooks.value = {set: function (e, n, r) {\n            return x.nodeName(e, \"input\") ? (e.defaultValue = n, t) : z && z.set(e, n, r)\n        }}), Q || (z = {set: function (e, n, r) {\n            var i = e.getAttributeNode(r);\n            return i || e.setAttributeNode(i = e.ownerDocument.createAttribute(r)), i.value = n += \"\", \"value\" === r || n === e.getAttribute(r) ? n : t\n        }}, x.expr.attrHandle.id = x.expr.attrHandle.name = x.expr.attrHandle.coords = function (e, n, r) {\n        var i;\n        return r ? t : (i = e.getAttributeNode(n)) && \"\" !== i.value ? i.value : null\n    }, x.valHooks.button = {get: function (e, n) {\n            var r = e.getAttributeNode(n);\n            return r && r.specified ? r.value : t\n        }, set: z.set}, x.attrHooks.contenteditable = {set: function (e, t, n) {\n            z.set(e, \"\" === t ? !1 : t, n)\n        }}, x.each([\"width\", \"height\"], function (e, n) {\n        x.attrHooks[n] = {set: function (e, r) {\n                return\"\" === r ? (e.setAttribute(n, \"auto\"), r) : t\n            }}\n    })), x.support.hrefNormalized || x.each([\"href\", \"src\"], function (e, t) {\n        x.propHooks[t] = {get: function (e) {\n                return e.getAttribute(t, 4)\n            }}\n    }), x.support.style || (x.attrHooks.style = {get: function (e) {\n            return e.style.cssText || t\n        }, set: function (e, t) {\n            return e.style.cssText = t + \"\"\n        }}), x.support.optSelected || (x.propHooks.selected = {get: function (e) {\n            var t = e.parentNode;\n            return t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex), null\n        }}), x.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n        x.propFix[this.toLowerCase()] = this\n    }), x.support.enctype || (x.propFix.enctype = \"encoding\"), x.each([\"radio\", \"checkbox\"], function () {\n        x.valHooks[this] = {set: function (e, n) {\n                return x.isArray(n) ? e.checked = x.inArray(x(e).val(), n) >= 0 : t\n            }}, x.support.checkOn || (x.valHooks[this].get = function (e) {\n            return null === e.getAttribute(\"value\") ? \"on\" : e.value\n        })\n    });\n    var Z = /^(?:input|select|textarea)$/i, et = /^key/, tt = /^(?:mouse|contextmenu)|click/, nt = /^(?:focusinfocus|focusoutblur)$/, rt = /^([^.]*)(?:\\.(.+)|)$/;\n    function it() {\n        return!0\n    }\n    function ot() {\n        return!1\n    }\n    function at() {\n        try {\n            return a.activeElement\n        } catch (e) {\n        }\n    }\n    x.event = {global: {}, add: function (e, n, r, o, a) {\n            var s, l, u, c, p, f, d, h, g, m, y, v = x._data(e);\n            if (v) {\n                r.handler && (c = r, r = c.handler, a = c.selector), r.guid || (r.guid = x.guid++), (l = v.events) || (l = v.events = {}), (f = v.handle) || (f = v.handle = function (e) {\n                    return typeof x === i || e && x.event.triggered === e.type ? t : x.event.dispatch.apply(f.elem, arguments)\n                }, f.elem = e), n = (n || \"\").match(T) || [\"\"], u = n.length;\n                while (u--)\n                    s = rt.exec(n[u]) || [], g = y = s[1], m = (s[2] || \"\").split(\".\").sort(), g && (p = x.event.special[g] || {}, g = (a ? p.delegateType : p.bindType) || g, p = x.event.special[g] || {}, d = x.extend({type: g, origType: y, data: o, handler: r, guid: r.guid, selector: a, needsContext: a && x.expr.match.needsContext.test(a), namespace: m.join(\".\")}, c), (h = l[g]) || (h = l[g] = [], h.delegateCount = 0, p.setup && p.setup.call(e, o, m, f) !== !1 || (e.addEventListener ? e.addEventListener(g, f, !1) : e.attachEvent && e.attachEvent(\"on\" + g, f))), p.add && (p.add.call(e, d), d.handler.guid || (d.handler.guid = r.guid)), a ? h.splice(h.delegateCount++, 0, d) : h.push(d), x.event.global[g] = !0);\n                e = null\n            }\n        }, remove: function (e, t, n, r, i) {\n            var o, a, s, l, u, c, p, f, d, h, g, m = x.hasData(e) && x._data(e);\n            if (m && (c = m.events)) {\n                t = (t || \"\").match(T) || [\"\"], u = t.length;\n                while (u--)\n                    if (s = rt.exec(t[u]) || [], d = g = s[1], h = (s[2] || \"\").split(\".\").sort(), d) {\n                        p = x.event.special[d] || {}, d = (r ? p.delegateType : p.bindType) || d, f = c[d] || [], s = s[2] && RegExp(\"(^|\\\\.)\" + h.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), l = o = f.length;\n                        while (o--)\n                            a = f[o], !i && g !== a.origType || n && n.guid !== a.guid || s && !s.test(a.namespace) || r && r !== a.selector && (\"**\" !== r || !a.selector) || (f.splice(o, 1), a.selector && f.delegateCount--, p.remove && p.remove.call(e, a));\n                        l && !f.length && (p.teardown && p.teardown.call(e, h, m.handle) !== !1 || x.removeEvent(e, d, m.handle), delete c[d])\n                    } else\n                        for (d in c)\n                            x.event.remove(e, d + t[u], n, r, !0);\n                x.isEmptyObject(c) && (delete m.handle, x._removeData(e, \"events\"))\n            }\n        }, trigger: function (n, r, i, o) {\n            var s, l, u, c, p, f, d, h = [i || a], g = v.call(n, \"type\") ? n.type : n, m = v.call(n, \"namespace\") ? n.namespace.split(\".\") : [];\n            if (u = f = i = i || a, 3 !== i.nodeType && 8 !== i.nodeType && !nt.test(g + x.event.triggered) && (g.indexOf(\".\") >= 0 && (m = g.split(\".\"), g = m.shift(), m.sort()), l = 0 > g.indexOf(\":\") && \"on\" + g, n = n[x.expando] ? n : new x.Event(g, \"object\" == typeof n && n), n.isTrigger = o ? 2 : 3, n.namespace = m.join(\".\"), n.namespace_re = n.namespace ? RegExp(\"(^|\\\\.)\" + m.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, n.result = t, n.target || (n.target = i), r = null == r ? [n] : x.makeArray(r, [n]), p = x.event.special[g] || {}, o || !p.trigger || p.trigger.apply(i, r) !== !1)) {\n                if (!o && !p.noBubble && !x.isWindow(i)) {\n                    for (c = p.delegateType || g, nt.test(c + g) || (u = u.parentNode); u; u = u.parentNode)\n                        h.push(u), f = u;\n                    f === (i.ownerDocument || a) && h.push(f.defaultView || f.parentWindow || e)\n                }\n                d = 0;\n                while ((u = h[d++]) && !n.isPropagationStopped())\n                    n.type = d > 1 ? c : p.bindType || g, s = (x._data(u, \"events\") || {})[n.type] && x._data(u, \"handle\"), s && s.apply(u, r), s = l && u[l], s && x.acceptData(u) && s.apply && s.apply(u, r) === !1 && n.preventDefault();\n                if (n.type = g, !o && !n.isDefaultPrevented() && (!p._default || p._default.apply(h.pop(), r) === !1) && x.acceptData(i) && l && i[g] && !x.isWindow(i)) {\n                    f = i[l], f && (i[l] = null), x.event.triggered = g;\n                    try {\n                        i[g]()\n                    } catch (y) {\n                    }\n                    x.event.triggered = t, f && (i[l] = f)\n                }\n                return n.result\n            }\n        }, dispatch: function (e) {\n            e = x.event.fix(e);\n            var n, r, i, o, a, s = [], l = g.call(arguments), u = (x._data(this, \"events\") || {})[e.type] || [], c = x.event.special[e.type] || {};\n            if (l[0] = e, e.delegateTarget = this, !c.preDispatch || c.preDispatch.call(this, e) !== !1) {\n                s = x.event.handlers.call(this, e, u), n = 0;\n                while ((o = s[n++]) && !e.isPropagationStopped()) {\n                    e.currentTarget = o.elem, a = 0;\n                    while ((i = o.handlers[a++]) && !e.isImmediatePropagationStopped())\n                        (!e.namespace_re || e.namespace_re.test(i.namespace)) && (e.handleObj = i, e.data = i.data, r = ((x.event.special[i.origType] || {}).handle || i.handler).apply(o.elem, l), r !== t && (e.result = r) === !1 && (e.preventDefault(), e.stopPropagation()))\n                }\n                return c.postDispatch && c.postDispatch.call(this, e), e.result\n            }\n        }, handlers: function (e, n) {\n            var r, i, o, a, s = [], l = n.delegateCount, u = e.target;\n            if (l && u.nodeType && (!e.button || \"click\" !== e.type))\n                for (; u != this; u = u.parentNode || this)\n                    if (1 === u.nodeType && (u.disabled !== !0 || \"click\" !== e.type)) {\n                        for (o = [], a = 0; l > a; a++)\n                            i = n[a], r = i.selector + \" \", o[r] === t && (o[r] = i.needsContext ? x(r, this).index(u) >= 0 : x.find(r, this, null, [u]).length), o[r] && o.push(i);\n                        o.length && s.push({elem: u, handlers: o})\n                    }\n            return n.length > l && s.push({elem: this, handlers: n.slice(l)}), s\n        }, fix: function (e) {\n            if (e[x.expando])\n                return e;\n            var t, n, r, i = e.type, o = e, s = this.fixHooks[i];\n            s || (this.fixHooks[i] = s = tt.test(i) ? this.mouseHooks : et.test(i) ? this.keyHooks : {}), r = s.props ? this.props.concat(s.props) : this.props, e = new x.Event(o), t = r.length;\n            while (t--)\n                n = r[t], e[n] = o[n];\n            return e.target || (e.target = o.srcElement || a), 3 === e.target.nodeType && (e.target = e.target.parentNode), e.metaKey = !!e.metaKey, s.filter ? s.filter(e, o) : e\n        }, props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"), fixHooks: {}, keyHooks: {props: \"char charCode key keyCode\".split(\" \"), filter: function (e, t) {\n                return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), e\n            }}, mouseHooks: {props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"), filter: function (e, n) {\n                var r, i, o, s = n.button, l = n.fromElement;\n                return null == e.pageX && null != n.clientX && (i = e.target.ownerDocument || a, o = i.documentElement, r = i.body, e.pageX = n.clientX + (o && o.scrollLeft || r && r.scrollLeft || 0) - (o && o.clientLeft || r && r.clientLeft || 0), e.pageY = n.clientY + (o && o.scrollTop || r && r.scrollTop || 0) - (o && o.clientTop || r && r.clientTop || 0)), !e.relatedTarget && l && (e.relatedTarget = l === e.target ? n.toElement : l), e.which || s === t || (e.which = 1 & s ? 1 : 2 & s ? 3 : 4 & s ? 2 : 0), e\n            }}, special: {load: {noBubble: !0}, focus: {trigger: function () {\n                    if (this !== at() && this.focus)\n                        try {\n                            return this.focus(), !1\n                        } catch (e) {\n                        }\n                }, delegateType: \"focusin\"}, blur: {trigger: function () {\n                    return this === at() && this.blur ? (this.blur(), !1) : t\n                }, delegateType: \"focusout\"}, click: {trigger: function () {\n                    return x.nodeName(this, \"input\") && \"checkbox\" === this.type && this.click ? (this.click(), !1) : t\n                }, _default: function (e) {\n                    return x.nodeName(e.target, \"a\")\n                }}, beforeunload: {postDispatch: function (e) {\n                    e.result !== t && (e.originalEvent.returnValue = e.result)\n                }}}, simulate: function (e, t, n, r) {\n            var i = x.extend(new x.Event, n, {type: e, isSimulated: !0, originalEvent: {}});\n            r ? x.event.trigger(i, null, t) : x.event.dispatch.call(t, i), i.isDefaultPrevented() && n.preventDefault()\n        }}, x.removeEvent = a.removeEventListener ? function (e, t, n) {\n        e.removeEventListener && e.removeEventListener(t, n, !1)\n    } : function (e, t, n) {\n        var r = \"on\" + t;\n        e.detachEvent && (typeof e[r] === i && (e[r] = null), e.detachEvent(r, n))\n    }, x.Event = function (e, n) {\n        return this instanceof x.Event ? (e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || e.returnValue === !1 || e.getPreventDefault && e.getPreventDefault() ? it : ot) : this.type = e, n && x.extend(this, n), this.timeStamp = e && e.timeStamp || x.now(), this[x.expando] = !0, t) : new x.Event(e, n)\n    }, x.Event.prototype = {isDefaultPrevented: ot, isPropagationStopped: ot, isImmediatePropagationStopped: ot, preventDefault: function () {\n            var e = this.originalEvent;\n            this.isDefaultPrevented = it, e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1)\n        }, stopPropagation: function () {\n            var e = this.originalEvent;\n            this.isPropagationStopped = it, e && (e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0)\n        }, stopImmediatePropagation: function () {\n            this.isImmediatePropagationStopped = it, this.stopPropagation()\n        }}, x.each({mouseenter: \"mouseover\", mouseleave: \"mouseout\"}, function (e, t) {\n        x.event.special[e] = {delegateType: t, bindType: t, handle: function (e) {\n                var n, r = this, i = e.relatedTarget, o = e.handleObj;\n                return(!i || i !== r && !x.contains(r, i)) && (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n\n            }}\n    }), x.support.submitBubbles || (x.event.special.submit = {setup: function () {\n            return x.nodeName(this, \"form\") ? !1 : (x.event.add(this, \"click._submit keypress._submit\", function (e) {\n                var n = e.target, r = x.nodeName(n, \"input\") || x.nodeName(n, \"button\") ? n.form : t;\n                r && !x._data(r, \"submitBubbles\") && (x.event.add(r, \"submit._submit\", function (e) {\n                    e._submit_bubble = !0\n                }), x._data(r, \"submitBubbles\", !0))\n            }), t)\n        }, postDispatch: function (e) {\n            e._submit_bubble && (delete e._submit_bubble, this.parentNode && !e.isTrigger && x.event.simulate(\"submit\", this.parentNode, e, !0))\n        }, teardown: function () {\n            return x.nodeName(this, \"form\") ? !1 : (x.event.remove(this, \"._submit\"), t)\n        }}), x.support.changeBubbles || (x.event.special.change = {setup: function () {\n            return Z.test(this.nodeName) ? ((\"checkbox\" === this.type || \"radio\" === this.type) && (x.event.add(this, \"propertychange._change\", function (e) {\n                \"checked\" === e.originalEvent.propertyName && (this._just_changed = !0)\n            }), x.event.add(this, \"click._change\", function (e) {\n                this._just_changed && !e.isTrigger && (this._just_changed = !1), x.event.simulate(\"change\", this, e, !0)\n            })), !1) : (x.event.add(this, \"beforeactivate._change\", function (e) {\n                var t = e.target;\n                Z.test(t.nodeName) && !x._data(t, \"changeBubbles\") && (x.event.add(t, \"change._change\", function (e) {\n                    !this.parentNode || e.isSimulated || e.isTrigger || x.event.simulate(\"change\", this.parentNode, e, !0)\n                }), x._data(t, \"changeBubbles\", !0))\n            }), t)\n        }, handle: function (e) {\n            var n = e.target;\n            return this !== n || e.isSimulated || e.isTrigger || \"radio\" !== n.type && \"checkbox\" !== n.type ? e.handleObj.handler.apply(this, arguments) : t\n        }, teardown: function () {\n            return x.event.remove(this, \"._change\"), !Z.test(this.nodeName)\n        }}), x.support.focusinBubbles || x.each({focus: \"focusin\", blur: \"focusout\"}, function (e, t) {\n        var n = 0, r = function (e) {\n            x.event.simulate(t, e.target, x.event.fix(e), !0)\n        };\n        x.event.special[t] = {setup: function () {\n                0 === n++ && a.addEventListener(e, r, !0)\n            }, teardown: function () {\n                0 === --n && a.removeEventListener(e, r, !0)\n            }}\n    }), x.fn.extend({on: function (e, n, r, i, o) {\n            var a, s;\n            if (\"object\" == typeof e) {\n                \"string\" != typeof n && (r = r || n, n = t);\n                for (a in e)\n                    this.on(a, n, r, e[a], o);\n                return this\n            }\n            if (null == r && null == i ? (i = n, r = n = t) : null == i && (\"string\" == typeof n ? (i = r, r = t) : (i = r, r = n, n = t)), i === !1)\n                i = ot;\n            else if (!i)\n                return this;\n            return 1 === o && (s = i, i = function (e) {\n                return x().off(e), s.apply(this, arguments)\n            }, i.guid = s.guid || (s.guid = x.guid++)), this.each(function () {\n                x.event.add(this, e, i, r, n)\n            })\n        }, one: function (e, t, n, r) {\n            return this.on(e, t, n, r, 1)\n        }, off: function (e, n, r) {\n            var i, o;\n            if (e && e.preventDefault && e.handleObj)\n                return i = e.handleObj, x(e.delegateTarget).off(i.namespace ? i.origType + \".\" + i.namespace : i.origType, i.selector, i.handler), this;\n            if (\"object\" == typeof e) {\n                for (o in e)\n                    this.off(o, n, e[o]);\n                return this\n            }\n            return(n === !1 || \"function\" == typeof n) && (r = n, n = t), r === !1 && (r = ot), this.each(function () {\n                x.event.remove(this, e, r, n)\n            })\n        }, trigger: function (e, t) {\n            return this.each(function () {\n                x.event.trigger(e, t, this)\n            })\n        }, triggerHandler: function (e, n) {\n            var r = this[0];\n            return r ? x.event.trigger(e, n, r, !0) : t\n        }});\n    var st = /^.[^:#\\[\\.,]*$/, lt = /^(?:parents|prev(?:Until|All))/, ut = x.expr.match.needsContext, ct = {children: !0, contents: !0, next: !0, prev: !0};\n    x.fn.extend({find: function (e) {\n            var t, n = [], r = this, i = r.length;\n            if (\"string\" != typeof e)\n                return this.pushStack(x(e).filter(function () {\n                    for (t = 0; i > t; t++)\n                        if (x.contains(r[t], this))\n                            return!0\n                }));\n            for (t = 0; i > t; t++)\n                x.find(e, r[t], n);\n            return n = this.pushStack(i > 1 ? x.unique(n) : n), n.selector = this.selector ? this.selector + \" \" + e : e, n\n        }, has: function (e) {\n            var t, n = x(e, this), r = n.length;\n            return this.filter(function () {\n                for (t = 0; r > t; t++)\n                    if (x.contains(this, n[t]))\n                        return!0\n            })\n        }, not: function (e) {\n            return this.pushStack(ft(this, e || [], !0))\n        }, filter: function (e) {\n            return this.pushStack(ft(this, e || [], !1))\n        }, is: function (e) {\n            return!!ft(this, \"string\" == typeof e && ut.test(e) ? x(e) : e || [], !1).length\n        }, closest: function (e, t) {\n            var n, r = 0, i = this.length, o = [], a = ut.test(e) || \"string\" != typeof e ? x(e, t || this.context) : 0;\n            for (; i > r; r++)\n                for (n = this[r]; n && n !== t; n = n.parentNode)\n                    if (11 > n.nodeType && (a ? a.index(n) > -1 : 1 === n.nodeType && x.find.matchesSelector(n, e))) {\n                        n = o.push(n);\n                        break\n                    }\n            return this.pushStack(o.length > 1 ? x.unique(o) : o)\n        }, index: function (e) {\n            return e ? \"string\" == typeof e ? x.inArray(this[0], x(e)) : x.inArray(e.jquery ? e[0] : e, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1\n        }, add: function (e, t) {\n            var n = \"string\" == typeof e ? x(e, t) : x.makeArray(e && e.nodeType ? [e] : e), r = x.merge(this.get(), n);\n            return this.pushStack(x.unique(r))\n        }, addBack: function (e) {\n            return this.add(null == e ? this.prevObject : this.prevObject.filter(e))\n        }});\n    function pt(e, t) {\n        do\n            e = e[t];\n        while (e && 1 !== e.nodeType);\n        return e\n    }\n    x.each({parent: function (e) {\n            var t = e.parentNode;\n            return t && 11 !== t.nodeType ? t : null\n        }, parents: function (e) {\n            return x.dir(e, \"parentNode\")\n        }, parentsUntil: function (e, t, n) {\n            return x.dir(e, \"parentNode\", n)\n        }, next: function (e) {\n            return pt(e, \"nextSibling\")\n        }, prev: function (e) {\n            return pt(e, \"previousSibling\")\n        }, nextAll: function (e) {\n            return x.dir(e, \"nextSibling\")\n        }, prevAll: function (e) {\n            return x.dir(e, \"previousSibling\")\n        }, nextUntil: function (e, t, n) {\n            return x.dir(e, \"nextSibling\", n)\n        }, prevUntil: function (e, t, n) {\n            return x.dir(e, \"previousSibling\", n)\n        }, siblings: function (e) {\n            return x.sibling((e.parentNode || {}).firstChild, e)\n        }, children: function (e) {\n            return x.sibling(e.firstChild)\n        }, contents: function (e) {\n            return x.nodeName(e, \"iframe\") ? e.contentDocument || e.contentWindow.document : x.merge([], e.childNodes)\n        }}, function (e, t) {\n        x.fn[e] = function (n, r) {\n            var i = x.map(this, t, n);\n            return\"Until\" !== e.slice(-5) && (r = n), r && \"string\" == typeof r && (i = x.filter(r, i)), this.length > 1 && (ct[e] || (i = x.unique(i)), lt.test(e) && (i = i.reverse())), this.pushStack(i)\n        }\n    }), x.extend({filter: function (e, t, n) {\n            var r = t[0];\n            return n && (e = \":not(\" + e + \")\"), 1 === t.length && 1 === r.nodeType ? x.find.matchesSelector(r, e) ? [r] : [] : x.find.matches(e, x.grep(t, function (e) {\n                return 1 === e.nodeType\n            }))\n        }, dir: function (e, n, r) {\n            var i = [], o = e[n];\n            while (o && 9 !== o.nodeType && (r === t || 1 !== o.nodeType || !x(o).is(r)))\n                1 === o.nodeType && i.push(o), o = o[n];\n            return i\n        }, sibling: function (e, t) {\n            var n = [];\n            for (; e; e = e.nextSibling)\n                1 === e.nodeType && e !== t && n.push(e);\n            return n\n        }});\n    function ft(e, t, n) {\n        if (x.isFunction(t))\n            return x.grep(e, function (e, r) {\n                return!!t.call(e, r, e) !== n\n            });\n        if (t.nodeType)\n            return x.grep(e, function (e) {\n                return e === t !== n\n            });\n        if (\"string\" == typeof t) {\n            if (st.test(t))\n                return x.filter(t, e, n);\n            t = x.filter(t, e)\n        }\n        return x.grep(e, function (e) {\n            return x.inArray(e, t) >= 0 !== n\n        })\n    }\n    function dt(e) {\n        var t = ht.split(\"|\"), n = e.createDocumentFragment();\n        if (n.createElement)\n            while (t.length)\n                n.createElement(t.pop());\n        return n\n    }\n    var ht = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\", gt = / jQuery\\d+=\"(?:null|\\d+)\"/g, mt = RegExp(\"<(?:\" + ht + \")[\\\\s/>]\", \"i\"), yt = /^\\s+/, vt = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi, bt = /<([\\w:]+)/, xt = /<tbody/i, wt = /<|&#?\\w+;/, Tt = /<(?:script|style|link)/i, Ct = /^(?:checkbox|radio)$/i, Nt = /checked\\s*(?:[^=]|=\\s*.checked.)/i, kt = /^$|\\/(?:java|ecma)script/i, Et = /^true\\/(.*)/, St = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g, At = {option: [1, \"<select multiple='multiple'>\", \"</select>\"], legend: [1, \"<fieldset>\", \"</fieldset>\"], area: [1, \"<map>\", \"</map>\"], param: [1, \"<object>\", \"</object>\"], thead: [1, \"<table>\", \"</table>\"], tr: [2, \"<table><tbody>\", \"</tbody></table>\"], col: [2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\"], td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"], _default: x.support.htmlSerialize ? [0, \"\", \"\"] : [1, \"X<div>\", \"</div>\"]}, jt = dt(a), Dt = jt.appendChild(a.createElement(\"div\"));\n    At.optgroup = At.option, At.tbody = At.tfoot = At.colgroup = At.caption = At.thead, At.th = At.td, x.fn.extend({text: function (e) {\n            return x.access(this, function (e) {\n                return e === t ? x.text(this) : this.empty().append((this[0] && this[0].ownerDocument || a).createTextNode(e))\n            }, null, e, arguments.length)\n        }, append: function () {\n            return this.domManip(arguments, function (e) {\n                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n                    var t = Lt(this, e);\n                    t.appendChild(e)\n                }\n            })\n        }, prepend: function () {\n            return this.domManip(arguments, function (e) {\n                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n                    var t = Lt(this, e);\n                    t.insertBefore(e, t.firstChild)\n                }\n            })\n        }, before: function () {\n            return this.domManip(arguments, function (e) {\n                this.parentNode && this.parentNode.insertBefore(e, this)\n            })\n        }, after: function () {\n            return this.domManip(arguments, function (e) {\n                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)\n            })\n        }, remove: function (e, t) {\n            var n, r = e ? x.filter(e, this) : this, i = 0;\n            for (; null != (n = r[i]); i++)\n                t || 1 !== n.nodeType || x.cleanData(Ft(n)), n.parentNode && (t && x.contains(n.ownerDocument, n) && _t(Ft(n, \"script\")), n.parentNode.removeChild(n));\n            return this\n        }, empty: function () {\n            var e, t = 0;\n            for (; null != (e = this[t]); t++) {\n                1 === e.nodeType && x.cleanData(Ft(e, !1));\n                while (e.firstChild)\n                    e.removeChild(e.firstChild);\n                e.options && x.nodeName(e, \"select\") && (e.options.length = 0)\n            }\n            return this\n        }, clone: function (e, t) {\n            return e = null == e ? !1 : e, t = null == t ? e : t, this.map(function () {\n                return x.clone(this, e, t)\n            })\n        }, html: function (e) {\n            return x.access(this, function (e) {\n                var n = this[0] || {}, r = 0, i = this.length;\n                if (e === t)\n                    return 1 === n.nodeType ? n.innerHTML.replace(gt, \"\") : t;\n                if (!(\"string\" != typeof e || Tt.test(e) || !x.support.htmlSerialize && mt.test(e) || !x.support.leadingWhitespace && yt.test(e) || At[(bt.exec(e) || [\"\", \"\"])[1].toLowerCase()])) {\n                    e = e.replace(vt, \"<$1></$2>\");\n                    try {\n                        for (; i > r; r++)\n                            n = this[r] || {}, 1 === n.nodeType && (x.cleanData(Ft(n, !1)), n.innerHTML = e);\n                        n = 0\n                    } catch (o) {\n                    }\n                }\n                n && this.empty().append(e)\n            }, null, e, arguments.length)\n        }, replaceWith: function () {\n            var e = x.map(this, function (e) {\n                return[e.nextSibling, e.parentNode]\n            }), t = 0;\n            return this.domManip(arguments, function (n) {\n                var r = e[t++], i = e[t++];\n                i && (r && r.parentNode !== i && (r = this.nextSibling), x(this).remove(), i.insertBefore(n, r))\n            }, !0), t ? this : this.remove()\n        }, detach: function (e) {\n            return this.remove(e, !0)\n        }, domManip: function (e, t, n) {\n            e = d.apply([], e);\n            var r, i, o, a, s, l, u = 0, c = this.length, p = this, f = c - 1, h = e[0], g = x.isFunction(h);\n            if (g || !(1 >= c || \"string\" != typeof h || x.support.checkClone) && Nt.test(h))\n                return this.each(function (r) {\n                    var i = p.eq(r);\n                    g && (e[0] = h.call(this, r, i.html())), i.domManip(e, t, n)\n                });\n            if (c && (l = x.buildFragment(e, this[0].ownerDocument, !1, !n && this), r = l.firstChild, 1 === l.childNodes.length && (l = r), r)) {\n                for (a = x.map(Ft(l, \"script\"), Ht), o = a.length; c > u; u++)\n                    i = l, u !== f && (i = x.clone(i, !0, !0), o && x.merge(a, Ft(i, \"script\"))), t.call(this[u], i, u);\n                if (o)\n                    for (s = a[a.length - 1].ownerDocument, x.map(a, qt), u = 0; o > u; u++)\n                        i = a[u], kt.test(i.type || \"\") && !x._data(i, \"globalEval\") && x.contains(s, i) && (i.src ? x._evalUrl(i.src) : x.globalEval((i.text || i.textContent || i.innerHTML || \"\").replace(St, \"\")));\n                l = r = null\n            }\n            return this\n        }});\n    function Lt(e, t) {\n        return x.nodeName(e, \"table\") && x.nodeName(1 === t.nodeType ? t : t.firstChild, \"tr\") ? e.getElementsByTagName(\"tbody\")[0] || e.appendChild(e.ownerDocument.createElement(\"tbody\")) : e\n    }\n    function Ht(e) {\n        return e.type = (null !== x.find.attr(e, \"type\")) + \"/\" + e.type, e\n    }\n    function qt(e) {\n        var t = Et.exec(e.type);\n        return t ? e.type = t[1] : e.removeAttribute(\"type\"), e\n    }\n    function _t(e, t) {\n        var n, r = 0;\n        for (; null != (n = e[r]); r++)\n            x._data(n, \"globalEval\", !t || x._data(t[r], \"globalEval\"))\n    }\n    function Mt(e, t) {\n        if (1 === t.nodeType && x.hasData(e)) {\n            var n, r, i, o = x._data(e), a = x._data(t, o), s = o.events;\n            if (s) {\n                delete a.handle, a.events = {};\n                for (n in s)\n                    for (r = 0, i = s[n].length; i > r; r++)\n                        x.event.add(t, n, s[n][r])\n            }\n            a.data && (a.data = x.extend({}, a.data))\n        }\n    }\n    function Ot(e, t) {\n        var n, r, i;\n        if (1 === t.nodeType) {\n            if (n = t.nodeName.toLowerCase(), !x.support.noCloneEvent && t[x.expando]) {\n                i = x._data(t);\n                for (r in i.events)\n                    x.removeEvent(t, r, i.handle);\n                t.removeAttribute(x.expando)\n            }\n            \"script\" === n && t.text !== e.text ? (Ht(t).text = e.text, qt(t)) : \"object\" === n ? (t.parentNode && (t.outerHTML = e.outerHTML), x.support.html5Clone && e.innerHTML && !x.trim(t.innerHTML) && (t.innerHTML = e.innerHTML)) : \"input\" === n && Ct.test(e.type) ? (t.defaultChecked = t.checked = e.checked, t.value !== e.value && (t.value = e.value)) : \"option\" === n ? t.defaultSelected = t.selected = e.defaultSelected : (\"input\" === n || \"textarea\" === n) && (t.defaultValue = e.defaultValue)\n        }\n    }\n    x.each({appendTo: \"append\", prependTo: \"prepend\", insertBefore: \"before\", insertAfter: \"after\", replaceAll: \"replaceWith\"}, function (e, t) {\n        x.fn[e] = function (e) {\n            var n, r = 0, i = [], o = x(e), a = o.length - 1;\n            for (; a >= r; r++)\n                n = r === a ? this : this.clone(!0), x(o[r])[t](n), h.apply(i, n.get());\n            return this.pushStack(i)\n        }\n    });\n    function Ft(e, n) {\n        var r, o, a = 0, s = typeof e.getElementsByTagName !== i ? e.getElementsByTagName(n || \"*\") : typeof e.querySelectorAll !== i ? e.querySelectorAll(n || \"*\") : t;\n        if (!s)\n            for (s = [], r = e.childNodes || e; null != (o = r[a]); a++)\n                !n || x.nodeName(o, n) ? s.push(o) : x.merge(s, Ft(o, n));\n        return n === t || n && x.nodeName(e, n) ? x.merge([e], s) : s\n    }\n    function Bt(e) {\n        Ct.test(e.type) && (e.defaultChecked = e.checked)\n    }\n    x.extend({clone: function (e, t, n) {\n            var r, i, o, a, s, l = x.contains(e.ownerDocument, e);\n            if (x.support.html5Clone || x.isXMLDoc(e) || !mt.test(\"<\" + e.nodeName + \">\") ? o = e.cloneNode(!0) : (Dt.innerHTML = e.outerHTML, Dt.removeChild(o = Dt.firstChild)), !(x.support.noCloneEvent && x.support.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || x.isXMLDoc(e)))\n                for (r = Ft(o), s = Ft(e), a = 0; null != (i = s[a]); ++a)\n                    r[a] && Ot(i, r[a]);\n            if (t)\n                if (n)\n                    for (s = s || Ft(e), r = r || Ft(o), a = 0; null != (i = s[a]); a++)\n                        Mt(i, r[a]);\n                else\n                    Mt(e, o);\n            return r = Ft(o, \"script\"), r.length > 0 && _t(r, !l && Ft(e, \"script\")), r = s = i = null, o\n        }, buildFragment: function (e, t, n, r) {\n            var i, o, a, s, l, u, c, p = e.length, f = dt(t), d = [], h = 0;\n            for (; p > h; h++)\n                if (o = e[h], o || 0 === o)\n                    if (\"object\" === x.type(o))\n                        x.merge(d, o.nodeType ? [o] : o);\n                    else if (wt.test(o)) {\n                        s = s || f.appendChild(t.createElement(\"div\")), l = (bt.exec(o) || [\"\", \"\"])[1].toLowerCase(), c = At[l] || At._default, s.innerHTML = c[1] + o.replace(vt, \"<$1></$2>\") + c[2], i = c[0];\n                        while (i--)\n                            s = s.lastChild;\n                        if (!x.support.leadingWhitespace && yt.test(o) && d.push(t.createTextNode(yt.exec(o)[0])), !x.support.tbody) {\n                            o = \"table\" !== l || xt.test(o) ? \"<table>\" !== c[1] || xt.test(o) ? 0 : s : s.firstChild, i = o && o.childNodes.length;\n                            while (i--)\n                                x.nodeName(u = o.childNodes[i], \"tbody\") && !u.childNodes.length && o.removeChild(u)\n                        }\n                        x.merge(d, s.childNodes), s.textContent = \"\";\n                        while (s.firstChild)\n                            s.removeChild(s.firstChild);\n                        s = f.lastChild\n                    } else\n                        d.push(t.createTextNode(o));\n            s && f.removeChild(s), x.support.appendChecked || x.grep(Ft(d, \"input\"), Bt), h = 0;\n            while (o = d[h++])\n                if ((!r || -1 === x.inArray(o, r)) && (a = x.contains(o.ownerDocument, o), s = Ft(f.appendChild(o), \"script\"), a && _t(s), n)) {\n                    i = 0;\n                    while (o = s[i++])\n                        kt.test(o.type || \"\") && n.push(o)\n                }\n            return s = null, f\n        }, cleanData: function (e, t) {\n            var n, r, o, a, s = 0, l = x.expando, u = x.cache, c = x.support.deleteExpando, f = x.event.special;\n            for (; null != (n = e[s]); s++)\n                if ((t || x.acceptData(n)) && (o = n[l], a = o && u[o])) {\n                    if (a.events)\n                        for (r in a.events)\n                            f[r] ? x.event.remove(n, r) : x.removeEvent(n, r, a.handle);\n                    u[o] && (delete u[o], c ? delete n[l] : typeof n.removeAttribute !== i ? n.removeAttribute(l) : n[l] = null, p.push(o))\n                }\n        }, _evalUrl: function (e) {\n            return x.ajax({url: e, type: \"GET\", dataType: \"script\", async: !1, global: !1, \"throws\": !0})\n        }}), x.fn.extend({wrapAll: function (e) {\n            if (x.isFunction(e))\n                return this.each(function (t) {\n                    x(this).wrapAll(e.call(this, t))\n                });\n            if (this[0]) {\n                var t = x(e, this[0].ownerDocument).eq(0).clone(!0);\n                this[0].parentNode && t.insertBefore(this[0]), t.map(function () {\n                    var e = this;\n                    while (e.firstChild && 1 === e.firstChild.nodeType)\n                        e = e.firstChild;\n                    return e\n                }).append(this)\n            }\n            return this\n        }, wrapInner: function (e) {\n            return x.isFunction(e) ? this.each(function (t) {\n                x(this).wrapInner(e.call(this, t))\n            }) : this.each(function () {\n                var t = x(this), n = t.contents();\n                n.length ? n.wrapAll(e) : t.append(e)\n            })\n        }, wrap: function (e) {\n            var t = x.isFunction(e);\n            return this.each(function (n) {\n                x(this).wrapAll(t ? e.call(this, n) : e)\n            })\n        }, unwrap: function () {\n            return this.parent().each(function () {\n                x.nodeName(this, \"body\") || x(this).replaceWith(this.childNodes)\n            }).end()\n        }});\n    var Pt, Rt, Wt, $t = /alpha\\([^)]*\\)/i, It = /opacity\\s*=\\s*([^)]*)/, zt = /^(top|right|bottom|left)$/, Xt = /^(none|table(?!-c[ea]).+)/, Ut = /^margin/, Vt = RegExp(\"^(\" + w + \")(.*)$\", \"i\"), Yt = RegExp(\"^(\" + w + \")(?!px)[a-z%]+$\", \"i\"), Jt = RegExp(\"^([+-])=(\" + w + \")\", \"i\"), Gt = {BODY: \"block\"}, Qt = {position: \"absolute\", visibility: \"hidden\", display: \"block\"}, Kt = {letterSpacing: 0, fontWeight: 400}, Zt = [\"Top\", \"Right\", \"Bottom\", \"Left\"], en = [\"Webkit\", \"O\", \"Moz\", \"ms\"];\n    function tn(e, t) {\n        if (t in e)\n            return t;\n        var n = t.charAt(0).toUpperCase() + t.slice(1), r = t, i = en.length;\n        while (i--)\n            if (t = en[i] + n, t in e)\n                return t;\n        return r\n    }\n    function nn(e, t) {\n        return e = t || e, \"none\" === x.css(e, \"display\") || !x.contains(e.ownerDocument, e)\n    }\n    function rn(e, t) {\n        var n, r, i, o = [], a = 0, s = e.length;\n        for (; s > a; a++)\n            r = e[a], r.style && (o[a] = x._data(r, \"olddisplay\"), n = r.style.display, t ? (o[a] || \"none\" !== n || (r.style.display = \"\"), \"\" === r.style.display && nn(r) && (o[a] = x._data(r, \"olddisplay\", ln(r.nodeName)))) : o[a] || (i = nn(r), (n && \"none\" !== n || !i) && x._data(r, \"olddisplay\", i ? n : x.css(r, \"display\"))));\n        for (a = 0; s > a; a++)\n            r = e[a], r.style && (t && \"none\" !== r.style.display && \"\" !== r.style.display || (r.style.display = t ? o[a] || \"\" : \"none\"));\n        return e\n    }\n    x.fn.extend({css: function (e, n) {\n            return x.access(this, function (e, n, r) {\n                var i, o, a = {}, s = 0;\n                if (x.isArray(n)) {\n                    for (o = Rt(e), i = n.length; i > s; s++)\n                        a[n[s]] = x.css(e, n[s], !1, o);\n                    return a\n                }\n                return r !== t ? x.style(e, n, r) : x.css(e, n)\n            }, e, n, arguments.length > 1)\n        }, show: function () {\n            return rn(this, !0)\n        }, hide: function () {\n            return rn(this)\n        }, toggle: function (e) {\n            return\"boolean\" == typeof e ? e ? this.show() : this.hide() : this.each(function () {\n                nn(this) ? x(this).show() : x(this).hide()\n            })\n        }}), x.extend({cssHooks: {opacity: {get: function (e, t) {\n                    if (t) {\n                        var n = Wt(e, \"opacity\");\n                        return\"\" === n ? \"1\" : n\n                    }\n                }}}, cssNumber: {columnCount: !0, fillOpacity: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0}, cssProps: {\"float\": x.support.cssFloat ? \"cssFloat\" : \"styleFloat\"}, style: function (e, n, r, i) {\n            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {\n                var o, a, s, l = x.camelCase(n), u = e.style;\n                if (n = x.cssProps[l] || (x.cssProps[l] = tn(u, l)), s = x.cssHooks[n] || x.cssHooks[l], r === t)\n                    return s && \"get\"in s && (o = s.get(e, !1, i)) !== t ? o : u[n];\n                if (a = typeof r, \"string\" === a && (o = Jt.exec(r)) && (r = (o[1] + 1) * o[2] + parseFloat(x.css(e, n)), a = \"number\"), !(null == r || \"number\" === a && isNaN(r) || (\"number\" !== a || x.cssNumber[l] || (r += \"px\"), x.support.clearCloneStyle || \"\" !== r || 0 !== n.indexOf(\"background\") || (u[n] = \"inherit\"), s && \"set\"in s && (r = s.set(e, r, i)) === t)))\n                    try {\n                        u[n] = r\n                    } catch (c) {\n                    }\n            }\n        }, css: function (e, n, r, i) {\n            var o, a, s, l = x.camelCase(n);\n            return n = x.cssProps[l] || (x.cssProps[l] = tn(e.style, l)), s = x.cssHooks[n] || x.cssHooks[l], s && \"get\"in s && (a = s.get(e, !0, r)), a === t && (a = Wt(e, n, i)), \"normal\" === a && n in Kt && (a = Kt[n]), \"\" === r || r ? (o = parseFloat(a), r === !0 || x.isNumeric(o) ? o || 0 : a) : a\n        }}), e.getComputedStyle ? (Rt = function (t) {\n        return e.getComputedStyle(t, null)\n    }, Wt = function (e, n, r) {\n        var i, o, a, s = r || Rt(e), l = s ? s.getPropertyValue(n) || s[n] : t, u = e.style;\n        return s && (\"\" !== l || x.contains(e.ownerDocument, e) || (l = x.style(e, n)), Yt.test(l) && Ut.test(n) && (i = u.width, o = u.minWidth, a = u.maxWidth, u.minWidth = u.maxWidth = u.width = l, l = s.width, u.width = i, u.minWidth = o, u.maxWidth = a)), l\n    }) : a.documentElement.currentStyle && (Rt = function (e) {\n        return e.currentStyle\n    }, Wt = function (e, n, r) {\n        var i, o, a, s = r || Rt(e), l = s ? s[n] : t, u = e.style;\n        return null == l && u && u[n] && (l = u[n]), Yt.test(l) && !zt.test(n) && (i = u.left, o = e.runtimeStyle, a = o && o.left, a && (o.left = e.currentStyle.left), u.left = \"fontSize\" === n ? \"1em\" : l, l = u.pixelLeft + \"px\", u.left = i, a && (o.left = a)), \"\" === l ? \"auto\" : l\n    });\n    function on(e, t, n) {\n        var r = Vt.exec(t);\n        return r ? Math.max(0, r[1] - (n || 0)) + (r[2] || \"px\") : t\n    }\n    function an(e, t, n, r, i) {\n        var o = n === (r ? \"border\" : \"content\") ? 4 : \"width\" === t ? 1 : 0, a = 0;\n        for (; 4 > o; o += 2)\n            \"margin\" === n && (a += x.css(e, n + Zt[o], !0, i)), r ? (\"content\" === n && (a -= x.css(e, \"padding\" + Zt[o], !0, i)), \"margin\" !== n && (a -= x.css(e, \"border\" + Zt[o] + \"Width\", !0, i))) : (a += x.css(e, \"padding\" + Zt[o], !0, i), \"padding\" !== n && (a += x.css(e, \"border\" + Zt[o] + \"Width\", !0, i)));\n        return a\n    }\n    function sn(e, t, n) {\n        var r = !0, i = \"width\" === t ? e.offsetWidth : e.offsetHeight, o = Rt(e), a = x.support.boxSizing && \"border-box\" === x.css(e, \"boxSizing\", !1, o);\n        if (0 >= i || null == i) {\n            if (i = Wt(e, t, o), (0 > i || null == i) && (i = e.style[t]), Yt.test(i))\n                return i;\n            r = a && (x.support.boxSizingReliable || i === e.style[t]), i = parseFloat(i) || 0\n        }\n        return i + an(e, t, n || (a ? \"border\" : \"content\"), r, o) + \"px\"\n    }\n    function ln(e) {\n        var t = a, n = Gt[e];\n        return n || (n = un(e, t), \"none\" !== n && n || (Pt = (Pt || x(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\", \"display:block !important\")).appendTo(t.documentElement), t = (Pt[0].contentWindow || Pt[0].contentDocument).document, t.write(\"<!doctype html><html><body>\"), t.close(), n = un(e, t), Pt.detach()), Gt[e] = n), n\n    }\n    function un(e, t) {\n        var n = x(t.createElement(e)).appendTo(t.body), r = x.css(n[0], \"display\");\n        return n.remove(), r\n    }\n    x.each([\"height\", \"width\"], function (e, n) {\n        x.cssHooks[n] = {get: function (e, r, i) {\n                return r ? 0 === e.offsetWidth && Xt.test(x.css(e, \"display\")) ? x.swap(e, Qt, function () {\n                    return sn(e, n, i)\n                }) : sn(e, n, i) : t\n            }, set: function (e, t, r) {\n                var i = r && Rt(e);\n                return on(e, t, r ? an(e, n, r, x.support.boxSizing && \"border-box\" === x.css(e, \"boxSizing\", !1, i), i) : 0)\n            }}\n    }), x.support.opacity || (x.cssHooks.opacity = {get: function (e, t) {\n            return It.test((t && e.currentStyle ? e.currentStyle.filter : e.style.filter) || \"\") ? .01 * parseFloat(RegExp.$1) + \"\" : t ? \"1\" : \"\"\n        }, set: function (e, t) {\n            var n = e.style, r = e.currentStyle, i = x.isNumeric(t) ? \"alpha(opacity=\" + 100 * t + \")\" : \"\", o = r && r.filter || n.filter || \"\";\n            n.zoom = 1, (t >= 1 || \"\" === t) && \"\" === x.trim(o.replace($t, \"\")) && n.removeAttribute && (n.removeAttribute(\"filter\"), \"\" === t || r && !r.filter) || (n.filter = $t.test(o) ? o.replace($t, i) : o + \" \" + i)\n        }}), x(function () {\n        x.support.reliableMarginRight || (x.cssHooks.marginRight = {get: function (e, n) {\n                return n ? x.swap(e, {display: \"inline-block\"}, Wt, [e, \"marginRight\"]) : t\n            }}), !x.support.pixelPosition && x.fn.position && x.each([\"top\", \"left\"], function (e, n) {\n            x.cssHooks[n] = {get: function (e, r) {\n                    return r ? (r = Wt(e, n), Yt.test(r) ? x(e).position()[n] + \"px\" : r) : t\n                }}\n        })\n    }), x.expr && x.expr.filters && (x.expr.filters.hidden = function (e) {\n        return 0 >= e.offsetWidth && 0 >= e.offsetHeight || !x.support.reliableHiddenOffsets && \"none\" === (e.style && e.style.display || x.css(e, \"display\"))\n    }, x.expr.filters.visible = function (e) {\n        return!x.expr.filters.hidden(e)\n    }), x.each({margin: \"\", padding: \"\", border: \"Width\"}, function (e, t) {\n        x.cssHooks[e + t] = {expand: function (n) {\n                var r = 0, i = {}, o = \"string\" == typeof n ? n.split(\" \") : [n];\n                for (; 4 > r; r++)\n                    i[e + Zt[r] + t] = o[r] || o[r - 2] || o[0];\n                return i\n            }}, Ut.test(e) || (x.cssHooks[e + t].set = on)\n    });\n    var cn = /%20/g, pn = /\\[\\]$/, fn = /\\r?\\n/g, dn = /^(?:submit|button|image|reset|file)$/i, hn = /^(?:input|select|textarea|keygen)/i;\n    x.fn.extend({serialize: function () {\n            return x.param(this.serializeArray())\n        }, serializeArray: function () {\n            return this.map(function () {\n                var e = x.prop(this, \"elements\");\n                return e ? x.makeArray(e) : this\n            }).filter(function () {\n                var e = this.type;\n                return this.name && !x(this).is(\":disabled\") && hn.test(this.nodeName) && !dn.test(e) && (this.checked || !Ct.test(e))\n            }).map(function (e, t) {\n                var n = x(this).val();\n                return null == n ? null : x.isArray(n) ? x.map(n, function (e) {\n                    return{name: t.name, value: e.replace(fn, \"\\r\\n\")}\n                }) : {name: t.name, value: n.replace(fn, \"\\r\\n\")}\n            }).get()\n        }}), x.param = function (e, n) {\n        var r, i = [], o = function (e, t) {\n            t = x.isFunction(t) ? t() : null == t ? \"\" : t, i[i.length] = encodeURIComponent(e) + \"=\" + encodeURIComponent(t)\n        };\n        if (n === t && (n = x.ajaxSettings && x.ajaxSettings.traditional), x.isArray(e) || e.jquery && !x.isPlainObject(e))\n            x.each(e, function () {\n                o(this.name, this.value)\n            });\n        else\n            for (r in e)\n                gn(r, e[r], n, o);\n        return i.join(\"&\").replace(cn, \"+\")\n    };\n    function gn(e, t, n, r) {\n        var i;\n        if (x.isArray(t))\n            x.each(t, function (t, i) {\n                n || pn.test(e) ? r(e, i) : gn(e + \"[\" + (\"object\" == typeof i ? t : \"\") + \"]\", i, n, r)\n            });\n        else if (n || \"object\" !== x.type(t))\n            r(e, t);\n        else\n            for (i in t)\n                gn(e + \"[\" + i + \"]\", t[i], n, r)\n    }\n    x.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"), function (e, t) {\n        x.fn[t] = function (e, n) {\n            return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t)\n        }\n    }), x.fn.extend({hover: function (e, t) {\n            return this.mouseenter(e).mouseleave(t || e)\n        }, bind: function (e, t, n) {\n            return this.on(e, null, t, n)\n        }, unbind: function (e, t) {\n            return this.off(e, null, t)\n        }, delegate: function (e, t, n, r) {\n            return this.on(t, e, n, r)\n        }, undelegate: function (e, t, n) {\n            return 1 === arguments.length ? this.off(e, \"**\") : this.off(t, e || \"**\", n)\n        }});\n    var mn, yn, vn = x.now(), bn = /\\?/, xn = /#.*$/, wn = /([?&])_=[^&]*/, Tn = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm, Cn = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Nn = /^(?:GET|HEAD)$/, kn = /^\\/\\//, En = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/, Sn = x.fn.load, An = {}, jn = {}, Dn = \"*/\".concat(\"*\");\n    try {\n        yn = o.href\n    } catch (Ln) {\n        yn = a.createElement(\"a\"), yn.href = \"\", yn = yn.href\n    }\n    mn = En.exec(yn.toLowerCase()) || [];\n    function Hn(e) {\n        return function (t, n) {\n            \"string\" != typeof t && (n = t, t = \"*\");\n            var r, i = 0, o = t.toLowerCase().match(T) || [];\n            if (x.isFunction(n))\n                while (r = o[i++])\n                    \"+\" === r[0] ? (r = r.slice(1) || \"*\", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n)\n        }\n    }\n    function qn(e, n, r, i) {\n        var o = {}, a = e === jn;\n        function s(l) {\n            var u;\n            return o[l] = !0, x.each(e[l] || [], function (e, l) {\n                var c = l(n, r, i);\n                return\"string\" != typeof c || a || o[c] ? a ? !(u = c) : t : (n.dataTypes.unshift(c), s(c), !1)\n            }), u\n        }\n        return s(n.dataTypes[0]) || !o[\"*\"] && s(\"*\")\n    }\n    function _n(e, n) {\n        var r, i, o = x.ajaxSettings.flatOptions || {};\n        for (i in n)\n            n[i] !== t && ((o[i] ? e : r || (r = {}))[i] = n[i]);\n        return r && x.extend(!0, e, r), e\n    }\n    x.fn.load = function (e, n, r) {\n        if (\"string\" != typeof e && Sn)\n            return Sn.apply(this, arguments);\n        var i, o, a, s = this, l = e.indexOf(\" \");\n        return l >= 0 && (i = e.slice(l, e.length), e = e.slice(0, l)), x.isFunction(n) ? (r = n, n = t) : n && \"object\" == typeof n && (a = \"POST\"), s.length > 0 && x.ajax({url: e, type: a, dataType: \"html\", data: n}).done(function (e) {\n            o = arguments, s.html(i ? x(\"<div>\").append(x.parseHTML(e)).find(i) : e)\n        }).complete(r && function (e, t) {\n            s.each(r, o || [e.responseText, t, e])\n        }), this\n    }, x.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (e, t) {\n        x.fn[t] = function (e) {\n            return this.on(t, e)\n        }\n    }), x.extend({active: 0, lastModified: {}, etag: {}, ajaxSettings: {url: yn, type: \"GET\", isLocal: Cn.test(mn[1]), global: !0, processData: !0, async: !0, contentType: \"application/x-www-form-urlencoded; charset=UTF-8\", accepts: {\"*\": Dn, text: \"text/plain\", html: \"text/html\", xml: \"application/xml, text/xml\", json: \"application/json, text/javascript\"}, contents: {xml: /xml/, html: /html/, json: /json/}, responseFields: {xml: \"responseXML\", text: \"responseText\", json: \"responseJSON\"}, converters: {\"* text\": String, \"text html\": !0, \"text json\": x.parseJSON, \"text xml\": x.parseXML}, flatOptions: {url: !0, context: !0}}, ajaxSetup: function (e, t) {\n            return t ? _n(_n(e, x.ajaxSettings), t) : _n(x.ajaxSettings, e)\n        }, ajaxPrefilter: Hn(An), ajaxTransport: Hn(jn), ajax: function (e, n) {\n            \"object\" == typeof e && (n = e, e = t), n = n || {};\n            var r, i, o, a, s, l, u, c, p = x.ajaxSetup({}, n), f = p.context || p, d = p.context && (f.nodeType || f.jquery) ? x(f) : x.event, h = x.Deferred(), g = x.Callbacks(\"once memory\"), m = p.statusCode || {}, y = {}, v = {}, b = 0, w = \"canceled\", C = {readyState: 0, getResponseHeader: function (e) {\n                    var t;\n                    if (2 === b) {\n                        if (!c) {\n                            c = {};\n                            while (t = Tn.exec(a))\n                                c[t[1].toLowerCase()] = t[2]\n                        }\n                        t = c[e.toLowerCase()]\n                    }\n                    return null == t ? null : t\n                }, getAllResponseHeaders: function () {\n                    return 2 === b ? a : null\n                }, setRequestHeader: function (e, t) {\n                    var n = e.toLowerCase();\n                    return b || (e = v[n] = v[n] || e, y[e] = t), this\n                }, overrideMimeType: function (e) {\n                    return b || (p.mimeType = e), this\n                }, statusCode: function (e) {\n                    var t;\n                    if (e)\n                        if (2 > b)\n                            for (t in e)\n                                m[t] = [m[t], e[t]];\n                        else\n                            C.always(e[C.status]);\n                    return this\n                }, abort: function (e) {\n                    var t = e || w;\n                    return u && u.abort(t), k(0, t), this\n                }};\n            if (h.promise(C).complete = g.add, C.success = C.done, C.error = C.fail, p.url = ((e || p.url || yn) + \"\").replace(xn, \"\").replace(kn, mn[1] + \"//\"), p.type = n.method || n.type || p.method || p.type, p.dataTypes = x.trim(p.dataType || \"*\").toLowerCase().match(T) || [\"\"], null == p.crossDomain && (r = En.exec(p.url.toLowerCase()), p.crossDomain = !(!r || r[1] === mn[1] && r[2] === mn[2] && (r[3] || (\"http:\" === r[1] ? \"80\" : \"443\")) === (mn[3] || (\"http:\" === mn[1] ? \"80\" : \"443\")))), p.data && p.processData && \"string\" != typeof p.data && (p.data = x.param(p.data, p.traditional)), qn(An, p, n, C), 2 === b)\n                return C;\n            l = p.global, l && 0 === x.active++ && x.event.trigger(\"ajaxStart\"), p.type = p.type.toUpperCase(), p.hasContent = !Nn.test(p.type), o = p.url, p.hasContent || (p.data && (o = p.url += (bn.test(o) ? \"&\" : \"?\") + p.data, delete p.data), p.cache === !1 && (p.url = wn.test(o) ? o.replace(wn, \"$1_=\" + vn++) : o + (bn.test(o) ? \"&\" : \"?\") + \"_=\" + vn++)), p.ifModified && (x.lastModified[o] && C.setRequestHeader(\"If-Modified-Since\", x.lastModified[o]), x.etag[o] && C.setRequestHeader(\"If-None-Match\", x.etag[o])), (p.data && p.hasContent && p.contentType !== !1 || n.contentType) && C.setRequestHeader(\"Content-Type\", p.contentType), C.setRequestHeader(\"Accept\", p.dataTypes[0] && p.accepts[p.dataTypes[0]] ? p.accepts[p.dataTypes[0]] + (\"*\" !== p.dataTypes[0] ? \", \" + Dn + \"; q=0.01\" : \"\") : p.accepts[\"*\"]);\n            for (i in p.headers)\n                C.setRequestHeader(i, p.headers[i]);\n            if (p.beforeSend && (p.beforeSend.call(f, C, p) === !1 || 2 === b))\n                return C.abort();\n            w = \"abort\";\n            for (i in{success:1, error:1, complete:1})\n                C[i](p[i]);\n            if (u = qn(jn, p, n, C)) {\n                C.readyState = 1, l && d.trigger(\"ajaxSend\", [C, p]), p.async && p.timeout > 0 && (s = setTimeout(function () {\n                    C.abort(\"timeout\")\n                }, p.timeout));\n                try {\n                    b = 1, u.send(y, k)\n                } catch (N) {\n                    if (!(2 > b))\n                        throw N;\n                    k(-1, N)\n                }\n            } else\n                k(-1, \"No Transport\");\n            function k(e, n, r, i) {\n                var c, y, v, w, T, N = n;\n                2 !== b && (b = 2, s && clearTimeout(s), u = t, a = i || \"\", C.readyState = e > 0 ? 4 : 0, c = e >= 200 && 300 > e || 304 === e, r && (w = Mn(p, C, r)), w = On(p, w, C, c), c ? (p.ifModified && (T = C.getResponseHeader(\"Last-Modified\"), T && (x.lastModified[o] = T), T = C.getResponseHeader(\"etag\"), T && (x.etag[o] = T)), 204 === e || \"HEAD\" === p.type ? N = \"nocontent\" : 304 === e ? N = \"notmodified\" : (N = w.state, y = w.data, v = w.error, c = !v)) : (v = N, (e || !N) && (N = \"error\", 0 > e && (e = 0))), C.status = e, C.statusText = (n || N) + \"\", c ? h.resolveWith(f, [y, N, C]) : h.rejectWith(f, [C, N, v]), C.statusCode(m), m = t, l && d.trigger(c ? \"ajaxSuccess\" : \"ajaxError\", [C, p, c ? y : v]), g.fireWith(f, [C, N]), l && (d.trigger(\"ajaxComplete\", [C, p]), --x.active || x.event.trigger(\"ajaxStop\")))\n            }\n            return C\n        }, getJSON: function (e, t, n) {\n            return x.get(e, t, n, \"json\")\n        }, getScript: function (e, n) {\n            return x.get(e, t, n, \"script\")\n        }}), x.each([\"get\", \"post\"], function (e, n) {\n        x[n] = function (e, r, i, o) {\n            return x.isFunction(r) && (o = o || i, i = r, r = t), x.ajax({url: e, type: n, dataType: o, data: r, success: i})\n        }\n    });\n    function Mn(e, n, r) {\n        var i, o, a, s, l = e.contents, u = e.dataTypes;\n        while (\"*\" === u[0])\n            u.shift(), o === t && (o = e.mimeType || n.getResponseHeader(\"Content-Type\"));\n        if (o)\n            for (s in l)\n                if (l[s] && l[s].test(o)) {\n                    u.unshift(s);\n                    break\n                }\n        if (u[0]in r)\n            a = u[0];\n        else {\n            for (s in r) {\n                if (!u[0] || e.converters[s + \" \" + u[0]]) {\n                    a = s;\n                    break\n                }\n                i || (i = s)\n            }\n            a = a || i\n        }\n        return a ? (a !== u[0] && u.unshift(a), r[a]) : t\n    }\n    function On(e, t, n, r) {\n        var i, o, a, s, l, u = {}, c = e.dataTypes.slice();\n        if (c[1])\n            for (a in e.converters)\n                u[a.toLowerCase()] = e.converters[a];\n        o = c.shift();\n        while (o)\n            if (e.responseFields[o] && (n[e.responseFields[o]] = t), !l && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = o, o = c.shift())\n                if (\"*\" === o)\n                    o = l;\n                else if (\"*\" !== l && l !== o) {\n                    if (a = u[l + \" \" + o] || u[\"* \" + o], !a)\n                        for (i in u)\n                            if (s = i.split(\" \"), s[1] === o && (a = u[l + \" \" + s[0]] || u[\"* \" + s[0]])) {\n                                a === !0 ? a = u[i] : u[i] !== !0 && (o = s[0], c.unshift(s[1]));\n                                break\n                            }\n                    if (a !== !0)\n                        if (a && e[\"throws\"])\n                            t = a(t);\n                        else\n                            try {\n                                t = a(t)\n                            } catch (p) {\n                                return{state: \"parsererror\", error: a ? p : \"No conversion from \" + l + \" to \" + o}\n                            }\n                }\n        return{state: \"success\", data: t}\n    }\n    x.ajaxSetup({accepts: {script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"}, contents: {script: /(?:java|ecma)script/}, converters: {\"text script\": function (e) {\n                return x.globalEval(e), e\n            }}}), x.ajaxPrefilter(\"script\", function (e) {\n        e.cache === t && (e.cache = !1), e.crossDomain && (e.type = \"GET\", e.global = !1)\n    }), x.ajaxTransport(\"script\", function (e) {\n        if (e.crossDomain) {\n            var n, r = a.head || x(\"head\")[0] || a.documentElement;\n            return{send: function (t, i) {\n                    n = a.createElement(\"script\"), n.async = !0, e.scriptCharset && (n.charset = e.scriptCharset), n.src = e.url, n.onload = n.onreadystatechange = function (e, t) {\n                        (t || !n.readyState || /loaded|complete/.test(n.readyState)) && (n.onload = n.onreadystatechange = null, n.parentNode && n.parentNode.removeChild(n), n = null, t || i(200, \"success\"))\n                    }, r.insertBefore(n, r.firstChild)\n                }, abort: function () {\n                    n && n.onload(t, !0)\n                }}\n        }\n    });\n    var Fn = [], Bn = /(=)\\?(?=&|$)|\\?\\?/;\n    x.ajaxSetup({jsonp: \"callback\", jsonpCallback: function () {\n            var e = Fn.pop() || x.expando + \"_\" + vn++;\n            return this[e] = !0, e\n        }}), x.ajaxPrefilter(\"json jsonp\", function (n, r, i) {\n        var o, a, s, l = n.jsonp !== !1 && (Bn.test(n.url) ? \"url\" : \"string\" == typeof n.data && !(n.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Bn.test(n.data) && \"data\");\n        return l || \"jsonp\" === n.dataTypes[0] ? (o = n.jsonpCallback = x.isFunction(n.jsonpCallback) ? n.jsonpCallback() : n.jsonpCallback, l ? n[l] = n[l].replace(Bn, \"$1\" + o) : n.jsonp !== !1 && (n.url += (bn.test(n.url) ? \"&\" : \"?\") + n.jsonp + \"=\" + o), n.converters[\"script json\"] = function () {\n            return s || x.error(o + \" was not called\"), s[0]\n        }, n.dataTypes[0] = \"json\", a = e[o], e[o] = function () {\n            s = arguments\n        }, i.always(function () {\n            e[o] = a, n[o] && (n.jsonpCallback = r.jsonpCallback, Fn.push(o)), s && x.isFunction(a) && a(s[0]), s = a = t\n        }), \"script\") : t\n    });\n    var Pn, Rn, Wn = 0, $n = e.ActiveXObject && function () {\n        var e;\n        for (e in Pn)\n            Pn[e](t, !0)\n    };\n    function In() {\n        try {\n            return new e.XMLHttpRequest\n        } catch (t) {\n        }\n    }\n    function zn() {\n        try {\n            return new e.ActiveXObject(\"Microsoft.XMLHTTP\")\n        } catch (t) {\n        }\n    }\n    x.ajaxSettings.xhr = e.ActiveXObject ? function () {\n        return!this.isLocal && In() || zn()\n    } : In, Rn = x.ajaxSettings.xhr(), x.support.cors = !!Rn && \"withCredentials\"in Rn, Rn = x.support.ajax = !!Rn, Rn && x.ajaxTransport(function (n) {\n        if (!n.crossDomain || x.support.cors) {\n            var r;\n            return{send: function (i, o) {\n                    var a, s, l = n.xhr();\n                    if (n.username ? l.open(n.type, n.url, n.async, n.username, n.password) : l.open(n.type, n.url, n.async), n.xhrFields)\n                        for (s in n.xhrFields)\n                            l[s] = n.xhrFields[s];\n                    n.mimeType && l.overrideMimeType && l.overrideMimeType(n.mimeType), n.crossDomain || i[\"X-Requested-With\"] || (i[\"X-Requested-With\"] = \"XMLHttpRequest\");\n                    try {\n                        for (s in i)\n                            l.setRequestHeader(s, i[s])\n                    } catch (u) {\n                    }\n                    l.send(n.hasContent && n.data || null), r = function (e, i) {\n                        var s, u, c, p;\n                        try {\n                            if (r && (i || 4 === l.readyState))\n                                if (r = t, a && (l.onreadystatechange = x.noop, $n && delete Pn[a]), i)\n                                    4 !== l.readyState && l.abort();\n                                else {\n                                    p = {}, s = l.status, u = l.getAllResponseHeaders(), \"string\" == typeof l.responseText && (p.text = l.responseText);\n                                    try {\n                                        c = l.statusText\n                                    } catch (f) {\n                                        c = \"\"\n                                    }\n                                    s || !n.isLocal || n.crossDomain ? 1223 === s && (s = 204) : s = p.text ? 200 : 404\n                                }\n                        } catch (d) {\n                            i || o(-1, d)\n                        }\n                        p && o(s, c, p, u)\n                    }, n.async ? 4 === l.readyState ? setTimeout(r) : (a = ++Wn, $n && (Pn || (Pn = {}, x(e).unload($n)), Pn[a] = r), l.onreadystatechange = r) : r()\n                }, abort: function () {\n                    r && r(t, !0)\n                }}\n        }\n    });\n    var Xn, Un, Vn = /^(?:toggle|show|hide)$/, Yn = RegExp(\"^(?:([+-])=|)(\" + w + \")([a-z%]*)$\", \"i\"), Jn = /queueHooks$/, Gn = [nr], Qn = {\"*\": [function (e, t) {\n                var n = this.createTween(e, t), r = n.cur(), i = Yn.exec(t), o = i && i[3] || (x.cssNumber[e] ? \"\" : \"px\"), a = (x.cssNumber[e] || \"px\" !== o && +r) && Yn.exec(x.css(n.elem, e)), s = 1, l = 20;\n                if (a && a[3] !== o) {\n                    o = o || a[3], i = i || [], a = +r || 1;\n                    do\n                        s = s || \".5\", a /= s, x.style(n.elem, e, a + o);\n                    while (s !== (s = n.cur() / r) && 1 !== s && --l)\n                }\n                return i && (a = n.start = +a || +r || 0, n.unit = o, n.end = i[1] ? a + (i[1] + 1) * i[2] : +i[2]), n\n            }]};\n    function Kn() {\n        return setTimeout(function () {\n            Xn = t\n        }), Xn = x.now()\n    }\n    function Zn(e, t, n) {\n        var r, i = (Qn[t] || []).concat(Qn[\"*\"]), o = 0, a = i.length;\n        for (; a > o; o++)\n            if (r = i[o].call(n, t, e))\n                return r\n    }\n    function er(e, t, n) {\n        var r, i, o = 0, a = Gn.length, s = x.Deferred().always(function () {\n            delete l.elem\n        }), l = function () {\n            if (i)\n                return!1;\n            var t = Xn || Kn(), n = Math.max(0, u.startTime + u.duration - t), r = n / u.duration || 0, o = 1 - r, a = 0, l = u.tweens.length;\n            for (; l > a; a++)\n                u.tweens[a].run(o);\n            return s.notifyWith(e, [u, o, n]), 1 > o && l ? n : (s.resolveWith(e, [u]), !1)\n        }, u = s.promise({elem: e, props: x.extend({}, t), opts: x.extend(!0, {specialEasing: {}}, n), originalProperties: t, originalOptions: n, startTime: Xn || Kn(), duration: n.duration, tweens: [], createTween: function (t, n) {\n                var r = x.Tween(e, u.opts, t, n, u.opts.specialEasing[t] || u.opts.easing);\n                return u.tweens.push(r), r\n            }, stop: function (t) {\n                var n = 0, r = t ? u.tweens.length : 0;\n                if (i)\n                    return this;\n                for (i = !0; r > n; n++)\n                    u.tweens[n].run(1);\n                return t ? s.resolveWith(e, [u, t]) : s.rejectWith(e, [u, t]), this\n            }}), c = u.props;\n        for (tr(c, u.opts.specialEasing); a > o; o++)\n            if (r = Gn[o].call(u, e, c, u.opts))\n                return r;\n        return x.map(c, Zn, u), x.isFunction(u.opts.start) && u.opts.start.call(e, u), x.fx.timer(x.extend(l, {elem: e, anim: u, queue: u.opts.queue})), u.progress(u.opts.progress).done(u.opts.done, u.opts.complete).fail(u.opts.fail).always(u.opts.always)\n    }\n    function tr(e, t) {\n        var n, r, i, o, a;\n        for (n in e)\n            if (r = x.camelCase(n), i = t[r], o = e[n], x.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), a = x.cssHooks[r], a && \"expand\"in a) {\n                o = a.expand(o), delete e[r];\n                for (n in o)\n                    n in e || (e[n] = o[n], t[n] = i)\n            } else\n                t[r] = i\n    }\n    x.Animation = x.extend(er, {tweener: function (e, t) {\n            x.isFunction(e) ? (t = e, e = [\"*\"]) : e = e.split(\" \");\n            var n, r = 0, i = e.length;\n            for (; i > r; r++)\n                n = e[r], Qn[n] = Qn[n] || [], Qn[n].unshift(t)\n        }, prefilter: function (e, t) {\n            t ? Gn.unshift(e) : Gn.push(e)\n        }});\n    function nr(e, t, n) {\n        var r, i, o, a, s, l, u = this, c = {}, p = e.style, f = e.nodeType && nn(e), d = x._data(e, \"fxshow\");\n        n.queue || (s = x._queueHooks(e, \"fx\"), null == s.unqueued && (s.unqueued = 0, l = s.empty.fire, s.empty.fire = function () {\n            s.unqueued || l()\n        }), s.unqueued++, u.always(function () {\n            u.always(function () {\n                s.unqueued--, x.queue(e, \"fx\").length || s.empty.fire()\n            })\n        })), 1 === e.nodeType && (\"height\"in t || \"width\"in t) && (n.overflow = [p.overflow, p.overflowX, p.overflowY], \"inline\" === x.css(e, \"display\") && \"none\" === x.css(e, \"float\") && (x.support.inlineBlockNeedsLayout && \"inline\" !== ln(e.nodeName) ? p.zoom = 1 : p.display = \"inline-block\")), n.overflow && (p.overflow = \"hidden\", x.support.shrinkWrapBlocks || u.always(function () {\n            p.overflow = n.overflow[0], p.overflowX = n.overflow[1], p.overflowY = n.overflow[2]\n        }));\n        for (r in t)\n            if (i = t[r], Vn.exec(i)) {\n                if (delete t[r], o = o || \"toggle\" === i, i === (f ? \"hide\" : \"show\"))\n                    continue;\n                c[r] = d && d[r] || x.style(e, r)\n            }\n        if (!x.isEmptyObject(c)) {\n            d ? \"hidden\"in d && (f = d.hidden) : d = x._data(e, \"fxshow\", {}), o && (d.hidden = !f), f ? x(e).show() : u.done(function () {\n                x(e).hide()\n            }), u.done(function () {\n                var t;\n                x._removeData(e, \"fxshow\");\n                for (t in c)\n                    x.style(e, t, c[t])\n            });\n            for (r in c)\n                a = Zn(f ? d[r] : 0, r, u), r in d || (d[r] = a.start, f && (a.end = a.start, a.start = \"width\" === r || \"height\" === r ? 1 : 0))\n        }\n    }\n    function rr(e, t, n, r, i) {\n        return new rr.prototype.init(e, t, n, r, i)\n    }\n    x.Tween = rr, rr.prototype = {constructor: rr, init: function (e, t, n, r, i, o) {\n            this.elem = e, this.prop = n, this.easing = i || \"swing\", this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (x.cssNumber[n] ? \"\" : \"px\")\n        }, cur: function () {\n            var e = rr.propHooks[this.prop];\n            return e && e.get ? e.get(this) : rr.propHooks._default.get(this)\n        }, run: function (e) {\n            var t, n = rr.propHooks[this.prop];\n            return this.pos = t = this.options.duration ? x.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : rr.propHooks._default.set(this), this\n        }}, rr.prototype.init.prototype = rr.prototype, rr.propHooks = {_default: {get: function (e) {\n                var t;\n                return null == e.elem[e.prop] || e.elem.style && null != e.elem.style[e.prop] ? (t = x.css(e.elem, e.prop, \"\"), t && \"auto\" !== t ? t : 0) : e.elem[e.prop]\n            }, set: function (e) {\n                x.fx.step[e.prop] ? x.fx.step[e.prop](e) : e.elem.style && (null != e.elem.style[x.cssProps[e.prop]] || x.cssHooks[e.prop]) ? x.style(e.elem, e.prop, e.now + e.unit) : e.elem[e.prop] = e.now\n            }}}, rr.propHooks.scrollTop = rr.propHooks.scrollLeft = {set: function (e) {\n            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)\n        }}, x.each([\"toggle\", \"show\", \"hide\"], function (e, t) {\n        var n = x.fn[t];\n        x.fn[t] = function (e, r, i) {\n            return null == e || \"boolean\" == typeof e ? n.apply(this, arguments) : this.animate(ir(t, !0), e, r, i)\n        }\n    }), x.fn.extend({fadeTo: function (e, t, n, r) {\n            return this.filter(nn).css(\"opacity\", 0).show().end().animate({opacity: t}, e, n, r)\n        }, animate: function (e, t, n, r) {\n            var i = x.isEmptyObject(e), o = x.speed(t, n, r), a = function () {\n                var t = er(this, x.extend({}, e), o);\n                (i || x._data(this, \"finish\")) && t.stop(!0)\n            };\n            return a.finish = a, i || o.queue === !1 ? this.each(a) : this.queue(o.queue, a)\n        }, stop: function (e, n, r) {\n            var i = function (e) {\n                var t = e.stop;\n                delete e.stop, t(r)\n            };\n            return\"string\" != typeof e && (r = n, n = e, e = t), n && e !== !1 && this.queue(e || \"fx\", []), this.each(function () {\n                var t = !0, n = null != e && e + \"queueHooks\", o = x.timers, a = x._data(this);\n                if (n)\n                    a[n] && a[n].stop && i(a[n]);\n                else\n                    for (n in a)\n                        a[n] && a[n].stop && Jn.test(n) && i(a[n]);\n                for (n = o.length; n--; )\n                    o[n].elem !== this || null != e && o[n].queue !== e || (o[n].anim.stop(r), t = !1, o.splice(n, 1));\n                (t || !r) && x.dequeue(this, e)\n            })\n        }, finish: function (e) {\n            return e !== !1 && (e = e || \"fx\"), this.each(function () {\n                var t, n = x._data(this), r = n[e + \"queue\"], i = n[e + \"queueHooks\"], o = x.timers, a = r ? r.length : 0;\n                for (n.finish = !0, x.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--; )\n                    o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));\n                for (t = 0; a > t; t++)\n                    r[t] && r[t].finish && r[t].finish.call(this);\n                delete n.finish\n            })\n        }});\n    function ir(e, t) {\n        var n, r = {height: e}, i = 0;\n        for (t = t?1:0; 4 > i; i += 2 - t)\n            n = Zt[i], r[\"margin\" + n] = r[\"padding\" + n] = e;\n        return t && (r.opacity = r.width = e), r\n    }\n    x.each({slideDown: ir(\"show\"), slideUp: ir(\"hide\"), slideToggle: ir(\"toggle\"), fadeIn: {opacity: \"show\"}, fadeOut: {opacity: \"hide\"}, fadeToggle: {opacity: \"toggle\"}}, function (e, t) {\n        x.fn[e] = function (e, n, r) {\n            return this.animate(t, e, n, r)\n        }\n    }), x.speed = function (e, t, n) {\n        var r = e && \"object\" == typeof e ? x.extend({}, e) : {complete: n || !n && t || x.isFunction(e) && e, duration: e, easing: n && t || t && !x.isFunction(t) && t};\n        return r.duration = x.fx.off ? 0 : \"number\" == typeof r.duration ? r.duration : r.duration in x.fx.speeds ? x.fx.speeds[r.duration] : x.fx.speeds._default, (null == r.queue || r.queue === !0) && (r.queue = \"fx\"), r.old = r.complete, r.complete = function () {\n            x.isFunction(r.old) && r.old.call(this), r.queue && x.dequeue(this, r.queue)\n        }, r\n    }, x.easing = {linear: function (e) {\n            return e\n        }, swing: function (e) {\n            return.5 - Math.cos(e * Math.PI) / 2\n        }}, x.timers = [], x.fx = rr.prototype.init, x.fx.tick = function () {\n        var e, n = x.timers, r = 0;\n        for (Xn = x.now(); n.length > r; r++)\n            e = n[r], e() || n[r] !== e || n.splice(r--, 1);\n        n.length || x.fx.stop(), Xn = t\n    }, x.fx.timer = function (e) {\n        e() && x.timers.push(e) && x.fx.start()\n    }, x.fx.interval = 13, x.fx.start = function () {\n        Un || (Un = setInterval(x.fx.tick, x.fx.interval))\n    }, x.fx.stop = function () {\n        clearInterval(Un), Un = null\n    }, x.fx.speeds = {slow: 600, fast: 200, _default: 400}, x.fx.step = {}, x.expr && x.expr.filters && (x.expr.filters.animated = function (e) {\n        return x.grep(x.timers, function (t) {\n            return e === t.elem\n        }).length\n    }), x.fn.offset = function (e) {\n        if (arguments.length)\n            return e === t ? this : this.each(function (t) {\n                x.offset.setOffset(this, e, t)\n            });\n        var n, r, o = {top: 0, left: 0}, a = this[0], s = a && a.ownerDocument;\n        if (s)\n            return n = s.documentElement, x.contains(n, a) ? (typeof a.getBoundingClientRect !== i && (o = a.getBoundingClientRect()), r = or(s), {top: o.top + (r.pageYOffset || n.scrollTop) - (n.clientTop || 0), left: o.left + (r.pageXOffset || n.scrollLeft) - (n.clientLeft || 0)}) : o\n    }, x.offset = {setOffset: function (e, t, n) {\n            var r = x.css(e, \"position\");\n            \"static\" === r && (e.style.position = \"relative\");\n            var i = x(e), o = i.offset(), a = x.css(e, \"top\"), s = x.css(e, \"left\"), l = (\"absolute\" === r || \"fixed\" === r) && x.inArray(\"auto\", [a, s]) > -1, u = {}, c = {}, p, f;\n            l ? (c = i.position(), p = c.top, f = c.left) : (p = parseFloat(a) || 0, f = parseFloat(s) || 0), x.isFunction(t) && (t = t.call(e, n, o)), null != t.top && (u.top = t.top - o.top + p), null != t.left && (u.left = t.left - o.left + f), \"using\"in t ? t.using.call(e, u) : i.css(u)\n        }}, x.fn.extend({position: function () {\n            if (this[0]) {\n                var e, t, n = {top: 0, left: 0}, r = this[0];\n                return\"fixed\" === x.css(r, \"position\") ? t = r.getBoundingClientRect() : (e = this.offsetParent(), t = this.offset(), x.nodeName(e[0], \"html\") || (n = e.offset()), n.top += x.css(e[0], \"borderTopWidth\", !0), n.left += x.css(e[0], \"borderLeftWidth\", !0)), {top: t.top - n.top - x.css(r, \"marginTop\", !0), left: t.left - n.left - x.css(r, \"marginLeft\", !0)}\n            }\n        }, offsetParent: function () {\n            return this.map(function () {\n                var e = this.offsetParent || s;\n                while (e && !x.nodeName(e, \"html\") && \"static\" === x.css(e, \"position\"))\n                    e = e.offsetParent;\n                return e || s\n            })\n        }}), x.each({scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\"}, function (e, n) {\n        var r = /Y/.test(n);\n        x.fn[e] = function (i) {\n            return x.access(this, function (e, i, o) {\n                var a = or(e);\n                return o === t ? a ? n in a ? a[n] : a.document.documentElement[i] : e[i] : (a ? a.scrollTo(r ? x(a).scrollLeft() : o, r ? o : x(a).scrollTop()) : e[i] = o, t)\n            }, e, i, arguments.length, null)\n        }\n    });\n    function or(e) {\n        return x.isWindow(e) ? e : 9 === e.nodeType ? e.defaultView || e.parentWindow : !1\n    }\n    x.each({Height: \"height\", Width: \"width\"}, function (e, n) {\n        x.each({padding: \"inner\" + e, content: n, \"\": \"outer\" + e}, function (r, i) {\n            x.fn[i] = function (i, o) {\n                var a = arguments.length && (r || \"boolean\" != typeof i), s = r || (i === !0 || o === !0 ? \"margin\" : \"border\");\n                return x.access(this, function (n, r, i) {\n                    var o;\n                    return x.isWindow(n) ? n.document.documentElement[\"client\" + e] : 9 === n.nodeType ? (o = n.documentElement, Math.max(n.body[\"scroll\" + e], o[\"scroll\" + e], n.body[\"offset\" + e], o[\"offset\" + e], o[\"client\" + e])) : i === t ? x.css(n, r, s) : x.style(n, r, i, s)\n                }, n, a ? i : t, a, null)\n            }\n        })\n    }), x.fn.size = function () {\n        return this.length\n    }, x.fn.andSelf = x.fn.addBack, \"object\" == typeof module && module && \"object\" == typeof module.exports ? module.exports = x : (e.jQuery = e.$ = x, \"function\" == \"function\" && __webpack_require__(4) && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n        return x\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)))\n})(window);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vfi93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzPzE3YTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9+L3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDAgMVxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vfi93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/NjY4ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9+L3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMCAxXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.6.0\n//     http://underscorejs.org\n//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function () {\n\n    // Baseline setup\n    // --------------\n\n    // Establish the root object, `window` in the browser, or `exports` on the server.\n    var root = this;\n\n    // Save the previous value of the `_` variable.\n    var previousUnderscore = root._;\n\n    // Establish the object that gets returned to break out of a loop iteration.\n    var breaker = {};\n\n    // Save bytes in the minified (but not gzipped) version:\n    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n    // Create quick reference variables for speed access to core prototypes.\n    var\n        push = ArrayProto.push,\n        slice = ArrayProto.slice,\n        concat = ArrayProto.concat,\n        toString = ObjProto.toString,\n        hasOwnProperty = ObjProto.hasOwnProperty;\n\n    // All **ECMAScript 5** native function implementations that we hope to use\n    // are declared here.\n    var\n        nativeForEach = ArrayProto.forEach,\n        nativeMap = ArrayProto.map,\n        nativeReduce = ArrayProto.reduce,\n        nativeReduceRight = ArrayProto.reduceRight,\n        nativeFilter = ArrayProto.filter,\n        nativeEvery = ArrayProto.every,\n        nativeSome = ArrayProto.some,\n        nativeIndexOf = ArrayProto.indexOf,\n        nativeLastIndexOf = ArrayProto.lastIndexOf,\n        nativeIsArray = Array.isArray,\n        nativeKeys = Object.keys,\n        nativeBind = FuncProto.bind;\n\n    // Create a safe reference to the Underscore object for use below.\n    var _ = function (obj) {\n        if (obj instanceof _)\n            return obj;\n        if (!(this instanceof _))\n            return new _(obj);\n        this._wrapped = obj;\n    };\n\n    // Export the Underscore object for **Node.js**, with\n    // backwards-compatibility for the old `require()` API. If we're in\n    // the browser, add `_` as a global object via a string identifier,\n    // for Closure Compiler \"advanced\" mode.\n    if (true) {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = _;\n        }\n        exports._ = _;\n    } else {\n        root._ = _;\n    }\n\n    // Current version.\n    _.VERSION = '1.6.0';\n\n    // Collection Functions\n    // --------------------\n\n    // The cornerstone, an `each` implementation, aka `forEach`.\n    // Handles objects with the built-in `forEach`, arrays, and raw objects.\n    // Delegates to **ECMAScript 5**'s native `forEach` if available.\n    var each = _.each = _.forEach = function (obj, iterator, context) {\n        if (obj == null)\n            return obj;\n        if (nativeForEach && obj.forEach === nativeForEach) {\n            obj.forEach(iterator, context);\n        } else if (obj.length === +obj.length) {\n            for (var i = 0, length = obj.length; i < length; i++) {\n                if (iterator.call(context, obj[i], i, obj) === breaker)\n                    return;\n            }\n        } else {\n            var keys = _.keys(obj);\n            for (var i = 0, length = keys.length; i < length; i++) {\n                if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)\n                    return;\n            }\n        }\n        return obj;\n    };\n\n    // Return the results of applying the iterator to each element.\n    // Delegates to **ECMAScript 5**'s native `map` if available.\n    _.map = _.collect = function (obj, iterator, context) {\n        var results = [];\n        if (obj == null)\n            return results;\n        if (nativeMap && obj.map === nativeMap)\n            return obj.map(iterator, context);\n        each(obj, function (value, index, list) {\n            results.push(iterator.call(context, value, index, list));\n        });\n        return results;\n    };\n\n    var reduceError = 'Reduce of empty array with no initial value';\n\n    // **Reduce** builds up a single result from a list of values, aka `inject`,\n    // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n    _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {\n        var initial = arguments.length > 2;\n        if (obj == null)\n            obj = [];\n        if (nativeReduce && obj.reduce === nativeReduce) {\n            if (context)\n                iterator = _.bind(iterator, context);\n            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n        }\n        each(obj, function (value, index, list) {\n            if (!initial) {\n                memo = value;\n                initial = true;\n            } else {\n                memo = iterator.call(context, memo, value, index, list);\n            }\n        });\n        if (!initial)\n            throw new TypeError(reduceError);\n        return memo;\n    };\n\n    // The right-associative version of reduce, also known as `foldr`.\n    // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n    _.reduceRight = _.foldr = function (obj, iterator, memo, context) {\n        var initial = arguments.length > 2;\n        if (obj == null)\n            obj = [];\n        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n            if (context)\n                iterator = _.bind(iterator, context);\n            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n        }\n        var length = obj.length;\n        if (length !== +length) {\n            var keys = _.keys(obj);\n            length = keys.length;\n        }\n        each(obj, function (value, index, list) {\n            index = keys ? keys[--length] : --length;\n            if (!initial) {\n                memo = obj[index];\n                initial = true;\n            } else {\n                memo = iterator.call(context, memo, obj[index], index, list);\n            }\n        });\n        if (!initial)\n            throw new TypeError(reduceError);\n        return memo;\n    };\n\n    // Return the first value which passes a truth test. Aliased as `detect`.\n    _.find = _.detect = function (obj, predicate, context) {\n        var result;\n        any(obj, function (value, index, list) {\n            if (predicate.call(context, value, index, list)) {\n                result = value;\n                return true;\n            }\n        });\n        return result;\n    };\n\n    // Return all the elements that pass a truth test.\n    // Delegates to **ECMAScript 5**'s native `filter` if available.\n    // Aliased as `select`.\n    _.filter = _.select = function (obj, predicate, context) {\n        var results = [];\n        if (obj == null)\n            return results;\n        if (nativeFilter && obj.filter === nativeFilter)\n            return obj.filter(predicate, context);\n        each(obj, function (value, index, list) {\n            if (predicate.call(context, value, index, list))\n                results.push(value);\n        });\n        return results;\n    };\n\n    // Return all the elements for which a truth test fails.\n    _.reject = function (obj, predicate, context) {\n        return _.filter(obj, function (value, index, list) {\n            return !predicate.call(context, value, index, list);\n        }, context);\n    };\n\n    // Determine whether all of the elements match a truth test.\n    // Delegates to **ECMAScript 5**'s native `every` if available.\n    // Aliased as `all`.\n    _.every = _.all = function (obj, predicate, context) {\n        predicate || (predicate = _.identity);\n        var result = true;\n        if (obj == null)\n            return result;\n        if (nativeEvery && obj.every === nativeEvery)\n            return obj.every(predicate, context);\n        each(obj, function (value, index, list) {\n            if (!(result = result && predicate.call(context, value, index, list)))\n                return breaker;\n        });\n        return !!result;\n    };\n\n    // Determine if at least one element in the object matches a truth test.\n    // Delegates to **ECMAScript 5**'s native `some` if available.\n    // Aliased as `any`.\n    var any = _.some = _.any = function (obj, predicate, context) {\n        predicate || (predicate = _.identity);\n        var result = false;\n        if (obj == null)\n            return result;\n        if (nativeSome && obj.some === nativeSome)\n            return obj.some(predicate, context);\n        each(obj, function (value, index, list) {\n            if (result || (result = predicate.call(context, value, index, list)))\n                return breaker;\n        });\n        return !!result;\n    };\n\n    // Determine if the array or object contains a given value (using `===`).\n    // Aliased as `include`.\n    _.contains = _.include = function (obj, target) {\n        if (obj == null)\n            return false;\n        if (nativeIndexOf && obj.indexOf === nativeIndexOf)\n            return obj.indexOf(target) != -1;\n        return any(obj, function (value) {\n            return value === target;\n        });\n    };\n\n    // Invoke a method (with arguments) on every item in a collection.\n    _.invoke = function (obj, method) {\n        var args = slice.call(arguments, 2);\n        var isFunc = _.isFunction(method);\n        return _.map(obj, function (value) {\n            return (isFunc ? method : value[method]).apply(value, args);\n        });\n    };\n\n    // Convenience version of a common use case of `map`: fetching a property.\n    _.pluck = function (obj, key) {\n        return _.map(obj, _.property(key));\n    };\n\n    // Convenience version of a common use case of `filter`: selecting only objects\n    // containing specific `key:value` pairs.\n    _.where = function (obj, attrs) {\n        return _.filter(obj, _.matches(attrs));\n    };\n\n    // Convenience version of a common use case of `find`: getting the first object\n    // containing specific `key:value` pairs.\n    _.findWhere = function (obj, attrs) {\n        return _.find(obj, _.matches(attrs));\n    };\n\n    // Return the maximum element or (element-based computation).\n    // Can't optimize arrays of integers longer than 65,535 elements.\n    // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n    _.max = function (obj, iterator, context) {\n        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n            return Math.max.apply(Math, obj);\n        }\n        var result = -Infinity, lastComputed = -Infinity;\n        each(obj, function (value, index, list) {\n            var computed = iterator ? iterator.call(context, value, index, list) : value;\n            if (computed > lastComputed) {\n                result = value;\n                lastComputed = computed;\n            }\n        });\n        return result;\n    };\n\n    // Return the minimum element (or element-based computation).\n    _.min = function (obj, iterator, context) {\n        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n            return Math.min.apply(Math, obj);\n        }\n        var result = Infinity, lastComputed = Infinity;\n        each(obj, function (value, index, list) {\n            var computed = iterator ? iterator.call(context, value, index, list) : value;\n            if (computed < lastComputed) {\n                result = value;\n                lastComputed = computed;\n            }\n        });\n        return result;\n    };\n\n    // Shuffle an array, using the modern version of the\n    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n    _.shuffle = function (obj) {\n        var rand;\n        var index = 0;\n        var shuffled = [];\n        each(obj, function (value) {\n            rand = _.random(index++);\n            shuffled[index - 1] = shuffled[rand];\n            shuffled[rand] = value;\n        });\n        return shuffled;\n    };\n\n    // Sample **n** random values from a collection.\n    // If **n** is not specified, returns a single random element.\n    // The internal `guard` argument allows it to work with `map`.\n    _.sample = function (obj, n, guard) {\n        if (n == null || guard) {\n            if (obj.length !== +obj.length)\n                obj = _.values(obj);\n            return obj[_.random(obj.length - 1)];\n        }\n        return _.shuffle(obj).slice(0, Math.max(0, n));\n    };\n\n    // An internal function to generate lookup iterators.\n    var lookupIterator = function (value) {\n        if (value == null)\n            return _.identity;\n        if (_.isFunction(value))\n            return value;\n        return _.property(value);\n    };\n\n    // Sort the object's values by a criterion produced by an iterator.\n    _.sortBy = function (obj, iterator, context) {\n        iterator = lookupIterator(iterator);\n        return _.pluck(_.map(obj, function (value, index, list) {\n            return {\n                value: value,\n                index: index,\n                criteria: iterator.call(context, value, index, list)\n            };\n        }).sort(function (left, right) {\n            var a = left.criteria;\n            var b = right.criteria;\n            if (a !== b) {\n                if (a > b || a === void 0)\n                    return 1;\n                if (a < b || b === void 0)\n                    return -1;\n            }\n            return left.index - right.index;\n        }), 'value');\n    };\n\n    // An internal function used for aggregate \"group by\" operations.\n    var group = function (behavior) {\n        return function (obj, iterator, context) {\n            var result = {};\n            iterator = lookupIterator(iterator);\n            each(obj, function (value, index) {\n                var key = iterator.call(context, value, index, obj);\n                behavior(result, key, value);\n            });\n            return result;\n        };\n    };\n\n    // Groups the object's values by a criterion. Pass either a string attribute\n    // to group by, or a function that returns the criterion.\n    _.groupBy = group(function (result, key, value) {\n        _.has(result, key) ? result[key].push(value) : result[key] = [value];\n    });\n\n    // Indexes the object's values by a criterion, similar to `groupBy`, but for\n    // when you know that your index values will be unique.\n    _.indexBy = group(function (result, key, value) {\n        result[key] = value;\n    });\n\n    // Counts instances of an object that group by a certain criterion. Pass\n    // either a string attribute to count by, or a function that returns the\n    // criterion.\n    _.countBy = group(function (result, key) {\n        _.has(result, key) ? result[key]++ : result[key] = 1;\n    });\n\n    // Use a comparator function to figure out the smallest index at which\n    // an object should be inserted so as to maintain order. Uses binary search.\n    _.sortedIndex = function (array, obj, iterator, context) {\n        iterator = lookupIterator(iterator);\n        var value = iterator.call(context, obj);\n        var low = 0, high = array.length;\n        while (low < high) {\n            var mid = (low + high) >>> 1;\n            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n        }\n        return low;\n    };\n\n    // Safely create a real, live array from anything iterable.\n    _.toArray = function (obj) {\n        if (!obj)\n            return [];\n        if (_.isArray(obj))\n            return slice.call(obj);\n        if (obj.length === +obj.length)\n            return _.map(obj, _.identity);\n        return _.values(obj);\n    };\n\n    // Return the number of elements in an object.\n    _.size = function (obj) {\n        if (obj == null)\n            return 0;\n        return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n    };\n\n    // Array Functions\n    // ---------------\n\n    // Get the first element of an array. Passing **n** will return the first N\n    // values in the array. Aliased as `head` and `take`. The **guard** check\n    // allows it to work with `_.map`.\n    _.first = _.head = _.take = function (array, n, guard) {\n        if (array == null)\n            return void 0;\n        if ((n == null) || guard)\n            return array[0];\n        if (n < 0)\n            return [];\n        return slice.call(array, 0, n);\n    };\n\n    // Returns everything but the last entry of the array. Especially useful on\n    // the arguments object. Passing **n** will return all the values in\n    // the array, excluding the last N. The **guard** check allows it to work with\n    // `_.map`.\n    _.initial = function (array, n, guard) {\n        return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n    };\n\n    // Get the last element of an array. Passing **n** will return the last N\n    // values in the array. The **guard** check allows it to work with `_.map`.\n    _.last = function (array, n, guard) {\n        if (array == null)\n            return void 0;\n        if ((n == null) || guard)\n            return array[array.length - 1];\n        return slice.call(array, Math.max(array.length - n, 0));\n    };\n\n    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n    // Especially useful on the arguments object. Passing an **n** will return\n    // the rest N values in the array. The **guard**\n    // check allows it to work with `_.map`.\n    _.rest = _.tail = _.drop = function (array, n, guard) {\n        return slice.call(array, (n == null) || guard ? 1 : n);\n    };\n\n    // Trim out all falsy values from an array.\n    _.compact = function (array) {\n        return _.filter(array, _.identity);\n    };\n\n    // Internal implementation of a recursive `flatten` function.\n    var flatten = function (input, shallow, output) {\n        if (shallow && _.every(input, _.isArray)) {\n            return concat.apply(output, input);\n        }\n        each(input, function (value) {\n            if (_.isArray(value) || _.isArguments(value)) {\n                shallow ? push.apply(output, value) : flatten(value, shallow, output);\n            } else {\n                output.push(value);\n            }\n        });\n        return output;\n    };\n\n    // Flatten out an array, either recursively (by default), or just one level.\n    _.flatten = function (array, shallow) {\n        return flatten(array, shallow, []);\n    };\n\n    // Return a version of the array that does not contain the specified value(s).\n    _.without = function (array) {\n        return _.difference(array, slice.call(arguments, 1));\n    };\n\n    // Split an array into two arrays: one whose elements all satisfy the given\n    // predicate, and one whose elements all do not satisfy the predicate.\n    _.partition = function (array, predicate) {\n        var pass = [], fail = [];\n        each(array, function (elem) {\n            (predicate(elem) ? pass : fail).push(elem);\n        });\n        return [pass, fail];\n    };\n\n    // Produce a duplicate-free version of the array. If the array has already\n    // been sorted, you have the option of using a faster algorithm.\n    // Aliased as `unique`.\n    _.uniq = _.unique = function (array, isSorted, iterator, context) {\n        if (_.isFunction(isSorted)) {\n            context = iterator;\n            iterator = isSorted;\n            isSorted = false;\n        }\n        var initial = iterator ? _.map(array, iterator, context) : array;\n        var results = [];\n        var seen = [];\n        each(initial, function (value, index) {\n            if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n                seen.push(value);\n                results.push(array[index]);\n            }\n        });\n        return results;\n    };\n\n    // Produce an array that contains the union: each distinct element from all of\n    // the passed-in arrays.\n    _.union = function () {\n        return _.uniq(_.flatten(arguments, true));\n    };\n\n    // Produce an array that contains every item shared between all the\n    // passed-in arrays.\n    _.intersection = function (array) {\n        var rest = slice.call(arguments, 1);\n        return _.filter(_.uniq(array), function (item) {\n            return _.every(rest, function (other) {\n                return _.contains(other, item);\n            });\n        });\n    };\n\n    // Take the difference between one array and a number of other arrays.\n    // Only the elements present in just the first array will remain.\n    _.difference = function (array) {\n        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n        return _.filter(array, function (value) {\n            return !_.contains(rest, value);\n        });\n    };\n\n    // Zip together multiple lists into a single array -- elements that share\n    // an index go together.\n    _.zip = function () {\n        var length = _.max(_.pluck(arguments, 'length').concat(0));\n        var results = new Array(length);\n        for (var i = 0; i < length; i++) {\n            results[i] = _.pluck(arguments, '' + i);\n        }\n        return results;\n    };\n\n    // Converts lists into objects. Pass either a single array of `[key, value]`\n    // pairs, or two parallel arrays of the same length -- one of keys, and one of\n    // the corresponding values.\n    _.object = function (list, values) {\n        if (list == null)\n            return {};\n        var result = {};\n        for (var i = 0, length = list.length; i < length; i++) {\n            if (values) {\n                result[list[i]] = values[i];\n            } else {\n                result[list[i][0]] = list[i][1];\n            }\n        }\n        return result;\n    };\n\n    // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n    // we need this function. Return the position of the first occurrence of an\n    // item in an array, or -1 if the item is not included in the array.\n    // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n    // If the array is large and already in sort order, pass `true`\n    // for **isSorted** to use binary search.\n    _.indexOf = function (array, item, isSorted) {\n        if (array == null)\n            return -1;\n        var i = 0, length = array.length;\n        if (isSorted) {\n            if (typeof isSorted == 'number') {\n                i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n            } else {\n                i = _.sortedIndex(array, item);\n                return array[i] === item ? i : -1;\n            }\n        }\n        if (nativeIndexOf && array.indexOf === nativeIndexOf)\n            return array.indexOf(item, isSorted);\n        for (; i < length; i++)\n            if (array[i] === item)\n                return i;\n        return -1;\n    };\n\n    // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n    _.lastIndexOf = function (array, item, from) {\n        if (array == null)\n            return -1;\n        var hasIndex = from != null;\n        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n            return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n        }\n        var i = (hasIndex ? from : array.length);\n        while (i--)\n            if (array[i] === item)\n                return i;\n        return -1;\n    };\n\n    // Generate an integer Array containing an arithmetic progression. A port of\n    // the native Python `range()` function. See\n    // [the Python documentation](http://docs.python.org/library/functions.html#range).\n    _.range = function (start, stop, step) {\n        if (arguments.length <= 1) {\n            stop = start || 0;\n            start = 0;\n        }\n        step = arguments[2] || 1;\n\n        var length = Math.max(Math.ceil((stop - start) / step), 0);\n        var idx = 0;\n        var range = new Array(length);\n\n        while (idx < length) {\n            range[idx++] = start;\n            start += step;\n        }\n\n        return range;\n    };\n\n    // Function (ahem) Functions\n    // ------------------\n\n    // Reusable constructor function for prototype setting.\n    var ctor = function () {\n    };\n\n    // Create a function bound to a given object (assigning `this`, and arguments,\n    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n    // available.\n    _.bind = function (func, context) {\n        var args, bound;\n        if (nativeBind && func.bind === nativeBind)\n            return nativeBind.apply(func, slice.call(arguments, 1));\n        if (!_.isFunction(func))\n            throw new TypeError;\n        args = slice.call(arguments, 2);\n        return bound = function () {\n            if (!(this instanceof bound))\n                return func.apply(context, args.concat(slice.call(arguments)));\n            ctor.prototype = func.prototype;\n            var self = new ctor;\n            ctor.prototype = null;\n            var result = func.apply(self, args.concat(slice.call(arguments)));\n            if (Object(result) === result)\n                return result;\n            return self;\n        };\n    };\n\n    // Partially apply a function by creating a version that has had some of its\n    // arguments pre-filled, without changing its dynamic `this` context. _ acts\n    // as a placeholder, allowing any combination of arguments to be pre-filled.\n    _.partial = function (func) {\n        var boundArgs = slice.call(arguments, 1);\n        return function () {\n            var position = 0;\n            var args = boundArgs.slice();\n            for (var i = 0, length = args.length; i < length; i++) {\n                if (args[i] === _)\n                    args[i] = arguments[position++];\n            }\n            while (position < arguments.length)\n                args.push(arguments[position++]);\n            return func.apply(this, args);\n        };\n    };\n\n    // Bind a number of an object's methods to that object. Remaining arguments\n    // are the method names to be bound. Useful for ensuring that all callbacks\n    // defined on an object belong to it.\n    _.bindAll = function (obj) {\n        var funcs = slice.call(arguments, 1);\n        if (funcs.length === 0)\n            throw new Error('bindAll must be passed function names');\n        each(funcs, function (f) {\n            obj[f] = _.bind(obj[f], obj);\n        });\n        return obj;\n    };\n\n    // Memoize an expensive function by storing its results.\n    _.memoize = function (func, hasher) {\n        var memo = {};\n        hasher || (hasher = _.identity);\n        return function () {\n            var key = hasher.apply(this, arguments);\n            return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n        };\n    };\n\n    // Delays a function for the given number of milliseconds, and then calls\n    // it with the arguments supplied.\n    _.delay = function (func, wait) {\n        var args = slice.call(arguments, 2);\n        return setTimeout(function () {\n            return func.apply(null, args);\n        }, wait);\n    };\n\n    // Defers a function, scheduling it to run after the current call stack has\n    // cleared.\n    _.defer = function (func) {\n        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n    };\n\n    // Returns a function, that, when invoked, will only be triggered at most once\n    // during a given window of time. Normally, the throttled function will run\n    // as much as it can, without ever going more than once per `wait` duration;\n    // but if you'd like to disable the execution on the leading edge, pass\n    // `{leading: false}`. To disable execution on the trailing edge, ditto.\n    _.throttle = function (func, wait, options) {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        options || (options = {});\n        var later = function () {\n            previous = options.leading === false ? 0 : _.now();\n            timeout = null;\n            result = func.apply(context, args);\n            context = args = null;\n        };\n        return function () {\n            var now = _.now();\n            if (!previous && options.leading === false)\n                previous = now;\n            var remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0) {\n                clearTimeout(timeout);\n                timeout = null;\n                previous = now;\n                result = func.apply(context, args);\n                context = args = null;\n            } else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n    };\n\n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    _.debounce = function (func, wait, immediate) {\n        var timeout, args, context, timestamp, result;\n\n        var later = function () {\n            var last = _.now() - timestamp;\n            if (last < wait) {\n                timeout = setTimeout(later, wait - last);\n            } else {\n                timeout = null;\n                if (!immediate) {\n                    result = func.apply(context, args);\n                    context = args = null;\n                }\n            }\n        };\n\n        return function () {\n            context = this;\n            args = arguments;\n            timestamp = _.now();\n            var callNow = immediate && !timeout;\n            if (!timeout) {\n                timeout = setTimeout(later, wait);\n            }\n            if (callNow) {\n                result = func.apply(context, args);\n                context = args = null;\n            }\n\n            return result;\n        };\n    };\n\n    // Returns a function that will be executed at most one time, no matter how\n    // often you call it. Useful for lazy initialization.\n    _.once = function (func) {\n        var ran = false, memo;\n        return function () {\n            if (ran)\n                return memo;\n            ran = true;\n            memo = func.apply(this, arguments);\n            func = null;\n            return memo;\n        };\n    };\n\n    // Returns the first function passed as an argument to the second,\n    // allowing you to adjust arguments, run code before and after, and\n    // conditionally execute the original function.\n    _.wrap = function (func, wrapper) {\n        return _.partial(wrapper, func);\n    };\n\n    // Returns a function that is the composition of a list of functions, each\n    // consuming the return value of the function that follows.\n    _.compose = function () {\n        var funcs = arguments;\n        return function () {\n            var args = arguments;\n            for (var i = funcs.length - 1; i >= 0; i--) {\n                args = [funcs[i].apply(this, args)];\n            }\n            return args[0];\n        };\n    };\n\n    // Returns a function that will only be executed after being called N times.\n    _.after = function (times, func) {\n        return function () {\n            if (--times < 1) {\n                return func.apply(this, arguments);\n            }\n        };\n    };\n\n    // Object Functions\n    // ----------------\n\n    // Retrieve the names of an object's properties.\n    // Delegates to **ECMAScript 5**'s native `Object.keys`\n    _.keys = function (obj) {\n        if (!_.isObject(obj))\n            return [];\n        if (nativeKeys)\n            return nativeKeys(obj);\n        var keys = [];\n        for (var key in obj)\n            if (_.has(obj, key))\n                keys.push(key);\n        return keys;\n    };\n\n    // Retrieve the values of an object's properties.\n    _.values = function (obj) {\n        var keys = _.keys(obj);\n        var length = keys.length;\n        var values = new Array(length);\n        for (var i = 0; i < length; i++) {\n            values[i] = obj[keys[i]];\n        }\n        return values;\n    };\n\n    // Convert an object into a list of `[key, value]` pairs.\n    _.pairs = function (obj) {\n        var keys = _.keys(obj);\n        var length = keys.length;\n        var pairs = new Array(length);\n        for (var i = 0; i < length; i++) {\n            pairs[i] = [keys[i], obj[keys[i]]];\n        }\n        return pairs;\n    };\n\n    // Invert the keys and values of an object. The values must be serializable.\n    _.invert = function (obj) {\n        var result = {};\n        var keys = _.keys(obj);\n        for (var i = 0, length = keys.length; i < length; i++) {\n            result[obj[keys[i]]] = keys[i];\n        }\n        return result;\n    };\n\n    // Return a sorted list of the function names available on the object.\n    // Aliased as `methods`\n    _.functions = _.methods = function (obj) {\n        var names = [];\n        for (var key in obj) {\n            if (_.isFunction(obj[key]))\n                names.push(key);\n        }\n        return names.sort();\n    };\n\n    // Extend a given object with all the properties in passed-in object(s).\n    _.extend = function (obj) {\n        each(slice.call(arguments, 1), function (source) {\n            if (source) {\n                for (var prop in source) {\n                    obj[prop] = source[prop];\n                }\n            }\n        });\n        return obj;\n    };\n\n    // Return a copy of the object only containing the whitelisted properties.\n    _.pick = function (obj) {\n        var copy = {};\n        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n        each(keys, function (key) {\n            if (key in obj)\n                copy[key] = obj[key];\n        });\n        return copy;\n    };\n\n    // Return a copy of the object without the blacklisted properties.\n    _.omit = function (obj) {\n        var copy = {};\n        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n        for (var key in obj) {\n            if (!_.contains(keys, key))\n                copy[key] = obj[key];\n        }\n        return copy;\n    };\n\n    // Fill in a given object with default properties.\n    _.defaults = function (obj) {\n        each(slice.call(arguments, 1), function (source) {\n            if (source) {\n                for (var prop in source) {\n                    if (obj[prop] === void 0)\n                        obj[prop] = source[prop];\n                }\n            }\n        });\n        return obj;\n    };\n\n    // Create a (shallow-cloned) duplicate of an object.\n    _.clone = function (obj) {\n        if (!_.isObject(obj))\n            return obj;\n        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n    };\n\n    // Invokes interceptor with the obj, and then returns obj.\n    // The primary purpose of this method is to \"tap into\" a method chain, in\n    // order to perform operations on intermediate results within the chain.\n    _.tap = function (obj, interceptor) {\n        interceptor(obj);\n        return obj;\n    };\n\n    // Internal recursive comparison function for `isEqual`.\n    var eq = function (a, b, aStack, bStack) {\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n        if (a === b)\n            return a !== 0 || 1 / a == 1 / b;\n        // A strict comparison is necessary because `null == undefined`.\n        if (a == null || b == null)\n            return a === b;\n        // Unwrap any wrapped objects.\n        if (a instanceof _)\n            a = a._wrapped;\n        if (b instanceof _)\n            b = b._wrapped;\n        // Compare `[[Class]]` names.\n        var className = toString.call(a);\n        if (className != toString.call(b))\n            return false;\n        switch (className) {\n            // Strings, numbers, dates, and booleans are compared by value.\n            case '[object String]':\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n                // equivalent to `new String(\"5\")`.\n                return a == String(b);\n            case '[object Number]':\n                // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n                // other numeric values.\n                return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n            case '[object Date]':\n            case '[object Boolean]':\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n                // millisecond representations. Note that invalid dates with millisecond representations\n                // of `NaN` are not equivalent.\n                return +a == +b;\n                // RegExps are compared by their source patterns and flags.\n            case '[object RegExp]':\n                return a.source == b.source &&\n                    a.global == b.global &&\n                    a.multiline == b.multiline &&\n                    a.ignoreCase == b.ignoreCase;\n        }\n        if (typeof a != 'object' || typeof b != 'object')\n            return false;\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n        var length = aStack.length;\n        while (length--) {\n            // Linear search. Performance is inversely proportional to the number of\n            // unique nested structures.\n            if (aStack[length] == a)\n                return bStack[length] == b;\n        }\n        // Objects with different constructors are not equivalent, but `Object`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n            _.isFunction(bCtor) && (bCtor instanceof bCtor))\n            && ('constructor' in a && 'constructor' in b)) {\n            return false;\n        }\n        // Add the first object to the stack of traversed objects.\n        aStack.push(a);\n        bStack.push(b);\n        var size = 0, result = true;\n        // Recursively compare objects and arrays.\n        if (className == '[object Array]') {\n            // Compare array lengths to determine if a deep comparison is necessary.\n            size = a.length;\n            result = size == b.length;\n            if (result) {\n                // Deep compare the contents, ignoring non-numeric properties.\n                while (size--) {\n                    if (!(result = eq(a[size], b[size], aStack, bStack)))\n                        break;\n                }\n            }\n        } else {\n            // Deep compare objects.\n            for (var key in a) {\n                if (_.has(a, key)) {\n                    // Count the expected number of properties.\n                    size++;\n                    // Deep compare each member.\n                    if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))\n                        break;\n                }\n            }\n            // Ensure that both objects contain the same number of properties.\n            if (result) {\n                for (key in b) {\n                    if (_.has(b, key) && !(size--))\n                        break;\n                }\n                result = !size;\n            }\n        }\n        // Remove the first object from the stack of traversed objects.\n        aStack.pop();\n        bStack.pop();\n        return result;\n    };\n\n    // Perform a deep comparison to check if two objects are equal.\n    _.isEqual = function (a, b) {\n        return eq(a, b, [], []);\n    };\n\n    // Is a given array, string, or object empty?\n    // An \"empty\" object has no enumerable own-properties.\n    _.isEmpty = function (obj) {\n        if (obj == null)\n            return true;\n        if (_.isArray(obj) || _.isString(obj))\n            return obj.length === 0;\n        for (var key in obj)\n            if (_.has(obj, key))\n                return false;\n        return true;\n    };\n\n    // Is a given value a DOM element?\n    _.isElement = function (obj) {\n        return !!(obj && obj.nodeType === 1);\n    };\n\n    // Is a given value an array?\n    // Delegates to ECMA5's native Array.isArray\n    _.isArray = nativeIsArray || function (obj) {\n        return toString.call(obj) == '[object Array]';\n    };\n\n    // Is a given variable an object?\n    _.isObject = function (obj) {\n        return obj === Object(obj);\n    };\n\n    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n    each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {\n        _['is' + name] = function (obj) {\n            return toString.call(obj) == '[object ' + name + ']';\n        };\n    });\n\n    // Define a fallback version of the method in browsers (ahem, IE), where\n    // there isn't any inspectable \"Arguments\" type.\n    if (!_.isArguments(arguments)) {\n        _.isArguments = function (obj) {\n            return !!(obj && _.has(obj, 'callee'));\n        };\n    }\n\n    // Optimize `isFunction` if appropriate.\n    if (true) {\n        _.isFunction = function (obj) {\n            return typeof obj === 'function';\n        };\n    }\n\n    // Is a given object a finite number?\n    _.isFinite = function (obj) {\n        return isFinite(obj) && !isNaN(parseFloat(obj));\n    };\n\n    // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n    _.isNaN = function (obj) {\n        return _.isNumber(obj) && obj != +obj;\n    };\n\n    // Is a given value a boolean?\n    _.isBoolean = function (obj) {\n        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n    };\n\n    // Is a given value equal to null?\n    _.isNull = function (obj) {\n        return obj === null;\n    };\n\n    // Is a given variable undefined?\n    _.isUndefined = function (obj) {\n        return obj === void 0;\n    };\n\n    // Shortcut function for checking if an object has a given property directly\n    // on itself (in other words, not on a prototype).\n    _.has = function (obj, key) {\n        return hasOwnProperty.call(obj, key);\n    };\n\n    // Utility Functions\n    // -----------------\n\n    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n    // previous owner. Returns a reference to the Underscore object.\n    _.noConflict = function () {\n        root._ = previousUnderscore;\n        return this;\n    };\n\n    // Keep the identity function around for default iterators.\n    _.identity = function (value) {\n        return value;\n    };\n\n    _.constant = function (value) {\n        return function () {\n            return value;\n        };\n    };\n\n    _.property = function (key) {\n        return function (obj) {\n            return obj[key];\n        };\n    };\n\n    // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n    _.matches = function (attrs) {\n        return function (obj) {\n            if (obj === attrs)\n                return true; //avoid comparing an object to itself.\n            for (var key in attrs) {\n                if (attrs[key] !== obj[key])\n                    return false;\n            }\n            return true;\n        }\n    };\n\n    // Run a function **n** times.\n    _.times = function (n, iterator, context) {\n        var accum = Array(Math.max(0, n));\n        for (var i = 0; i < n; i++)\n            accum[i] = iterator.call(context, i);\n        return accum;\n    };\n\n    // Return a random integer between min and max (inclusive).\n    _.random = function (min, max) {\n        if (max == null) {\n            max = min;\n            min = 0;\n        }\n        return min + Math.floor(Math.random() * (max - min + 1));\n    };\n\n    // A (possibly faster) way to get the current timestamp as an integer.\n    _.now = Date.now || function () {\n        return new Date().getTime();\n    };\n\n    // List of HTML entities for escaping.\n    var entityMap = {\n        escape: {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#x27;'\n        }\n    };\n    entityMap.unescape = _.invert(entityMap.escape);\n\n    // Regexes containing the keys and values listed immediately above.\n    var entityRegexes = {\n        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n    };\n\n    // Functions for escaping and unescaping strings to/from HTML interpolation.\n    _.each(['escape', 'unescape'], function (method) {\n        _[method] = function (string) {\n            if (string == null)\n                return '';\n            return ('' + string).replace(entityRegexes[method], function (match) {\n                return entityMap[method][match];\n            });\n        };\n    });\n\n    // If the value of the named `property` is a function then invoke it with the\n    // `object` as context; otherwise, return it.\n    _.result = function (object, property) {\n        if (object == null)\n            return void 0;\n        var value = object[property];\n        return _.isFunction(value) ? value.call(object) : value;\n    };\n\n    // Add your own custom functions to the Underscore object.\n    _.mixin = function (obj) {\n        each(_.functions(obj), function (name) {\n            var func = _[name] = obj[name];\n            _.prototype[name] = function () {\n                var args = [this._wrapped];\n                push.apply(args, arguments);\n                return result.call(this, func.apply(_, args));\n            };\n        });\n    };\n\n    // Generate a unique integer id (unique within the entire client session).\n    // Useful for temporary DOM ids.\n    var idCounter = 0;\n    _.uniqueId = function (prefix) {\n        var id = ++idCounter + '';\n        return prefix ? prefix + id : id;\n    };\n\n    // By default, Underscore uses ERB-style template delimiters, change the\n    // following template settings to use alternative delimiters.\n    _.templateSettings = {\n        evaluate: /<%([\\s\\S]+?)%>/g,\n        interpolate: /<%=([\\s\\S]+?)%>/g,\n        escape: /<%-([\\s\\S]+?)%>/g\n    };\n\n    // When customizing `templateSettings`, if you don't want to define an\n    // interpolation, evaluation or escaping regex, we need one that is\n    // guaranteed not to match.\n    var noMatch = /(.)^/;\n\n    // Certain characters need to be escaped so that they can be put into a\n    // string literal.\n    var escapes = {\n        \"'\": \"'\",\n        '\\\\': '\\\\',\n        '\\r': 'r',\n        '\\n': 'n',\n        '\\t': 't',\n        '\\u2028': 'u2028',\n        '\\u2029': 'u2029'\n    };\n\n    var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n    // JavaScript micro-templating, similar to John Resig's implementation.\n    // Underscore templating handles arbitrary delimiters, preserves whitespace,\n    // and correctly escapes quotes within interpolated code.\n    _.template = function (text, data, settings) {\n        var render;\n        settings = _.defaults({}, settings, _.templateSettings);\n\n        // Combine delimiters into one regular expression via alternation.\n        var matcher = new RegExp([\n            (settings.escape || noMatch).source,\n            (settings.interpolate || noMatch).source,\n            (settings.evaluate || noMatch).source\n        ].join('|') + '|$', 'g');\n\n        // Compile the template source, escaping string literals appropriately.\n        var index = 0;\n        var source = \"__p+='\";\n        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n            source += text.slice(index, offset)\n                .replace(escaper, function (match) {\n                    return '\\\\' + escapes[match];\n                });\n\n            if (escape) {\n                source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n            }\n            if (interpolate) {\n                source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n            }\n            if (evaluate) {\n                source += \"';\\n\" + evaluate + \"\\n__p+='\";\n            }\n            index = offset + match.length;\n            return match;\n        });\n        source += \"';\\n\";\n\n        // If a variable is not specified, place data values in local scope.\n        if (!settings.variable)\n            source = 'with(obj||{}){\\n' + source + '}\\n';\n\n        source = \"var __t,__p='',__j=Array.prototype.join,\" +\n            \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n            source + \"return __p;\\n\";\n\n        try {\n            render = new Function(settings.variable || 'obj', '_', source);\n        } catch (e) {\n            e.source = source;\n            throw e;\n        }\n\n        if (data)\n            return render(data, _);\n        var template = function (data) {\n            return render.call(this, data, _);\n        };\n\n        // Provide the compiled function source as a convenience for precompilation.\n        template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n        return template;\n    };\n\n    // Add a \"chain\" function, which will delegate to the wrapper.\n    _.chain = function (obj) {\n        return _(obj).chain();\n    };\n\n    // OOP\n    // ---------------\n    // If Underscore is called as a function, it returns a wrapped object that\n    // can be used OO-style. This wrapper holds altered versions of all the\n    // underscore functions. Wrapped objects may be chained.\n\n    // Helper function to continue chaining intermediate results.\n    var result = function (obj) {\n        return this._chain ? _(obj).chain() : obj;\n    };\n\n    // Add all of the Underscore functions to the wrapper object.\n    _.mixin(_);\n\n    // Add all mutator Array functions to the wrapper.\n    each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n        var method = ArrayProto[name];\n        _.prototype[name] = function () {\n            var obj = this._wrapped;\n            method.apply(obj, arguments);\n            if ((name == 'shift' || name == 'splice') && obj.length === 0)\n                delete obj[0];\n            return result.call(this, obj);\n        };\n    });\n\n    // Add all accessor Array functions to the wrapper.\n    each(['concat', 'join', 'slice'], function (name) {\n        var method = ArrayProto[name];\n        _.prototype[name] = function () {\n            return result.call(this, method.apply(this._wrapped, arguments));\n        };\n    });\n\n    _.extend(_.prototype, {\n        // Start chaining a wrapped Underscore object.\n        chain: function () {\n            this._chain = true;\n            return this;\n        },\n        // Extracts the result from a wrapped and chained object.\n        value: function () {\n            return this._wrapped;\n        }\n\n    });\n\n    // AMD registration happens at the end for compatibility with AMD loaders\n    // that may not enforce next-turn semantics on modules. Even though general\n    // practice for AMD registration is to be anonymous, underscore registers\n    // as a named module because, like jQuery, it is a base library that is\n    // popular enough to be bundled in a third party lib, but not be part of\n    // an AMD load request. Those cases could generate an error when an\n    // anonymous define() is called outside of a loader request.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return _;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n}).call(this);\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = _;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\nvar jquery = __webpack_require__(2);\n\n/*\n Highcharts JS v4.1.8 (2015-08-20)\n\n (c) 2009-2014 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function(){function A(){var a,b=arguments,c,d={},e=function(a,b){var c,d;typeof a!==\"object\"&&(a={});for(d in b)b.hasOwnProperty(d)&&(c=b[d],a[d]=c&&typeof c===\"object\"&&Object.prototype.toString.call(c)!==\"[object Array]\"&&d!==\"renderTo\"&&typeof c.nodeType!==\"number\"?e(a[d]||{},c):b[d]);return a};b[0]===!0&&(d=b[1],b=Array.prototype.slice.call(b,2));c=b.length;for(a=0;a<c;a++)d=e(d,b[a]);return d}function F(a,b){return parseInt(a,b||10)}function Aa(a){return typeof a===\"string\"}function da(a){return a&&\ntypeof a===\"object\"}function Fa(a){return Object.prototype.toString.call(a)===\"[object Array]\"}function qa(a){return typeof a===\"number\"}function Ba(a){return W.log(a)/W.LN10}function ia(a){return W.pow(10,a)}function ja(a,b){for(var c=a.length;c--;)if(a[c]===b){a.splice(c,1);break}}function s(a){return a!==v&&a!==null}function J(a,b,c){var d,e;if(Aa(b))s(c)?a.setAttribute(b,c):a&&a.getAttribute&&(e=a.getAttribute(b));else if(s(b)&&da(b))for(d in b)a.setAttribute(d,b[d]);return e}function ra(a){return Fa(a)?\na:[a]}function L(a,b){if(xa&&!ca&&b&&b.opacity!==v)b.filter=\"alpha(opacity=\"+b.opacity*100+\")\";r(a.style,b)}function $(a,b,c,d,e){a=C.createElement(a);b&&r(a,b);e&&L(a,{padding:0,border:O,margin:0});c&&L(a,c);d&&d.appendChild(a);return a}function ka(a,b){var c=function(){return v};c.prototype=new a;r(c.prototype,b);return c}function Ga(a,b){return Array((b||2)+1-String(a).length).join(0)+a}function Va(a){return(bb&&bb(a)||mb||0)*6E4}function Ha(a,b){for(var c=\"{\",d=!1,e,f,g,h,i,j=[];(c=a.indexOf(c))!==\n-1;){e=a.slice(0,c);if(d){f=e.split(\":\");g=f.shift().split(\".\");i=g.length;e=b;for(h=0;h<i;h++)e=e[g[h]];if(f.length)f=f.join(\":\"),g=/\\.([0-9])/,h=S.lang,i=void 0,/f$/.test(f)?(i=(i=f.match(g))?i[1]:-1,e!==null&&(e=B.numberFormat(e,i,h.decimalPoint,f.indexOf(\",\")>-1?h.thousandsSep:\"\"))):e=Ma(f,e)}j.push(e);a=a.slice(c+1);c=(d=!d)?\"}\":\"{\"}j.push(a);return j.join(\"\")}function nb(a){return W.pow(10,V(W.log(a)/W.LN10))}function ob(a,b,c,d,e){var f,g=a,c=p(c,1);f=a/c;b||(b=[1,2,2.5,5,10],d===!1&&(c===\n1?b=[1,2,5,10]:c<=0.1&&(b=[1/c])));for(d=0;d<b.length;d++)if(g=b[d],e&&g*c>=a||!e&&f<=(b[d]+(b[d+1]||b[d]))/2)break;g*=c;return g}function pb(a,b){var c=a.length,d,e;for(e=0;e<c;e++)a[e].ss_i=e;a.sort(function(a,c){d=b(a,c);return d===0?a.ss_i-c.ss_i:d});for(e=0;e<c;e++)delete a[e].ss_i}function Na(a){for(var b=a.length,c=a[0];b--;)a[b]<c&&(c=a[b]);return c}function Ca(a){for(var b=a.length,c=a[0];b--;)a[b]>c&&(c=a[b]);return c}function Oa(a,b){for(var c in a)a[c]&&a[c]!==b&&a[c].destroy&&a[c].destroy(),\ndelete a[c]}function Pa(a){cb||(cb=$(Ia));a&&cb.appendChild(a);cb.innerHTML=\"\"}function la(a,b){var c=\"Highcharts error #\"+a+\": www.highcharts.com/errors/\"+a;if(b)throw c;K.console&&console.log(c)}function ea(a,b){return parseFloat(a.toPrecision(b||14))}function Qa(a,b){b.renderer.globalAnimation=p(a,b.animation)}function Cb(){var a=S.global,b=a.useUTC,c=b?\"getUTC\":\"get\",d=b?\"setUTC\":\"set\";ya=a.Date||window.Date;mb=b&&a.timezoneOffset;bb=b&&a.getTimezoneOffset;db=function(a,c,d,h,i,j){var k;b?(k=\nya.UTC.apply(0,arguments),k+=Va(k)):k=(new ya(a,c,p(d,1),p(h,0),p(i,0),p(j,0))).getTime();return k};qb=c+\"Minutes\";rb=c+\"Hours\";sb=c+\"Day\";Wa=c+\"Date\";Xa=c+\"Month\";Ya=c+\"FullYear\";Db=d+\"Milliseconds\";Eb=d+\"Seconds\";Fb=d+\"Minutes\";Gb=d+\"Hours\";tb=d+\"Date\";ub=d+\"Month\";vb=d+\"FullYear\"}function P(){}function Ra(a,b,c,d){this.axis=a;this.pos=b;this.type=c||\"\";this.isNew=!0;!c&&!d&&this.addLabel()}function Hb(a,b,c,d,e){var f=a.chart.inverted;this.axis=a;this.isNegative=c;this.options=b;this.x=d;this.total=\nnull;this.points={};this.stack=e;this.alignOptions={align:b.align||(f?c?\"left\":\"right\":\"center\"),verticalAlign:b.verticalAlign||(f?\"middle\":c?\"bottom\":\"top\"),y:p(b.y,f?4:c?14:-6),x:p(b.x,f?c?-6:6:0)};this.textAlign=b.textAlign||(f?c?\"right\":\"left\":\"center\")}var v,C=document,K=window,W=Math,w=W.round,V=W.floor,sa=W.ceil,t=W.max,z=W.min,N=W.abs,X=W.cos,aa=W.sin,ma=W.PI,ga=ma*2/360,za=navigator.userAgent,Ib=K.opera,xa=/(msie|trident)/i.test(za)&&!Ib,eb=C.documentMode===8,fb=/AppleWebKit/.test(za),Ja=\n/Firefox/.test(za),Jb=/(Mobile|Android|Windows Phone)/.test(za),Da=\"http://www.w3.org/2000/svg\",ca=!!C.createElementNS&&!!C.createElementNS(Da,\"svg\").createSVGRect,Nb=Ja&&parseInt(za.split(\"Firefox/\")[1],10)<4,fa=!ca&&!xa&&!!C.createElement(\"canvas\").getContext,Za,$a,Kb={},wb=0,cb,S,Ma,xb,E,ta=function(){return v},Y=[],ab=0,Ia=\"div\",O=\"none\",Ob=/^[0-9]+$/,gb=[\"plotTop\",\"marginRight\",\"marginBottom\",\"plotLeft\"],Pb=\"stroke-width\",ya,db,mb,bb,qb,rb,sb,Wa,Xa,Ya,Db,Eb,Fb,Gb,tb,ub,vb,M={},B;B=K.Highcharts=\nK.Highcharts?la(16,!0):{};B.seriesTypes=M;var r=B.extend=function(a,b){var c;a||(a={});for(c in b)a[c]=b[c];return a},p=B.pick=function(){var a=arguments,b,c,d=a.length;for(b=0;b<d;b++)if(c=a[b],c!==v&&c!==null)return c},Sa=B.wrap=function(a,b,c){var d=a[b];a[b]=function(){var a=Array.prototype.slice.call(arguments);a.unshift(d);return c.apply(this,a)}};Ma=function(a,b,c){if(!s(b)||isNaN(b))return S.lang.invalidDate||\"\";var a=p(a,\"%Y-%m-%d %H:%M:%S\"),d=new ya(b-Va(b)),e,f=d[rb](),g=d[sb](),h=d[Wa](),\ni=d[Xa](),j=d[Ya](),k=S.lang,m=k.weekdays,d=r({a:m[g].substr(0,3),A:m[g],d:Ga(h),e:h,w:g,b:k.shortMonths[i],B:k.months[i],m:Ga(i+1),y:j.toString().substr(2,2),Y:j,H:Ga(f),k:f,I:Ga(f%12||12),l:f%12||12,M:Ga(d[qb]()),p:f<12?\"AM\":\"PM\",P:f<12?\"am\":\"pm\",S:Ga(d.getSeconds()),L:Ga(w(b%1E3),3)},B.dateFormats);for(e in d)for(;a.indexOf(\"%\"+e)!==-1;)a=a.replace(\"%\"+e,typeof d[e]===\"function\"?d[e](b):d[e]);return c?a.substr(0,1).toUpperCase()+a.substr(1):a};E={millisecond:1,second:1E3,minute:6E4,hour:36E5,day:864E5,\nweek:6048E5,month:24192E5,year:314496E5};B.numberFormat=function(a,b,c,d){var e=S.lang,a=+a||0,f=b===-1?z((a.toString().split(\".\")[1]||\"\").length,20):isNaN(b=N(b))?2:b,b=c===void 0?e.decimalPoint:c,d=d===void 0?e.thousandsSep:d,e=a<0?\"-\":\"\",c=String(F(a=N(a).toFixed(f))),g=c.length>3?c.length%3:0;return e+(g?c.substr(0,g)+d:\"\")+c.substr(g).replace(/(\\d{3})(?=\\d)/g,\"$1\"+d)+(f?b+N(a-c).toFixed(f).slice(2):\"\")};xb={init:function(a,b,c){var b=b||\"\",d=a.shift,e=b.indexOf(\"C\")>-1,f=e?7:3,g,b=b.split(\" \"),\nc=[].concat(c),h,i,j=function(a){for(g=a.length;g--;)a[g]===\"M\"&&a.splice(g+1,0,a[g+1],a[g+2],a[g+1],a[g+2])};e&&(j(b),j(c));a.isArea&&(h=b.splice(b.length-6,6),i=c.splice(c.length-6,6));if(d<=c.length/f&&b.length===c.length)for(;d--;)c=[].concat(c).splice(0,f).concat(c);a.shift=0;if(b.length)for(a=c.length;b.length<a;)d=[].concat(b).splice(b.length-f,f),e&&(d[f-6]=d[f-2],d[f-5]=d[f-1]),b=b.concat(d);h&&(b=b.concat(h),c=c.concat(i));return[b,c]},step:function(a,b,c,d){var e=[],f=a.length;if(c===1)e=\nd;else if(f===b.length&&c<1)for(;f--;)d=parseFloat(a[f]),e[f]=isNaN(d)?a[f]:c*parseFloat(b[f]-d)+d;else e=b;return e}};(function(a){K.HighchartsAdapter=K.HighchartsAdapter||a&&{init:function(b){var c=a.fx;a.extend(a.easing,{easeOutQuad:function(a,b,c,g,h){return-g*(b/=h)*(b-2)+c}});a.each([\"cur\",\"_default\",\"width\",\"height\",\"opacity\"],function(b,e){var f=c.step,g;e===\"cur\"?f=c.prototype:e===\"_default\"&&a.Tween&&(f=a.Tween.propHooks[e],e=\"set\");(g=f[e])&&(f[e]=function(a){var c,a=b?a:this;if(a.prop!==\n\"align\")return c=a.elem,c.attr?c.attr(a.prop,e===\"cur\"?v:a.now):g.apply(this,arguments)})});Sa(a.cssHooks.opacity,\"get\",function(a,b,c){return b.attr?b.opacity||0:a.call(this,b,c)});this.addAnimSetter(\"d\",function(a){var c=a.elem,f;if(!a.started)f=b.init(c,c.d,c.toD),a.start=f[0],a.end=f[1],a.started=!0;c.attr(\"d\",b.step(a.start,a.end,a.pos,c.toD))});this.each=Array.prototype.forEach?function(a,b){return Array.prototype.forEach.call(a,b)}:function(a,b){var c,g=a.length;for(c=0;c<g;c++)if(b.call(a[c],\na[c],c,a)===!1)return c};a.fn.highcharts=function(){var a=\"Chart\",b=arguments,c,g;if(this[0]){Aa(b[0])&&(a=b[0],b=Array.prototype.slice.call(b,1));c=b[0];if(c!==v)c.chart=c.chart||{},c.chart.renderTo=this[0],new B[a](c,b[1]),g=this;c===v&&(g=Y[J(this[0],\"data-highcharts-chart\")])}return g}},addAnimSetter:function(b,c){a.Tween?a.Tween.propHooks[b]={set:c}:a.fx.step[b]=c},getScript:a.getScript,inArray:a.inArray,adapterRun:function(b,c){return a(b)[c]()},grep:a.grep,map:function(a,c){for(var d=[],e=\n0,f=a.length;e<f;e++)d[e]=c.call(a[e],a[e],e,a);return d},offset:function(b){return a(b).offset()},addEvent:function(b,c,d){a(b).bind(c,d)},removeEvent:function(b,c,d){var e=C.removeEventListener?\"removeEventListener\":\"detachEvent\";C[e]&&b&&!b[e]&&(b[e]=function(){});a(b).unbind(c,d)},fireEvent:function(b,c,d,e){var f=a.Event(c),g=\"detached\"+c,h;!xa&&d&&(delete d.layerX,delete d.layerY,delete d.returnValue);r(f,d);b[c]&&(b[g]=b[c],b[c]=null);a.each([\"preventDefault\",\"stopPropagation\"],function(a,\nb){var c=f[b];f[b]=function(){try{c.call(f)}catch(a){b===\"preventDefault\"&&(h=!0)}}});a(b).trigger(f);b[g]&&(b[c]=b[g],b[g]=null);e&&!f.isDefaultPrevented()&&!h&&e(f)},washMouseEvent:function(a){var c=a.originalEvent||a;if(c.pageX===v)c.pageX=a.pageX,c.pageY=a.pageY;return c},animate:function(b,c,d){var e=a(b);if(!b.style)b.style={};if(c.d)b.toD=c.d,c.d=1;e.stop();c.opacity!==v&&b.attr&&(c.opacity+=\"px\");b.hasAnim=1;e.animate(c,d)},stop:function(b){b.hasAnim&&a(b).stop()}}})(K.jQuery);var U=K.HighchartsAdapter,\nD=U||{};U&&U.init.call(U,xb);var hb=D.adapterRun,Qb=D.getScript,Ka=D.inArray,o=B.each=D.each,ib=D.grep,Rb=D.offset,Ta=D.map,H=D.addEvent,Z=D.removeEvent,I=D.fireEvent,Sb=D.washMouseEvent,jb=D.animate,kb=D.stop;S={colors:\"#7cb5ec,#434348,#90ed7d,#f7a35c,#8085e9,#f15c80,#e4d354,#2b908f,#f45b5b,#91e8e1\".split(\",\"),symbols:[\"circle\",\"diamond\",\"square\",\"triangle\",\"triangle-down\"],lang:{loading:\"Loading...\",months:\"January,February,March,April,May,June,July,August,September,October,November,December\".split(\",\"),\nshortMonths:\"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\".split(\",\"),weekdays:\"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday\".split(\",\"),decimalPoint:\".\",numericSymbols:\"k,M,G,T,P,E\".split(\",\"),resetZoom:\"Reset zoom\",resetZoomTitle:\"Reset zoom level 1:1\",thousandsSep:\" \"},global:{useUTC:!0,canvasToolsURL:\"http://code.highcharts.com/4.1.8/modules/canvas-tools.js\",VMLRadialGradientURL:\"http://code.highcharts.com/4.1.8/gfx/vml-radial-gradient.png\"},chart:{borderColor:\"#4572A7\",borderRadius:0,\ndefaultSeriesType:\"line\",ignoreHiddenSeries:!0,spacing:[10,10,15,10],backgroundColor:\"#FFFFFF\",plotBorderColor:\"#C0C0C0\",resetZoomButton:{theme:{zIndex:20},position:{align:\"right\",x:-10,y:10}}},title:{text:\"Chart title\",align:\"center\",margin:15,style:{color:\"#333333\",fontSize:\"18px\"}},subtitle:{text:\"\",align:\"center\",style:{color:\"#555555\"}},plotOptions:{line:{allowPointSelect:!1,showCheckbox:!1,animation:{duration:1E3},events:{},lineWidth:2,marker:{lineWidth:0,radius:4,lineColor:\"#FFFFFF\",states:{hover:{enabled:!0,\nlineWidthPlus:1,radiusPlus:2},select:{fillColor:\"#FFFFFF\",lineColor:\"#000000\",lineWidth:2}}},point:{events:{}},dataLabels:{align:\"center\",formatter:function(){return this.y===null?\"\":B.numberFormat(this.y,-1)},style:{color:\"contrast\",fontSize:\"11px\",fontWeight:\"bold\",textShadow:\"0 0 6px contrast, 0 0 3px contrast\"},verticalAlign:\"bottom\",x:0,y:0,padding:5},cropThreshold:300,pointRange:0,states:{hover:{lineWidthPlus:1,marker:{},halo:{size:10,opacity:0.25}},select:{marker:{}}},stickyTracking:!0,turboThreshold:1E3}},\nlabels:{style:{position:\"absolute\",color:\"#3E576F\"}},legend:{enabled:!0,align:\"center\",layout:\"horizontal\",labelFormatter:function(){return this.name},borderColor:\"#909090\",borderRadius:0,navigation:{activeColor:\"#274b6d\",inactiveColor:\"#CCC\"},shadow:!1,itemStyle:{color:\"#333333\",fontSize:\"12px\",fontWeight:\"bold\"},itemHoverStyle:{color:\"#000\"},itemHiddenStyle:{color:\"#CCC\"},itemCheckboxStyle:{position:\"absolute\",width:\"13px\",height:\"13px\"},symbolPadding:5,verticalAlign:\"bottom\",x:0,y:0,title:{style:{fontWeight:\"bold\"}}},\nloading:{labelStyle:{fontWeight:\"bold\",position:\"relative\",top:\"45%\"},style:{position:\"absolute\",backgroundColor:\"white\",opacity:0.5,textAlign:\"center\"}},tooltip:{enabled:!0,animation:ca,backgroundColor:\"rgba(249, 249, 249, .85)\",borderWidth:1,borderRadius:3,dateTimeLabelFormats:{millisecond:\"%A, %b %e, %H:%M:%S.%L\",second:\"%A, %b %e, %H:%M:%S\",minute:\"%A, %b %e, %H:%M\",hour:\"%A, %b %e, %H:%M\",day:\"%A, %b %e, %Y\",week:\"Week from %A, %b %e, %Y\",month:\"%B %Y\",year:\"%Y\"},footerFormat:\"\",headerFormat:'<span style=\"font-size: 10px\">{point.key}</span><br/>',\npointFormat:'<span style=\"color:{point.color}\">\\u25cf</span> {series.name}: <b>{point.y}</b><br/>',shadow:!0,snap:Jb?25:10,style:{color:\"#333333\",cursor:\"default\",fontSize:\"12px\",padding:\"8px\",whiteSpace:\"nowrap\"}},credits:{enabled:!0,text:\"Highcharts.com\",href:\"http://www.highcharts.com\",position:{align:\"right\",x:-10,verticalAlign:\"bottom\",y:-5},style:{cursor:\"pointer\",color:\"#909090\",fontSize:\"9px\"}}};var ba=S.plotOptions,U=ba.line;Cb();var Tb=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,\nUb=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,Vb=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/,na=function(a){var b=[],c,d;(function(a){a&&a.stops?d=Ta(a.stops,function(a){return na(a[1])}):(c=Tb.exec(a))?b=[F(c[1]),F(c[2]),F(c[3]),parseFloat(c[4],10)]:(c=Ub.exec(a))?b=[F(c[1],16),F(c[2],16),F(c[3],16),1]:(c=Vb.exec(a))&&(b=[F(c[1]),F(c[2]),F(c[3]),1])})(a);return{get:function(c){var f;d?(f=A(a),f.stops=[].concat(f.stops),o(d,function(a,b){f.stops[b]=[f.stops[b][0],a.get(c)]})):\nf=b&&!isNaN(b[0])?c===\"rgb\"?\"rgb(\"+b[0]+\",\"+b[1]+\",\"+b[2]+\")\":c===\"a\"?b[3]:\"rgba(\"+b.join(\",\")+\")\":a;return f},brighten:function(a){if(d)o(d,function(b){b.brighten(a)});else if(qa(a)&&a!==0){var c;for(c=0;c<3;c++)b[c]+=F(a*255),b[c]<0&&(b[c]=0),b[c]>255&&(b[c]=255)}return this},rgba:b,setOpacity:function(a){b[3]=a;return this},raw:a}};P.prototype={opacity:1,textProps:\"fontSize,fontWeight,fontFamily,fontStyle,color,lineHeight,width,textDecoration,textOverflow,textShadow\".split(\",\"),init:function(a,\nb){this.element=b===\"span\"?$(b):C.createElementNS(Da,b);this.renderer=a},animate:function(a,b,c){b=p(b,this.renderer.globalAnimation,!0);kb(this);if(b){b=A(b,{});if(c)b.complete=c;jb(this,a,b)}else this.attr(a,null,c);return this},colorGradient:function(a,b,c){var d=this.renderer,e,f,g,h,i,j,k,m,l,n,q=[];a.linearGradient?f=\"linearGradient\":a.radialGradient&&(f=\"radialGradient\");if(f){g=a[f];h=d.gradients;j=a.stops;l=c.radialReference;Fa(g)&&(a[f]=g={x1:g[0],y1:g[1],x2:g[2],y2:g[3],gradientUnits:\"userSpaceOnUse\"});\nf===\"radialGradient\"&&l&&!s(g.gradientUnits)&&(g=A(g,{cx:l[0]-l[2]/2+g.cx*l[2],cy:l[1]-l[2]/2+g.cy*l[2],r:g.r*l[2],gradientUnits:\"userSpaceOnUse\"}));for(n in g)n!==\"id\"&&q.push(n,g[n]);for(n in j)q.push(j[n]);q=q.join(\",\");h[q]?a=h[q].attr(\"id\"):(g.id=a=\"highcharts-\"+wb++,h[q]=i=d.createElement(f).attr(g).add(d.defs),i.stops=[],o(j,function(a){a[1].indexOf(\"rgba\")===0?(e=na(a[1]),k=e.get(\"rgb\"),m=e.get(\"a\")):(k=a[1],m=1);a=d.createElement(\"stop\").attr({offset:a[0],\"stop-color\":k,\"stop-opacity\":m}).add(i);\ni.stops.push(a)}));c.setAttribute(b,\"url(\"+d.url+\"#\"+a+\")\")}},applyTextShadow:function(a){var b=this.element,c,d=a.indexOf(\"contrast\")!==-1,e={},f=this.renderer.forExport||b.style.textShadow!==v&&!xa;if(d)e.textShadow=a=a.replace(/contrast/g,this.renderer.getContrast(b.style.fill));if(fb)e.textRendering=\"geometricPrecision\";f?L(b,e):(this.fakeTS=!0,this.ySetter=this.xSetter,c=[].slice.call(b.getElementsByTagName(\"tspan\")),o(a.split(/\\s?,\\s?/g),function(a){var d=b.firstChild,e,f,a=a.split(\" \");e=a[a.length-\n1];(f=a[a.length-2])&&o(c,function(a,c){var g;c===0&&(a.setAttribute(\"x\",b.getAttribute(\"x\")),c=b.getAttribute(\"y\"),a.setAttribute(\"y\",c||0),c===null&&b.setAttribute(\"y\",0));g=a.cloneNode(1);J(g,{\"class\":\"highcharts-text-shadow\",fill:e,stroke:e,\"stroke-opacity\":1/t(F(f),3),\"stroke-width\":f,\"stroke-linejoin\":\"round\"});b.insertBefore(g,d)})}))},attr:function(a,b,c){var d,e=this.element,f,g=this,h;typeof a===\"string\"&&b!==v&&(d=a,a={},a[d]=b);if(typeof a===\"string\")g=(this[a+\"Getter\"]||this._defaultGetter).call(this,\na,e);else{for(d in a){b=a[d];h=!1;this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(d)&&(f||(this.symbolAttr(a),f=!0),h=!0);if(this.rotation&&(d===\"x\"||d===\"y\"))this.doTransform=!0;h||(this[d+\"Setter\"]||this._defaultSetter).call(this,b,d,e);this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(d)&&this.updateShadows(d,b)}if(this.doTransform)this.updateTransform(),this.doTransform=!1}c&&c();return g},updateShadows:function(a,b){for(var c=this.shadows,\nd=c.length;d--;)c[d].setAttribute(a,a===\"height\"?t(b-(c[d].cutHeight||0),0):a===\"d\"?this.d:b)},addClass:function(a){var b=this.element,c=J(b,\"class\")||\"\";c.indexOf(a)===-1&&J(b,\"class\",c+\" \"+a);return this},symbolAttr:function(a){var b=this;o(\"x,y,r,start,end,width,height,innerR,anchorX,anchorY\".split(\",\"),function(c){b[c]=p(a[c],b[c])});b.attr({d:b.renderer.symbols[b.symbolName](b.x,b.y,b.width,b.height,b)})},clip:function(a){return this.attr(\"clip-path\",a?\"url(\"+this.renderer.url+\"#\"+a.id+\")\":O)},\ncrisp:function(a){var b,c={},d,e=a.strokeWidth||this.strokeWidth||0;d=w(e)%2/2;a.x=V(a.x||this.x||0)+d;a.y=V(a.y||this.y||0)+d;a.width=V((a.width||this.width||0)-2*d);a.height=V((a.height||this.height||0)-2*d);a.strokeWidth=e;for(b in a)this[b]!==a[b]&&(this[b]=c[b]=a[b]);return c},css:function(a){var b=this.styles,c={},d=this.element,e,f,g=\"\";e=!b;if(a&&a.color)a.fill=a.color;if(b)for(f in a)a[f]!==b[f]&&(c[f]=a[f],e=!0);if(e){e=this.textWidth=a&&a.width&&d.nodeName.toLowerCase()===\"text\"&&F(a.width)||\nthis.textWidth;b&&(a=r(b,c));this.styles=a;e&&(fa||!ca&&this.renderer.forExport)&&delete a.width;if(xa&&!ca)L(this.element,a);else{b=function(a,b){return\"-\"+b.toLowerCase()};for(f in a)g+=f.replace(/([A-Z])/g,b)+\":\"+a[f]+\";\";J(d,\"style\",g)}e&&this.added&&this.renderer.buildText(this)}return this},on:function(a,b){var c=this,d=c.element;$a&&a===\"click\"?(d.ontouchstart=function(a){c.touchEventFired=ya.now();a.preventDefault();b.call(d,a)},d.onclick=function(a){(za.indexOf(\"Android\")===-1||ya.now()-\n(c.touchEventFired||0)>1100)&&b.call(d,a)}):d[\"on\"+a]=b;return this},setRadialReference:function(a){this.element.radialReference=a;return this},translate:function(a,b){return this.attr({translateX:a,translateY:b})},invert:function(){this.inverted=!0;this.updateTransform();return this},updateTransform:function(){var a=this.translateX||0,b=this.translateY||0,c=this.scaleX,d=this.scaleY,e=this.inverted,f=this.rotation,g=this.element;e&&(a+=this.attr(\"width\"),b+=this.attr(\"height\"));a=[\"translate(\"+a+\n\",\"+b+\")\"];e?a.push(\"rotate(90) scale(-1,1)\"):f&&a.push(\"rotate(\"+f+\" \"+(g.getAttribute(\"x\")||0)+\" \"+(g.getAttribute(\"y\")||0)+\")\");(s(c)||s(d))&&a.push(\"scale(\"+p(c,1)+\" \"+p(d,1)+\")\");a.length&&g.setAttribute(\"transform\",a.join(\" \"))},toFront:function(){var a=this.element;a.parentNode.appendChild(a);return this},align:function(a,b,c){var d,e,f,g,h={};e=this.renderer;f=e.alignedObjects;if(a){if(this.alignOptions=a,this.alignByTranslate=b,!c||Aa(c))this.alignTo=d=c||\"renderer\",ja(f,this),f.push(this),\nc=null}else a=this.alignOptions,b=this.alignByTranslate,d=this.alignTo;c=p(c,e[d],e);d=a.align;e=a.verticalAlign;f=(c.x||0)+(a.x||0);g=(c.y||0)+(a.y||0);if(d===\"right\"||d===\"center\")f+=(c.width-(a.width||0))/{right:1,center:2}[d];h[b?\"translateX\":\"x\"]=w(f);if(e===\"bottom\"||e===\"middle\")g+=(c.height-(a.height||0))/({bottom:1,middle:2}[e]||1);h[b?\"translateY\":\"y\"]=w(g);this[this.placed?\"animate\":\"attr\"](h);this.placed=!0;this.alignAttr=h;return this},getBBox:function(a){var b,c=this.renderer,d,e=this.rotation,\nf=this.element,g=this.styles,h=e*ga;d=this.textStr;var i,j=f.style,k,m;d!==v&&(m=[\"\",e||0,g&&g.fontSize,f.style.width].join(\",\"),m=d===\"\"||Ob.test(d)?\"num:\"+d.toString().length+m:d+m);m&&!a&&(b=c.cache[m]);if(!b){if(f.namespaceURI===Da||c.forExport){try{k=this.fakeTS&&function(a){o(f.querySelectorAll(\".highcharts-text-shadow\"),function(b){b.style.display=a})},Ja&&j.textShadow?(i=j.textShadow,j.textShadow=\"\"):k&&k(O),b=f.getBBox?r({},f.getBBox()):{width:f.offsetWidth,height:f.offsetHeight},i?j.textShadow=\ni:k&&k(\"\")}catch(l){}if(!b||b.width<0)b={width:0,height:0}}else b=this.htmlGetBBox();if(c.isSVG){a=b.width;d=b.height;if(xa&&g&&g.fontSize===\"11px\"&&d.toPrecision(3)===\"16.9\")b.height=d=14;if(e)b.width=N(d*aa(h))+N(a*X(h)),b.height=N(d*X(h))+N(a*aa(h))}m&&(c.cache[m]=b)}return b},show:function(a){return this.attr({visibility:a?\"inherit\":\"visible\"})},hide:function(){return this.attr({visibility:\"hidden\"})},fadeOut:function(a){var b=this;b.animate({opacity:0},{duration:a||150,complete:function(){b.attr({y:-9999})}})},\nadd:function(a){var b=this.renderer,c=this.element,d;if(a)this.parentGroup=a;this.parentInverted=a&&a.inverted;this.textStr!==void 0&&b.buildText(this);this.added=!0;if(!a||a.handleZ||this.zIndex)d=this.zIndexSetter();d||(a?a.element:b.box).appendChild(c);if(this.onAdd)this.onAdd();return this},safeRemoveChild:function(a){var b=a.parentNode;b&&b.removeChild(a)},destroy:function(){var a=this,b=a.element||{},c=a.shadows,d=a.renderer.isSVG&&b.nodeName===\"SPAN\"&&a.parentGroup,e,f;b.onclick=b.onmouseout=\nb.onmouseover=b.onmousemove=b.point=null;kb(a);if(a.clipPath)a.clipPath=a.clipPath.destroy();if(a.stops){for(f=0;f<a.stops.length;f++)a.stops[f]=a.stops[f].destroy();a.stops=null}a.safeRemoveChild(b);for(c&&o(c,function(b){a.safeRemoveChild(b)});d&&d.div&&d.div.childNodes.length===0;)b=d.parentGroup,a.safeRemoveChild(d.div),delete d.div,d=b;a.alignTo&&ja(a.renderer.alignedObjects,a);for(e in a)delete a[e];return null},shadow:function(a,b,c){var d=[],e,f,g=this.element,h,i,j,k;if(a){i=p(a.width,3);\nj=(a.opacity||0.15)/i;k=this.parentInverted?\"(-1,-1)\":\"(\"+p(a.offsetX,1)+\", \"+p(a.offsetY,1)+\")\";for(e=1;e<=i;e++){f=g.cloneNode(0);h=i*2+1-2*e;J(f,{isShadow:\"true\",stroke:a.color||\"black\",\"stroke-opacity\":j*e,\"stroke-width\":h,transform:\"translate\"+k,fill:O});if(c)J(f,\"height\",t(J(f,\"height\")-h,0)),f.cutHeight=h;b?b.element.appendChild(f):g.parentNode.insertBefore(f,g);d.push(f)}this.shadows=d}return this},xGetter:function(a){this.element.nodeName===\"circle\"&&(a={x:\"cx\",y:\"cy\"}[a]||a);return this._defaultGetter(a)},\n_defaultGetter:function(a){a=p(this[a],this.element?this.element.getAttribute(a):null,0);/^[\\-0-9\\.]+$/.test(a)&&(a=parseFloat(a));return a},dSetter:function(a,b,c){a&&a.join&&(a=a.join(\" \"));/(NaN| {2}|^$)/.test(a)&&(a=\"M 0 0\");c.setAttribute(b,a);this[b]=a},dashstyleSetter:function(a){var b;if(a=a&&a.toLowerCase()){a=a.replace(\"shortdashdotdot\",\"3,1,1,1,1,1,\").replace(\"shortdashdot\",\"3,1,1,1\").replace(\"shortdot\",\"1,1,\").replace(\"shortdash\",\"3,1,\").replace(\"longdash\",\"8,3,\").replace(/dot/g,\"1,3,\").replace(\"dash\",\n\"4,3,\").replace(/,$/,\"\").split(\",\");for(b=a.length;b--;)a[b]=F(a[b])*this[\"stroke-width\"];a=a.join(\",\").replace(\"NaN\",\"none\");this.element.setAttribute(\"stroke-dasharray\",a)}},alignSetter:function(a){this.element.setAttribute(\"text-anchor\",{left:\"start\",center:\"middle\",right:\"end\"}[a])},opacitySetter:function(a,b,c){this[b]=a;c.setAttribute(b,a)},titleSetter:function(a){var b=this.element.getElementsByTagName(\"title\")[0];b||(b=C.createElementNS(Da,\"title\"),this.element.appendChild(b));b.appendChild(C.createTextNode(String(p(a),\n\"\").replace(/<[^>]*>/g,\"\")))},textSetter:function(a){if(a!==this.textStr)delete this.bBox,this.textStr=a,this.added&&this.renderer.buildText(this)},fillSetter:function(a,b,c){typeof a===\"string\"?c.setAttribute(b,a):a&&this.colorGradient(a,b,c)},visibilitySetter:function(a,b,c){a===\"inherit\"?c.removeAttribute(b):c.setAttribute(b,a)},zIndexSetter:function(a,b){var c=this.renderer,d=this.parentGroup,c=(d||c).element||c.box,e,f,g=this.element,h;e=this.added;var i;s(a)&&(g.setAttribute(b,a),a=+a,this[b]===\na&&(e=!1),this[b]=a);if(e){if((a=this.zIndex)&&d)d.handleZ=!0;d=c.childNodes;for(i=0;i<d.length&&!h;i++)if(e=d[i],f=J(e,\"zIndex\"),e!==g&&(F(f)>a||!s(a)&&s(f)))c.insertBefore(g,e),h=!0;h||c.appendChild(g)}return h},_defaultSetter:function(a,b,c){c.setAttribute(b,a)}};P.prototype.yGetter=P.prototype.xGetter;P.prototype.translateXSetter=P.prototype.translateYSetter=P.prototype.rotationSetter=P.prototype.verticalAlignSetter=P.prototype.scaleXSetter=P.prototype.scaleYSetter=function(a,b){this[b]=a;this.doTransform=\n!0};P.prototype[\"stroke-widthSetter\"]=P.prototype.strokeSetter=function(a,b,c){this[b]=a;if(this.stroke&&this[\"stroke-width\"])this.strokeWidth=this[\"stroke-width\"],P.prototype.fillSetter.call(this,this.stroke,\"stroke\",c),c.setAttribute(\"stroke-width\",this[\"stroke-width\"]),this.hasStroke=!0;else if(b===\"stroke-width\"&&a===0&&this.hasStroke)c.removeAttribute(\"stroke\"),this.hasStroke=!1};var ua=function(){this.init.apply(this,arguments)};ua.prototype={Element:P,init:function(a,b,c,d,e){var f=location,\ng,d=this.createElement(\"svg\").attr({version:\"1.1\"}).css(this.getStyle(d));g=d.element;a.appendChild(g);a.innerHTML.indexOf(\"xmlns\")===-1&&J(g,\"xmlns\",Da);this.isSVG=!0;this.box=g;this.boxWrapper=d;this.alignedObjects=[];this.url=(Ja||fb)&&C.getElementsByTagName(\"base\").length?f.href.replace(/#.*?$/,\"\").replace(/([\\('\\)])/g,\"\\\\$1\").replace(/ /g,\"%20\"):\"\";this.createElement(\"desc\").add().element.appendChild(C.createTextNode(\"Created with Highcharts 4.1.8\"));this.defs=this.createElement(\"defs\").add();\nthis.forExport=e;this.gradients={};this.cache={};this.setSize(b,c,!1);var h;if(Ja&&a.getBoundingClientRect)this.subPixelFix=b=function(){L(a,{left:0,top:0});h=a.getBoundingClientRect();L(a,{left:sa(h.left)-h.left+\"px\",top:sa(h.top)-h.top+\"px\"})},b(),H(K,\"resize\",b)},getStyle:function(a){return this.style=r({fontFamily:'\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif',fontSize:\"12px\"},a)},isHidden:function(){return!this.boxWrapper.getBBox().width},destroy:function(){var a=this.defs;\nthis.box=null;this.boxWrapper=this.boxWrapper.destroy();Oa(this.gradients||{});this.gradients=null;if(a)this.defs=a.destroy();this.subPixelFix&&Z(K,\"resize\",this.subPixelFix);return this.alignedObjects=null},createElement:function(a){var b=new this.Element;b.init(this,a);return b},draw:function(){},buildText:function(a){for(var b=a.element,c=this,d=c.forExport,e=p(a.textStr,\"\").toString(),f=e.indexOf(\"<\")!==-1,g=b.childNodes,h,i,j=J(b,\"x\"),k=a.styles,m=a.textWidth,l=k&&k.lineHeight,n=k&&k.textShadow,\nq=k&&k.textOverflow===\"ellipsis\",x=g.length,T=m&&!a.added&&this.box,Q=function(a){return l?F(l):c.fontMetrics(/(px|em)$/.test(a&&a.style.fontSize)?a.style.fontSize:k&&k.fontSize||c.style.fontSize||12,a).h},u=function(a){return a.replace(/&lt;/g,\"<\").replace(/&gt;/g,\">\")};x--;)b.removeChild(g[x]);!f&&!n&&!q&&e.indexOf(\" \")===-1?b.appendChild(C.createTextNode(u(e))):(h=/<.*style=\"([^\"]+)\".*>/,i=/<.*href=\"(http[^\"]+)\".*>/,T&&T.appendChild(b),e=f?e.replace(/<(b|strong)>/g,'<span style=\"font-weight:bold\">').replace(/<(i|em)>/g,\n'<span style=\"font-style:italic\">').replace(/<a/g,\"<span\").replace(/<\\/(b|strong|i|em|a)>/g,\"</span>\").split(/<br.*?>/g):[e],e[e.length-1]===\"\"&&e.pop(),o(e,function(e,f){var g,l=0,e=e.replace(/<span/g,\"|||<span\").replace(/<\\/span>/g,\"</span>|||\");g=e.split(\"|||\");o(g,function(e){if(e!==\"\"||g.length===1){var n={},x=C.createElementNS(Da,\"tspan\"),p;h.test(e)&&(p=e.match(h)[1].replace(/(;| |^)color([ :])/,\"$1fill$2\"),J(x,\"style\",p));i.test(e)&&!d&&(J(x,\"onclick\",'location.href=\"'+e.match(i)[1]+'\"'),\nL(x,{cursor:\"pointer\"}));e=u(e.replace(/<(.|\\n)*?>/g,\"\")||\" \");if(e!==\" \"){x.appendChild(C.createTextNode(e));if(l)n.dx=0;else if(f&&j!==null)n.x=j;J(x,n);b.appendChild(x);!l&&f&&(!ca&&d&&L(x,{display:\"block\"}),J(x,\"dy\",Q(x)));if(m){for(var n=e.replace(/([^\\^])-/g,\"$1- \").split(\" \"),o=g.length>1||f||n.length>1&&k.whiteSpace!==\"nowrap\",T,y,s,t=[],v=Q(x),w=1,r=a.rotation,z=e,A=z.length;(o||q)&&(n.length||t.length);)a.rotation=0,T=a.getBBox(!0),s=T.width,!ca&&c.forExport&&(s=c.measureSpanWidth(x.firstChild.data,\na.styles)),T=s>m,y===void 0&&(y=T),q&&y?(A/=2,z===\"\"||!T&&A<0.5?n=[]:(T&&(y=!0),z=e.substring(0,z.length+(T?-1:1)*sa(A)),n=[z+(m>3?\"\\u2026\":\"\")],x.removeChild(x.firstChild))):!T||n.length===1?(n=t,t=[],n.length&&(w++,x=C.createElementNS(Da,\"tspan\"),J(x,{dy:v,x:j}),p&&J(x,\"style\",p),b.appendChild(x)),s>m&&(m=s)):(x.removeChild(x.firstChild),t.unshift(n.pop())),n.length&&x.appendChild(C.createTextNode(n.join(\" \").replace(/- /g,\"-\")));y&&a.attr(\"title\",a.textStr);a.rotation=r}l++}}})}),T&&T.removeChild(b),\nn&&a.applyTextShadow&&a.applyTextShadow(n))},getContrast:function(a){a=na(a).rgba;return a[0]+a[1]+a[2]>384?\"#000000\":\"#FFFFFF\"},button:function(a,b,c,d,e,f,g,h,i){var j=this.label(a,b,c,i,null,null,null,null,\"button\"),k=0,m,l,n,q,x,p,a={x1:0,y1:0,x2:0,y2:1},e=A({\"stroke-width\":1,stroke:\"#CCCCCC\",fill:{linearGradient:a,stops:[[0,\"#FEFEFE\"],[1,\"#F6F6F6\"]]},r:2,padding:5,style:{color:\"black\"}},e);n=e.style;delete e.style;f=A(e,{stroke:\"#68A\",fill:{linearGradient:a,stops:[[0,\"#FFF\"],[1,\"#ACF\"]]}},f);\nq=f.style;delete f.style;g=A(e,{stroke:\"#68A\",fill:{linearGradient:a,stops:[[0,\"#9BD\"],[1,\"#CDF\"]]}},g);x=g.style;delete g.style;h=A(e,{style:{color:\"#CCC\"}},h);p=h.style;delete h.style;H(j.element,xa?\"mouseover\":\"mouseenter\",function(){k!==3&&j.attr(f).css(q)});H(j.element,xa?\"mouseout\":\"mouseleave\",function(){k!==3&&(m=[e,f,g][k],l=[n,q,x][k],j.attr(m).css(l))});j.setState=function(a){(j.state=k=a)?a===2?j.attr(g).css(x):a===3&&j.attr(h).css(p):j.attr(e).css(n)};return j.on(\"click\",function(a){k!==\n3&&d.call(j,a)}).attr(e).css(r({cursor:\"default\"},n))},crispLine:function(a,b){a[1]===a[4]&&(a[1]=a[4]=w(a[1])-b%2/2);a[2]===a[5]&&(a[2]=a[5]=w(a[2])+b%2/2);return a},path:function(a){var b={fill:O};Fa(a)?b.d=a:da(a)&&r(b,a);return this.createElement(\"path\").attr(b)},circle:function(a,b,c){a=da(a)?a:{x:a,y:b,r:c};b=this.createElement(\"circle\");b.xSetter=function(a){this.element.setAttribute(\"cx\",a)};b.ySetter=function(a){this.element.setAttribute(\"cy\",a)};return b.attr(a)},arc:function(a,b,c,d,e,\nf){if(da(a))b=a.y,c=a.r,d=a.innerR,e=a.start,f=a.end,a=a.x;a=this.symbol(\"arc\",a||0,b||0,c||0,c||0,{innerR:d||0,start:e||0,end:f||0});a.r=c;return a},rect:function(a,b,c,d,e,f){var e=da(a)?a.r:e,g=this.createElement(\"rect\"),a=da(a)?a:a===v?{}:{x:a,y:b,width:t(c,0),height:t(d,0)};if(f!==v)a.strokeWidth=f,a=g.crisp(a);if(e)a.r=e;g.rSetter=function(a){J(this.element,{rx:a,ry:a})};return g.attr(a)},setSize:function(a,b,c){var d=this.alignedObjects,e=d.length;this.width=a;this.height=b;for(this.boxWrapper[p(c,\n!0)?\"animate\":\"attr\"]({width:a,height:b});e--;)d[e].align()},g:function(a){var b=this.createElement(\"g\");return s(a)?b.attr({\"class\":\"highcharts-\"+a}):b},image:function(a,b,c,d,e){var f={preserveAspectRatio:O};arguments.length>1&&r(f,{x:b,y:c,width:d,height:e});f=this.createElement(\"image\").attr(f);f.element.setAttributeNS?f.element.setAttributeNS(\"http://www.w3.org/1999/xlink\",\"href\",a):f.element.setAttribute(\"hc-svg-href\",a);return f},symbol:function(a,b,c,d,e,f){var g,h=this.symbols[a],h=h&&h(w(b),\nw(c),d,e,f),i=/^url\\((.*?)\\)$/,j,k;if(h)g=this.path(h),r(g,{symbolName:a,x:b,y:c,width:d,height:e}),f&&r(g,f);else if(i.test(a))k=function(a,b){a.element&&(a.attr({width:b[0],height:b[1]}),a.alignByTranslate||a.translate(w((d-b[0])/2),w((e-b[1])/2)))},j=a.match(i)[1],a=Kb[j]||f&&f.width&&f.height&&[f.width,f.height],g=this.image(j).attr({x:b,y:c}),g.isImg=!0,a?k(g,a):(g.attr({width:0,height:0}),$(\"img\",{onload:function(){k(g,Kb[j]=[this.width,this.height])},src:j}));return g},symbols:{circle:function(a,\nb,c,d){var e=0.166*c;return[\"M\",a+c/2,b,\"C\",a+c+e,b,a+c+e,b+d,a+c/2,b+d,\"C\",a-e,b+d,a-e,b,a+c/2,b,\"Z\"]},square:function(a,b,c,d){return[\"M\",a,b,\"L\",a+c,b,a+c,b+d,a,b+d,\"Z\"]},triangle:function(a,b,c,d){return[\"M\",a+c/2,b,\"L\",a+c,b+d,a,b+d,\"Z\"]},\"triangle-down\":function(a,b,c,d){return[\"M\",a,b,\"L\",a+c,b,a+c/2,b+d,\"Z\"]},diamond:function(a,b,c,d){return[\"M\",a+c/2,b,\"L\",a+c,b+d/2,a+c/2,b+d,a,b+d/2,\"Z\"]},arc:function(a,b,c,d,e){var f=e.start,c=e.r||c||d,g=e.end-0.001,d=e.innerR,h=e.open,i=X(f),j=aa(f),\nk=X(g),g=aa(g),e=e.end-f<ma?0:1;return[\"M\",a+c*i,b+c*j,\"A\",c,c,0,e,1,a+c*k,b+c*g,h?\"M\":\"L\",a+d*k,b+d*g,\"A\",d,d,0,e,0,a+d*i,b+d*j,h?\"\":\"Z\"]},callout:function(a,b,c,d,e){var f=z(e&&e.r||0,c,d),g=f+6,h=e&&e.anchorX,e=e&&e.anchorY,i;i=[\"M\",a+f,b,\"L\",a+c-f,b,\"C\",a+c,b,a+c,b,a+c,b+f,\"L\",a+c,b+d-f,\"C\",a+c,b+d,a+c,b+d,a+c-f,b+d,\"L\",a+f,b+d,\"C\",a,b+d,a,b+d,a,b+d-f,\"L\",a,b+f,\"C\",a,b,a,b,a+f,b];h&&h>c&&e>b+g&&e<b+d-g?i.splice(13,3,\"L\",a+c,e-6,a+c+6,e,a+c,e+6,a+c,b+d-f):h&&h<0&&e>b+g&&e<b+d-g?i.splice(33,3,\"L\",\na,e+6,a-6,e,a,e-6,a,b+f):e&&e>d&&h>a+g&&h<a+c-g?i.splice(23,3,\"L\",h+6,b+d,h,b+d+6,h-6,b+d,a+f,b+d):e&&e<0&&h>a+g&&h<a+c-g&&i.splice(3,3,\"L\",h-6,b,h,b-6,h+6,b,c-f,b);return i}},clipRect:function(a,b,c,d){var e=\"highcharts-\"+wb++,f=this.createElement(\"clipPath\").attr({id:e}).add(this.defs),a=this.rect(a,b,c,d,0).add(f);a.id=e;a.clipPath=f;a.count=0;return a},text:function(a,b,c,d){var e=fa||!ca&&this.forExport,f={};if(d&&!this.forExport)return this.html(a,b,c);f.x=Math.round(b||0);if(c)f.y=Math.round(c);\nif(a||a===0)f.text=a;a=this.createElement(\"text\").attr(f);e&&a.css({position:\"absolute\"});if(!d)a.xSetter=function(a,b,c){var d=c.getElementsByTagName(\"tspan\"),e,f=c.getAttribute(b),l;for(l=0;l<d.length;l++)e=d[l],e.getAttribute(b)===f&&e.setAttribute(b,a);c.setAttribute(b,a)};return a},fontMetrics:function(a,b){var c,d,a=a||this.style.fontSize;b&&K.getComputedStyle&&(b=b.element||b,a=(c=K.getComputedStyle(b,\"\"))&&c.fontSize);a=/px/.test(a)?F(a):/em/.test(a)?parseFloat(a)*12:12;c=a<24?a+3:w(a*1.2);\nd=w(c*0.8);return{h:c,b:d,f:a}},rotCorr:function(a,b,c){var d=a;b&&c&&(d=t(d*X(b*ga),4));return{x:-a/3*aa(b*ga),y:d}},label:function(a,b,c,d,e,f,g,h,i){function j(){var a,b;a=q.element.style;p=(t===void 0||yb===void 0||n.styles.textAlign)&&s(q.textStr)&&q.getBBox();n.width=(t||p.width||0)+2*u+y;n.height=(yb||p.height||0)+2*u;B=u+l.fontMetrics(a&&a.fontSize,q).b;if(D){if(!x)a=w(-Q*u)+C,b=(h?-B:0)+C,n.box=x=d?l.symbol(d,a,b,n.width,n.height,G):l.rect(a,b,n.width,n.height,0,G[Pb]),x.isImg||x.attr(\"fill\",\nO),x.add(n);x.isImg||x.attr(r({width:w(n.width),height:w(n.height)},G));G=null}}function k(){var a=n.styles,a=a&&a.textAlign,b=y+u*(1-Q),c;c=h?0:B;if(s(t)&&p&&(a===\"center\"||a===\"right\"))b+={center:0.5,right:1}[a]*(t-p.width);if(b!==q.x||c!==q.y)q.attr(\"x\",b),c!==v&&q.attr(\"y\",c);q.x=b;q.y=c}function m(a,b){x?x.attr(a,b):G[a]=b}var l=this,n=l.g(i),q=l.text(\"\",0,0,g).attr({zIndex:1}),x,p,Q=0,u=3,y=0,t,yb,zb,z,C=0,G={},B,D;n.onAdd=function(){q.add(n);n.attr({text:a||a===0?a:\"\",x:b,y:c});x&&s(e)&&n.attr({anchorX:e,\nanchorY:f})};n.widthSetter=function(a){t=a};n.heightSetter=function(a){yb=a};n.paddingSetter=function(a){if(s(a)&&a!==u)u=n.padding=a,k()};n.paddingLeftSetter=function(a){s(a)&&a!==y&&(y=a,k())};n.alignSetter=function(a){Q={left:0,center:0.5,right:1}[a]};n.textSetter=function(a){a!==v&&q.textSetter(a);j();k()};n[\"stroke-widthSetter\"]=function(a,b){a&&(D=!0);C=a%2/2;m(b,a)};n.strokeSetter=n.fillSetter=n.rSetter=function(a,b){b===\"fill\"&&a&&(D=!0);m(b,a)};n.anchorXSetter=function(a,b){e=a;m(b,w(a)-\nC-zb)};n.anchorYSetter=function(a,b){f=a;m(b,a-z)};n.xSetter=function(a){n.x=a;Q&&(a-=Q*((t||p.width)+u));zb=w(a);n.attr(\"translateX\",zb)};n.ySetter=function(a){z=n.y=w(a);n.attr(\"translateY\",z)};var F=n.css;return r(n,{css:function(a){if(a){var b={},a=A(a);o(n.textProps,function(c){a[c]!==v&&(b[c]=a[c],delete a[c])});q.css(b)}return F.call(n,a)},getBBox:function(){return{width:p.width+2*u,height:p.height+2*u,x:p.x-u,y:p.y-u}},shadow:function(a){x&&x.shadow(a);return n},destroy:function(){Z(n.element,\n\"mouseenter\");Z(n.element,\"mouseleave\");q&&(q=q.destroy());x&&(x=x.destroy());P.prototype.destroy.call(n);n=l=j=k=m=null}})}};Za=ua;r(P.prototype,{htmlCss:function(a){var b=this.element;if(b=a&&b.tagName===\"SPAN\"&&a.width)delete a.width,this.textWidth=b,this.updateTransform();if(a&&a.textOverflow===\"ellipsis\")a.whiteSpace=\"nowrap\",a.overflow=\"hidden\";this.styles=r(this.styles,a);L(this.element,a);return this},htmlGetBBox:function(){var a=this.element;if(a.nodeName===\"text\")a.style.position=\"absolute\";\nreturn{x:a.offsetLeft,y:a.offsetTop,width:a.offsetWidth,height:a.offsetHeight}},htmlUpdateTransform:function(){if(this.added){var a=this.renderer,b=this.element,c=this.translateX||0,d=this.translateY||0,e=this.x||0,f=this.y||0,g=this.textAlign||\"left\",h={left:0,center:0.5,right:1}[g],i=this.shadows,j=this.styles;L(b,{marginLeft:c,marginTop:d});i&&o(i,function(a){L(a,{marginLeft:c+1,marginTop:d+1})});this.inverted&&o(b.childNodes,function(c){a.invertChild(c,b)});if(b.tagName===\"SPAN\"){var k=this.rotation,\nm,l=F(this.textWidth),n=[k,g,b.innerHTML,this.textWidth,this.textAlign].join(\",\");if(n!==this.cTT){m=a.fontMetrics(b.style.fontSize).b;s(k)&&this.setSpanRotation(k,h,m);i=p(this.elemWidth,b.offsetWidth);if(i>l&&/[ \\-]/.test(b.textContent||b.innerText))L(b,{width:l+\"px\",display:\"block\",whiteSpace:j&&j.whiteSpace||\"normal\"}),i=l;this.getSpanCorrection(i,m,h,k,g)}L(b,{left:e+(this.xCorr||0)+\"px\",top:f+(this.yCorr||0)+\"px\"});if(fb)m=b.offsetHeight;this.cTT=n}}else this.alignOnAdd=!0},setSpanRotation:function(a,\nb,c){var d={},e=xa?\"-ms-transform\":fb?\"-webkit-transform\":Ja?\"MozTransform\":Ib?\"-o-transform\":\"\";d[e]=d.transform=\"rotate(\"+a+\"deg)\";d[e+(Ja?\"Origin\":\"-origin\")]=d.transformOrigin=b*100+\"% \"+c+\"px\";L(this.element,d)},getSpanCorrection:function(a,b,c){this.xCorr=-a*c;this.yCorr=-b}});r(ua.prototype,{html:function(a,b,c){var d=this.createElement(\"span\"),e=d.element,f=d.renderer;d.textSetter=function(a){a!==e.innerHTML&&delete this.bBox;e.innerHTML=this.textStr=a;d.htmlUpdateTransform()};d.xSetter=d.ySetter=\nd.alignSetter=d.rotationSetter=function(a,b){b===\"align\"&&(b=\"textAlign\");d[b]=a;d.htmlUpdateTransform()};d.attr({text:a,x:w(b),y:w(c)}).css({position:\"absolute\",fontFamily:this.style.fontFamily,fontSize:this.style.fontSize});e.style.whiteSpace=\"nowrap\";d.css=d.htmlCss;if(f.isSVG)d.add=function(a){var b,c=f.box.parentNode,j=[];if(this.parentGroup=a){if(b=a.div,!b){for(;a;)j.push(a),a=a.parentGroup;o(j.reverse(),function(a){var d,e=J(a.element,\"class\");e&&(e={className:e});b=a.div=a.div||$(Ia,e,{position:\"absolute\",\nleft:(a.translateX||0)+\"px\",top:(a.translateY||0)+\"px\"},b||c);d=b.style;r(a,{translateXSetter:function(b,c){d.left=b+\"px\";a[c]=b;a.doTransform=!0},translateYSetter:function(b,c){d.top=b+\"px\";a[c]=b;a.doTransform=!0}});Sa(a,\"visibilitySetter\",function(a,b,c,e){a.call(this,b,c,e);d[c]=b})})}}else b=c;b.appendChild(e);d.added=!0;d.alignOnAdd&&d.htmlUpdateTransform();return d};return d}});if(!ca&&!fa){D={init:function(a,b){var c=[\"<\",b,' filled=\"f\" stroked=\"f\"'],d=[\"position: \",\"absolute\",\";\"],e=b===\nIa;(b===\"shape\"||e)&&d.push(\"left:0;top:0;width:1px;height:1px;\");d.push(\"visibility: \",e?\"hidden\":\"visible\");c.push(' style=\"',d.join(\"\"),'\"/>');if(b)c=e||b===\"span\"||b===\"img\"?c.join(\"\"):a.prepVML(c),this.element=$(c);this.renderer=a},add:function(a){var b=this.renderer,c=this.element,d=b.box,d=a?a.element||a:d;a&&a.inverted&&b.invertChild(c,d);d.appendChild(c);this.added=!0;this.alignOnAdd&&!this.deferUpdateTransform&&this.updateTransform();if(this.onAdd)this.onAdd();return this},updateTransform:P.prototype.htmlUpdateTransform,\nsetSpanRotation:function(){var a=this.rotation,b=X(a*ga),c=aa(a*ga);L(this.element,{filter:a?[\"progid:DXImageTransform.Microsoft.Matrix(M11=\",b,\", M12=\",-c,\", M21=\",c,\", M22=\",b,\", sizingMethod='auto expand')\"].join(\"\"):O})},getSpanCorrection:function(a,b,c,d,e){var f=d?X(d*ga):1,g=d?aa(d*ga):0,h=p(this.elemHeight,this.element.offsetHeight),i;this.xCorr=f<0&&-a;this.yCorr=g<0&&-h;i=f*g<0;this.xCorr+=g*b*(i?1-c:c);this.yCorr-=f*b*(d?i?c:1-c:1);e&&e!==\"left\"&&(this.xCorr-=a*c*(f<0?-1:1),d&&(this.yCorr-=\nh*c*(g<0?-1:1)),L(this.element,{textAlign:e}))},pathToVML:function(a){for(var b=a.length,c=[];b--;)if(qa(a[b]))c[b]=w(a[b]*10)-5;else if(a[b]===\"Z\")c[b]=\"x\";else if(c[b]=a[b],a.isArc&&(a[b]===\"wa\"||a[b]===\"at\"))c[b+5]===c[b+7]&&(c[b+7]+=a[b+7]>a[b+5]?1:-1),c[b+6]===c[b+8]&&(c[b+8]+=a[b+8]>a[b+6]?1:-1);return c.join(\" \")||\"x\"},clip:function(a){var b=this,c;a?(c=a.members,ja(c,b),c.push(b),b.destroyClip=function(){ja(c,b)},a=a.getCSS(b)):(b.destroyClip&&b.destroyClip(),a={clip:eb?\"inherit\":\"rect(auto)\"});\nreturn b.css(a)},css:P.prototype.htmlCss,safeRemoveChild:function(a){a.parentNode&&Pa(a)},destroy:function(){this.destroyClip&&this.destroyClip();return P.prototype.destroy.apply(this)},on:function(a,b){this.element[\"on\"+a]=function(){var a=K.event;a.target=a.srcElement;b(a)};return this},cutOffPath:function(a,b){var c,a=a.split(/[ ,]/);c=a.length;if(c===9||c===11)a[c-4]=a[c-2]=F(a[c-2])-10*b;return a.join(\" \")},shadow:function(a,b,c){var d=[],e,f=this.element,g=this.renderer,h,i=f.style,j,k=f.path,\nm,l,n,q;k&&typeof k.value!==\"string\"&&(k=\"x\");l=k;if(a){n=p(a.width,3);q=(a.opacity||0.15)/n;for(e=1;e<=3;e++){m=n*2+1-2*e;c&&(l=this.cutOffPath(k.value,m+0.5));j=['<shape isShadow=\"true\" strokeweight=\"',m,'\" filled=\"false\" path=\"',l,'\" coordsize=\"10 10\" style=\"',f.style.cssText,'\" />'];h=$(g.prepVML(j),null,{left:F(i.left)+p(a.offsetX,1),top:F(i.top)+p(a.offsetY,1)});if(c)h.cutOff=m+1;j=['<stroke color=\"',a.color||\"black\",'\" opacity=\"',q*e,'\"/>'];$(g.prepVML(j),null,null,h);b?b.element.appendChild(h):\nf.parentNode.insertBefore(h,f);d.push(h)}this.shadows=d}return this},updateShadows:ta,setAttr:function(a,b){eb?this.element[a]=b:this.element.setAttribute(a,b)},classSetter:function(a){this.element.className=a},dashstyleSetter:function(a,b,c){(c.getElementsByTagName(\"stroke\")[0]||$(this.renderer.prepVML([\"<stroke/>\"]),null,null,c))[b]=a||\"solid\";this[b]=a},dSetter:function(a,b,c){var d=this.shadows,a=a||[];this.d=a.join&&a.join(\" \");c.path=a=this.pathToVML(a);if(d)for(c=d.length;c--;)d[c].path=d[c].cutOff?\nthis.cutOffPath(a,d[c].cutOff):a;this.setAttr(b,a)},fillSetter:function(a,b,c){var d=c.nodeName;if(d===\"SPAN\")c.style.color=a;else if(d!==\"IMG\")c.filled=a!==O,this.setAttr(\"fillcolor\",this.renderer.color(a,c,b,this))},opacitySetter:ta,rotationSetter:function(a,b,c){c=c.style;this[b]=c[b]=a;c.left=-w(aa(a*ga)+1)+\"px\";c.top=w(X(a*ga))+\"px\"},strokeSetter:function(a,b,c){this.setAttr(\"strokecolor\",this.renderer.color(a,c,b))},\"stroke-widthSetter\":function(a,b,c){c.stroked=!!a;this[b]=a;qa(a)&&(a+=\"px\");\nthis.setAttr(\"strokeweight\",a)},titleSetter:function(a,b){this.setAttr(b,a)},visibilitySetter:function(a,b,c){a===\"inherit\"&&(a=\"visible\");this.shadows&&o(this.shadows,function(c){c.style[b]=a});c.nodeName===\"DIV\"&&(a=a===\"hidden\"?\"-999em\":0,eb||(c.style[b]=a?\"visible\":\"hidden\"),b=\"top\");c.style[b]=a},xSetter:function(a,b,c){this[b]=a;b===\"x\"?b=\"left\":b===\"y\"&&(b=\"top\");this.updateClipping?(this[b]=a,this.updateClipping()):c.style[b]=a},zIndexSetter:function(a,b,c){c.style[b]=a}};B.VMLElement=D=ka(P,\nD);D.prototype.ySetter=D.prototype.widthSetter=D.prototype.heightSetter=D.prototype.xSetter;var La={Element:D,isIE8:za.indexOf(\"MSIE 8.0\")>-1,init:function(a,b,c,d){var e;this.alignedObjects=[];d=this.createElement(Ia).css(r(this.getStyle(d),{position:\"relative\"}));e=d.element;a.appendChild(d.element);this.isVML=!0;this.box=e;this.boxWrapper=d;this.cache={};this.setSize(b,c,!1);if(!C.namespaces.hcv){C.namespaces.add(\"hcv\",\"urn:schemas-microsoft-com:vml\");try{C.createStyleSheet().cssText=\"hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } \"}catch(f){C.styleSheets[0].cssText+=\n\"hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } \"}}},isHidden:function(){return!this.box.offsetWidth},clipRect:function(a,b,c,d){var e=this.createElement(),f=da(a);return r(e,{members:[],count:0,left:(f?a.x:a)+1,top:(f?a.y:b)+1,width:(f?a.width:c)-1,height:(f?a.height:d)-1,getCSS:function(a){var b=a.element,c=b.nodeName,a=a.inverted,d=this.top-(c===\"shape\"?b.offsetTop:0),e=this.left,b=e+this.width,f=d+this.height,d={clip:\"rect(\"+w(a?e:d)+\"px,\"+\nw(a?f:b)+\"px,\"+w(a?b:f)+\"px,\"+w(a?d:e)+\"px)\"};!a&&eb&&c===\"DIV\"&&r(d,{width:b+\"px\",height:f+\"px\"});return d},updateClipping:function(){o(e.members,function(a){a.element&&a.css(e.getCSS(a))})}})},color:function(a,b,c,d){var e=this,f,g=/^rgba/,h,i,j=O;a&&a.linearGradient?i=\"gradient\":a&&a.radialGradient&&(i=\"pattern\");if(i){var k,m,l=a.linearGradient||a.radialGradient,n,q,x,p,Q,u=\"\",a=a.stops,y,t=[],s=function(){h=['<fill colors=\"'+t.join(\",\")+'\" opacity=\"',x,'\" o:opacity2=\"',q,'\" type=\"',i,'\" ',u,\n'focus=\"100%\" method=\"any\" />'];$(e.prepVML(h),null,null,b)};n=a[0];y=a[a.length-1];n[0]>0&&a.unshift([0,n[1]]);y[0]<1&&a.push([1,y[1]]);o(a,function(a,b){g.test(a[1])?(f=na(a[1]),k=f.get(\"rgb\"),m=f.get(\"a\")):(k=a[1],m=1);t.push(a[0]*100+\"% \"+k);b?(x=m,p=k):(q=m,Q=k)});if(c===\"fill\")if(i===\"gradient\")c=l.x1||l[0]||0,a=l.y1||l[1]||0,n=l.x2||l[2]||0,l=l.y2||l[3]||0,u='angle=\"'+(90-W.atan((l-a)/(n-c))*180/ma)+'\"',s();else{var j=l.r,v=j*2,w=j*2,r=l.cx,z=l.cy,A=b.radialReference,C,j=function(){A&&(C=d.getBBox(),\nr+=(A[0]-C.x)/C.width-0.5,z+=(A[1]-C.y)/C.height-0.5,v*=A[2]/C.width,w*=A[2]/C.height);u='src=\"'+S.global.VMLRadialGradientURL+'\" size=\"'+v+\",\"+w+'\" origin=\"0.5,0.5\" position=\"'+r+\",\"+z+'\" color2=\"'+Q+'\" ';s()};d.added?j():d.onAdd=j;j=p}else j=k}else if(g.test(a)&&b.tagName!==\"IMG\")f=na(a),h=[\"<\",c,' opacity=\"',f.get(\"a\"),'\"/>'],$(this.prepVML(h),null,null,b),j=f.get(\"rgb\");else{j=b.getElementsByTagName(c);if(j.length)j[0].opacity=1,j[0].type=\"solid\";j=a}return j},prepVML:function(a){var b=this.isIE8,\na=a.join(\"\");b?(a=a.replace(\"/>\",' xmlns=\"urn:schemas-microsoft-com:vml\" />'),a=a.indexOf('style=\"')===-1?a.replace(\"/>\",' style=\"display:inline-block;behavior:url(#default#VML);\" />'):a.replace('style=\"','style=\"display:inline-block;behavior:url(#default#VML);')):a=a.replace(\"<\",\"<hcv:\");return a},text:ua.prototype.html,path:function(a){var b={coordsize:\"10 10\"};Fa(a)?b.d=a:da(a)&&r(b,a);return this.createElement(\"shape\").attr(b)},circle:function(a,b,c){var d=this.symbol(\"circle\");if(da(a))c=a.r,\nb=a.y,a=a.x;d.isCircle=!0;d.r=c;return d.attr({x:a,y:b})},g:function(a){var b;a&&(b={className:\"highcharts-\"+a,\"class\":\"highcharts-\"+a});return this.createElement(Ia).attr(b)},image:function(a,b,c,d,e){var f=this.createElement(\"img\").attr({src:a});arguments.length>1&&f.attr({x:b,y:c,width:d,height:e});return f},createElement:function(a){return a===\"rect\"?this.symbol(a):ua.prototype.createElement.call(this,a)},invertChild:function(a,b){var c=this,d=b.style,e=a.tagName===\"IMG\"&&a.style;L(a,{flip:\"x\",\nleft:F(d.width)-(e?F(e.top):1),top:F(d.height)-(e?F(e.left):1),rotation:-90});o(a.childNodes,function(b){c.invertChild(b,a)})},symbols:{arc:function(a,b,c,d,e){var f=e.start,g=e.end,h=e.r||c||d,c=e.innerR,d=X(f),i=aa(f),j=X(g),k=aa(g);if(g-f===0)return[\"x\"];f=[\"wa\",a-h,b-h,a+h,b+h,a+h*d,b+h*i,a+h*j,b+h*k];e.open&&!c&&f.push(\"e\",\"M\",a,b);f.push(\"at\",a-c,b-c,a+c,b+c,a+c*j,b+c*k,a+c*d,b+c*i,\"x\",\"e\");f.isArc=!0;return f},circle:function(a,b,c,d,e){e&&(c=d=2*e.r);e&&e.isCircle&&(a-=c/2,b-=d/2);return[\"wa\",\na,b,a+c,b+d,a+c,b+d/2,a+c,b+d/2,\"e\"]},rect:function(a,b,c,d,e){return ua.prototype.symbols[!s(e)||!e.r?\"square\":\"callout\"].call(0,a,b,c,d,e)}}};B.VMLRenderer=D=function(){this.init.apply(this,arguments)};D.prototype=A(ua.prototype,La);Za=D}ua.prototype.measureSpanWidth=function(a,b){var c=C.createElement(\"span\"),d;d=C.createTextNode(a);c.appendChild(d);L(c,b);this.box.appendChild(c);d=c.offsetWidth;Pa(c);return d};var Lb;if(fa)B.CanVGRenderer=D=function(){Da=\"http://www.w3.org/1999/xhtml\"},D.prototype.symbols=\n{},Lb=function(){function a(){var a=b.length,d;for(d=0;d<a;d++)b[d]();b=[]}var b=[];return{push:function(c,d){b.length===0&&Qb(d,a);b.push(c)}}}(),Za=D;Ra.prototype={addLabel:function(){var a=this.axis,b=a.options,c=a.chart,d=a.categories,e=a.names,f=this.pos,g=b.labels,h=a.tickPositions,i=f===h[0],j=f===h[h.length-1],e=d?p(d[f],e[f],f):f,d=this.label,h=h.info,k;a.isDatetimeAxis&&h&&(k=b.dateTimeLabelFormats[h.higherRanks[f]||h.unitName]);this.isFirst=i;this.isLast=j;b=a.labelFormatter.call({axis:a,\nchart:c,isFirst:i,isLast:j,dateTimeLabelFormat:k,value:a.isLog?ea(ia(e)):e});s(d)?d&&d.attr({text:b}):(this.labelLength=(this.label=d=s(b)&&g.enabled?c.renderer.text(b,0,0,g.useHTML).css(A(g.style)).add(a.labelGroup):null)&&d.getBBox().width,this.rotation=0)},getLabelSize:function(){return this.label?this.label.getBBox()[this.axis.horiz?\"height\":\"width\"]:0},handleOverflow:function(a){var b=this.axis,c=a.x,d=b.chart.chartWidth,e=b.chart.spacing,f=p(b.labelLeft,z(b.pos,e[3])),e=p(b.labelRight,t(b.pos+\nb.len,d-e[1])),g=this.label,h=this.rotation,i={left:0,center:0.5,right:1}[b.labelAlign],j=g.getBBox().width,k=b.slotWidth,m=1,l,n={};if(h)h<0&&c-i*j<f?l=w(c/X(h*ga)-f):h>0&&c+i*j>e&&(l=w((d-c)/X(h*ga)));else if(d=c+(1-i)*j,c-i*j<f?k=a.x+k*(1-i)-f:d>e&&(k=e-a.x+k*i,m=-1),k=z(b.slotWidth,k),k<b.slotWidth&&b.labelAlign===\"center\"&&(a.x+=m*(b.slotWidth-k-i*(b.slotWidth-z(j,k)))),j>k||b.autoRotation&&g.styles.width)l=k;if(l){n.width=l;if(!b.options.labels.style.textOverflow)n.textOverflow=\"ellipsis\";g.css(n)}},\ngetPosition:function(a,b,c,d){var e=this.axis,f=e.chart,g=d&&f.oldChartHeight||f.chartHeight;return{x:a?e.translate(b+c,null,null,d)+e.transB:e.left+e.offset+(e.opposite?(d&&f.oldChartWidth||f.chartWidth)-e.right-e.left:0),y:a?g-e.bottom+e.offset-(e.opposite?e.height:0):g-e.translate(b+c,null,null,d)-e.transB}},getLabelPosition:function(a,b,c,d,e,f,g,h){var i=this.axis,j=i.transA,k=i.reversed,m=i.staggerLines,l=i.tickRotCorr||{x:0,y:0},c=p(e.y,l.y+(i.side===2?8:-(c.getBBox().height/2))),a=a+e.x+l.x-\n(f&&d?f*j*(k?-1:1):0),b=b+c-(f&&!d?f*j*(k?1:-1):0);m&&(b+=g/(h||1)%m*(i.labelOffset/m));return{x:a,y:w(b)}},getMarkPath:function(a,b,c,d,e,f){return f.crispLine([\"M\",a,b,\"L\",a+(e?0:-c),b+(e?c:0)],d)},render:function(a,b,c){var d=this.axis,e=d.options,f=d.chart.renderer,g=d.horiz,h=this.type,i=this.label,j=this.pos,k=e.labels,m=this.gridLine,l=h?h+\"Grid\":\"grid\",n=h?h+\"Tick\":\"tick\",q=e[l+\"LineWidth\"],x=e[l+\"LineColor\"],o=e[l+\"LineDashStyle\"],Q=e[n+\"Length\"],l=p(e[n+\"Width\"],!h&&d.isXAxis?1:0),u=e[n+\n\"Color\"],y=e[n+\"Position\"],n=this.mark,t=k.step,s=!0,w=d.tickmarkOffset,r=this.getPosition(g,j,w,b),z=r.x,r=r.y,C=g&&z===d.pos+d.len||!g&&r===d.pos?-1:1,c=p(c,1);this.isActive=!0;if(q){j=d.getPlotLinePath(j+w,q*C,b,!0);if(m===v){m={stroke:x,\"stroke-width\":q};if(o)m.dashstyle=o;if(!h)m.zIndex=1;if(b)m.opacity=0;this.gridLine=m=q?f.path(j).attr(m).add(d.gridGroup):null}if(!b&&m&&j)m[this.isNew?\"attr\":\"animate\"]({d:j,opacity:c})}if(l&&Q)y===\"inside\"&&(Q=-Q),d.opposite&&(Q=-Q),h=this.getMarkPath(z,r,\nQ,l*C,g,f),n?n.animate({d:h,opacity:c}):this.mark=f.path(h).attr({stroke:u,\"stroke-width\":l,opacity:c}).add(d.axisGroup);if(i&&!isNaN(z))i.xy=r=this.getLabelPosition(z,r,i,g,k,w,a,t),this.isFirst&&!this.isLast&&!p(e.showFirstLabel,1)||this.isLast&&!this.isFirst&&!p(e.showLastLabel,1)?s=!1:g&&!d.isRadial&&!k.step&&!k.rotation&&!b&&c!==0&&this.handleOverflow(r),t&&a%t&&(s=!1),s&&!isNaN(r.y)?(r.opacity=c,i[this.isNew?\"attr\":\"animate\"](r),this.isNew=!1):i.attr(\"y\",-9999)},destroy:function(){Oa(this,this.axis)}};\nB.PlotLineOrBand=function(a,b){this.axis=a;if(b)this.options=b,this.id=b.id};B.PlotLineOrBand.prototype={render:function(){var a=this,b=a.axis,c=b.horiz,d=a.options,e=d.label,f=a.label,g=d.width,h=d.to,i=d.from,j=s(i)&&s(h),k=d.value,m=d.dashStyle,l=a.svgElem,n=[],q,x=d.color,p=d.zIndex,o=d.events,u={},y=b.chart.renderer;b.isLog&&(i=Ba(i),h=Ba(h),k=Ba(k));if(g){if(n=b.getPlotLinePath(k,g),u={stroke:x,\"stroke-width\":g},m)u.dashstyle=m}else if(j){n=b.getPlotBandPath(i,h,d);if(x)u.fill=x;if(d.borderWidth)u.stroke=\nd.borderColor,u[\"stroke-width\"]=d.borderWidth}else return;if(s(p))u.zIndex=p;if(l)if(n)l.animate({d:n},null,l.onGetPath);else{if(l.hide(),l.onGetPath=function(){l.show()},f)a.label=f=f.destroy()}else if(n&&n.length&&(a.svgElem=l=y.path(n).attr(u).add(),o))for(q in d=function(b){l.on(b,function(c){o[b].apply(a,[c])})},o)d(q);if(e&&s(e.text)&&n&&n.length&&b.width>0&&b.height>0){e=A({align:c&&j&&\"center\",x:c?!j&&4:10,verticalAlign:!c&&j&&\"middle\",y:c?j?16:10:j?6:-4,rotation:c&&!j&&90},e);if(!f){u={align:e.textAlign||\ne.align,rotation:e.rotation};if(s(p))u.zIndex=p;a.label=f=y.text(e.text,0,0,e.useHTML).attr(u).css(e.style).add()}b=[n[1],n[4],j?n[6]:n[1]];j=[n[2],n[5],j?n[7]:n[2]];n=Na(b);c=Na(j);f.align(e,!1,{x:n,y:c,width:Ca(b)-n,height:Ca(j)-c});f.show()}else f&&f.hide();return a},destroy:function(){ja(this.axis.plotLinesAndBands,this);delete this.axis;Oa(this)}};var ha=B.Axis=function(){this.init.apply(this,arguments)};ha.prototype={defaultOptions:{dateTimeLabelFormats:{millisecond:\"%H:%M:%S.%L\",second:\"%H:%M:%S\",\nminute:\"%H:%M\",hour:\"%H:%M\",day:\"%e. %b\",week:\"%e. %b\",month:\"%b '%y\",year:\"%Y\"},endOnTick:!1,gridLineColor:\"#D8D8D8\",labels:{enabled:!0,style:{color:\"#606060\",cursor:\"default\",fontSize:\"11px\"},x:0,y:15},lineColor:\"#C0D0E0\",lineWidth:1,minPadding:0.01,maxPadding:0.01,minorGridLineColor:\"#E0E0E0\",minorGridLineWidth:1,minorTickColor:\"#A0A0A0\",minorTickLength:2,minorTickPosition:\"outside\",startOfWeek:1,startOnTick:!1,tickColor:\"#C0D0E0\",tickLength:10,tickmarkPlacement:\"between\",tickPixelInterval:100,\ntickPosition:\"outside\",title:{align:\"middle\",style:{color:\"#707070\"}},type:\"linear\"},defaultYAxisOptions:{endOnTick:!0,gridLineWidth:1,tickPixelInterval:72,showLastLabel:!0,labels:{x:-8,y:3},lineWidth:0,maxPadding:0.05,minPadding:0.05,startOnTick:!0,title:{rotation:270,text:\"Values\"},stackLabels:{enabled:!1,formatter:function(){return B.numberFormat(this.total,-1)},style:A(ba.line.dataLabels.style,{color:\"#000000\"})}},defaultLeftAxisOptions:{labels:{x:-15,y:null},title:{rotation:270}},defaultRightAxisOptions:{labels:{x:15,\ny:null},title:{rotation:90}},defaultBottomAxisOptions:{labels:{autoRotation:[-45],x:0,y:null},title:{rotation:0}},defaultTopAxisOptions:{labels:{autoRotation:[-45],x:0,y:-15},title:{rotation:0}},init:function(a,b){var c=b.isX;this.chart=a;this.horiz=a.inverted?!c:c;this.coll=(this.isXAxis=c)?\"xAxis\":\"yAxis\";this.opposite=b.opposite;this.side=b.side||(this.horiz?this.opposite?0:2:this.opposite?1:3);this.setOptions(b);var d=this.options,e=d.type;this.labelFormatter=d.labels.formatter||this.defaultLabelFormatter;\nthis.userOptions=b;this.minPixelPadding=0;this.reversed=d.reversed;this.zoomEnabled=d.zoomEnabled!==!1;this.categories=d.categories||e===\"category\";this.names=this.names||[];this.isLog=e===\"logarithmic\";this.isDatetimeAxis=e===\"datetime\";this.isLinked=s(d.linkedTo);this.ticks={};this.labelEdge=[];this.minorTicks={};this.plotLinesAndBands=[];this.alternateBands={};this.len=0;this.minRange=this.userMinRange=d.minRange||d.maxZoom;this.range=d.range;this.offset=d.offset||0;this.stacks={};this.oldStacks=\n{};this.stacksTouched=0;this.min=this.max=null;this.crosshair=p(d.crosshair,ra(a.options.tooltip.crosshairs)[c?0:1],!1);var f,d=this.options.events;Ka(this,a.axes)===-1&&(c&&!this.isColorAxis?a.axes.splice(a.xAxis.length,0,this):a.axes.push(this),a[this.coll].push(this));this.series=this.series||[];if(a.inverted&&c&&this.reversed===v)this.reversed=!0;this.removePlotLine=this.removePlotBand=this.removePlotBandOrLine;for(f in d)H(this,f,d[f]);if(this.isLog)this.val2lin=Ba,this.lin2val=ia},setOptions:function(a){this.options=\nA(this.defaultOptions,this.isXAxis?{}:this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],A(S[this.coll],a))},defaultLabelFormatter:function(){var a=this.axis,b=this.value,c=a.categories,d=this.dateTimeLabelFormat,e=S.lang.numericSymbols,f=e&&e.length,g,h=a.options.labels.format,a=a.isLog?b:a.tickInterval;if(h)g=Ha(h,this);else if(c)g=b;else if(d)g=Ma(d,b);else if(f&&a>=1E3)for(;f--&&g===v;)c=Math.pow(1E3,\nf+1),a>=c&&b*10%c===0&&e[f]!==null&&(g=B.numberFormat(b/c,-1)+e[f]);g===v&&(g=N(b)>=1E4?B.numberFormat(b,-1):B.numberFormat(b,-1,v,\"\"));return g},getSeriesExtremes:function(){var a=this,b=a.chart;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=a.ignoreMinPadding=a.ignoreMaxPadding=null;a.buildStacks&&a.buildStacks();o(a.series,function(c){if(c.visible||!b.options.chart.ignoreHiddenSeries){var d;d=c.options.threshold;var e;a.hasVisibleSeries=!0;a.isLog&&d<=0&&(d=null);if(a.isXAxis){if(d=c.xData,d.length)a.dataMin=\nz(p(a.dataMin,d[0]),Na(d)),a.dataMax=t(p(a.dataMax,d[0]),Ca(d))}else{c.getExtremes();e=c.dataMax;c=c.dataMin;if(s(c)&&s(e))a.dataMin=z(p(a.dataMin,c),c),a.dataMax=t(p(a.dataMax,e),e);if(s(d))if(a.dataMin>=d)a.dataMin=d,a.ignoreMinPadding=!0;else if(a.dataMax<d)a.dataMax=d,a.ignoreMaxPadding=!0}}})},translate:function(a,b,c,d,e,f){var g=this.linkedParent||this,h=1,i=0,j=d?g.oldTransA:g.transA,d=d?g.oldMin:g.min,k=g.minPixelPadding,e=(g.doPostTranslate||g.isLog&&e)&&g.lin2val;if(!j)j=g.transA;if(c)h*=\n-1,i=g.len;g.reversed&&(h*=-1,i-=h*(g.sector||g.len));b?(a=a*h+i,a-=k,a=a/j+d,e&&(a=g.lin2val(a))):(e&&(a=g.val2lin(a)),f===\"between\"&&(f=0.5),a=h*(a-d)*j+i+h*k+(qa(f)?j*f*g.pointRange:0));return a},toPixels:function(a,b){return this.translate(a,!1,!this.horiz,null,!0)+(b?0:this.pos)},toValue:function(a,b){return this.translate(a-(b?0:this.pos),!0,!this.horiz,null,!0)},getPlotLinePath:function(a,b,c,d,e){var f=this.chart,g=this.left,h=this.top,i,j,k=c&&f.oldChartHeight||f.chartHeight,m=c&&f.oldChartWidth||\nf.chartWidth,l;i=this.transB;var n=function(a,b,c){if(a<b||a>c)d?a=z(t(b,a),c):l=!0;return a},e=p(e,this.translate(a,null,null,c)),a=c=w(e+i);i=j=w(k-e-i);isNaN(e)?l=!0:this.horiz?(i=h,j=k-this.bottom,a=c=n(a,g,g+this.width)):(a=g,c=m-this.right,i=j=n(i,h,h+this.height));return l&&!d?null:f.renderer.crispLine([\"M\",a,i,\"L\",c,j],b||1)},getLinearTickPositions:function(a,b,c){var d,e=ea(V(b/a)*a),f=ea(sa(c/a)*a),g=[];if(b===c&&qa(b))return[b];for(b=e;b<=f;){g.push(b);b=ea(b+a);if(b===d)break;d=b}return g},\ngetMinorTickPositions:function(){var a=this.options,b=this.tickPositions,c=this.minorTickInterval,d=[],e,f=this.pointRangePadding||0;e=this.min-f;var f=this.max+f,g=f-e;if(g&&g/c<this.len/3)if(this.isLog){f=b.length;for(e=1;e<f;e++)d=d.concat(this.getLogTickPositions(c,b[e-1],b[e],!0))}else if(this.isDatetimeAxis&&a.minorTickInterval===\"auto\")d=d.concat(this.getTimeTicks(this.normalizeTimeTickInterval(c),e,f,a.startOfWeek));else for(b=e+(b[0]-e)%c;b<=f;b+=c)d.push(b);d.length!==0&&this.trimTicks(d,\na.startOnTick,a.endOnTick);return d},adjustForMinRange:function(){var a=this.options,b=this.min,c=this.max,d,e=this.dataMax-this.dataMin>=this.minRange,f,g,h,i,j;if(this.isXAxis&&this.minRange===v&&!this.isLog)s(a.min)||s(a.max)?this.minRange=null:(o(this.series,function(a){i=a.xData;for(g=j=a.xIncrement?1:i.length-1;g>0;g--)if(h=i[g]-i[g-1],f===v||h<f)f=h}),this.minRange=z(f*5,this.dataMax-this.dataMin));if(c-b<this.minRange){var k=this.minRange;d=(k-c+b)/2;d=[b-d,p(a.min,b-d)];if(e)d[2]=this.dataMin;\nb=Ca(d);c=[b+k,p(a.max,b+k)];if(e)c[2]=this.dataMax;c=Na(c);c-b<k&&(d[0]=c-k,d[1]=p(a.min,c-k),b=Ca(d))}this.min=b;this.max=c},setAxisTranslation:function(a){var b=this,c=b.max-b.min,d=b.axisPointRange||0,e,f=0,g=0,h=b.linkedParent,i=!!b.categories,j=b.transA,k=b.isXAxis;if(k||i||d)if(h?(f=h.minPointOffset,g=h.pointRangePadding):o(b.series,function(a){var h=i?1:k?a.pointRange:b.axisPointRange||0,j=a.options.pointPlacement,q=a.closestPointRange;h>c&&(h=0);d=t(d,h);b.single||(f=t(f,Aa(j)?0:h/2),g=t(g,\nj===\"on\"?0:h));!a.noSharedTooltip&&s(q)&&(e=s(e)?z(e,q):q)}),h=b.ordinalSlope&&e?b.ordinalSlope/e:1,b.minPointOffset=f*=h,b.pointRangePadding=g*=h,b.pointRange=z(d,c),k)b.closestPointRange=e;if(a)b.oldTransA=j;b.translationSlope=b.transA=j=b.len/(c+g||1);b.transB=b.horiz?b.left:b.bottom;b.minPixelPadding=j*f},minFromRange:function(){return this.max-this.range},setTickInterval:function(a){var b=this,c=b.chart,d=b.options,e=b.isLog,f=b.isDatetimeAxis,g=b.isXAxis,h=b.isLinked,i=d.maxPadding,j=d.minPadding,\nk=d.tickInterval,m=d.tickPixelInterval,l=b.categories;!f&&!l&&!h&&this.getTickAmount();h?(b.linkedParent=c[b.coll][d.linkedTo],c=b.linkedParent.getExtremes(),b.min=p(c.min,c.dataMin),b.max=p(c.max,c.dataMax),d.type!==b.linkedParent.options.type&&la(11,1)):(b.min=p(b.userMin,d.min,b.dataMin),b.max=p(b.userMax,d.max,b.dataMax));if(e)!a&&z(b.min,p(b.dataMin,b.min))<=0&&la(10,1),b.min=ea(Ba(b.min),15),b.max=ea(Ba(b.max),15);if(b.range&&s(b.max))b.userMin=b.min=t(b.min,b.minFromRange()),b.userMax=b.max,\nb.range=null;b.beforePadding&&b.beforePadding();b.adjustForMinRange();if(!l&&!b.axisPointRange&&!b.usePercentage&&!h&&s(b.min)&&s(b.max)&&(c=b.max-b.min)){if(!s(d.min)&&!s(b.userMin)&&j&&(b.dataMin<0||!b.ignoreMinPadding))b.min-=c*j;if(!s(d.max)&&!s(b.userMax)&&i&&(b.dataMax>0||!b.ignoreMaxPadding))b.max+=c*i}if(qa(d.floor))b.min=t(b.min,d.floor);if(qa(d.ceiling))b.max=z(b.max,d.ceiling);b.tickInterval=b.min===b.max||b.min===void 0||b.max===void 0?1:h&&!k&&m===b.linkedParent.options.tickPixelInterval?\nk=b.linkedParent.tickInterval:p(k,this.tickAmount?(b.max-b.min)/t(this.tickAmount-1,1):void 0,l?1:(b.max-b.min)*m/t(b.len,m));g&&!a&&o(b.series,function(a){a.processData(b.min!==b.oldMin||b.max!==b.oldMax)});b.setAxisTranslation(!0);b.beforeSetTickPositions&&b.beforeSetTickPositions();if(b.postProcessTickInterval)b.tickInterval=b.postProcessTickInterval(b.tickInterval);if(b.pointRange)b.tickInterval=t(b.pointRange,b.tickInterval);a=p(d.minTickInterval,b.isDatetimeAxis&&b.closestPointRange);if(!k&&\nb.tickInterval<a)b.tickInterval=a;if(!f&&!e&&!k)b.tickInterval=ob(b.tickInterval,null,nb(b.tickInterval),p(d.allowDecimals,!(b.tickInterval>0.5&&b.tickInterval<5&&b.max>1E3&&b.max<9999)),!!this.tickAmount);if(!this.tickAmount&&this.len)b.tickInterval=b.unsquish();this.setTickPositions()},setTickPositions:function(){var a=this.options,b,c=a.tickPositions,d=a.tickPositioner,e=a.startOnTick,f=a.endOnTick,g;this.tickmarkOffset=this.categories&&a.tickmarkPlacement===\"between\"&&this.tickInterval===1?0.5:\n0;this.minorTickInterval=a.minorTickInterval===\"auto\"&&this.tickInterval?this.tickInterval/5:a.minorTickInterval;this.tickPositions=b=c&&c.slice();if(!b&&(b=this.isDatetimeAxis?this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval,a.units),this.min,this.max,a.startOfWeek,this.ordinalPositions,this.closestPointRange,!0):this.isLog?this.getLogTickPositions(this.tickInterval,this.min,this.max):this.getLinearTickPositions(this.tickInterval,this.min,this.max),b.length>this.len&&(b=[b[0],b.pop()]),\nthis.tickPositions=b,d&&(d=d.apply(this,[this.min,this.max]))))this.tickPositions=b=d;if(!this.isLinked)this.trimTicks(b,e,f),this.min===this.max&&s(this.min)&&!this.tickAmount&&(g=!0,this.min-=0.5,this.max+=0.5),this.single=g,!c&&!d&&this.adjustTickAmount()},trimTicks:function(a,b,c){var d=a[0],e=a[a.length-1],f=this.minPointOffset||0;b?this.min=d:this.min-f>d&&a.shift();c?this.max=e:this.max+f<e&&a.pop();a.length===0&&s(d)&&a.push((e+d)/2)},getTickAmount:function(){var a={},b,c=this.options,d=c.tickAmount,\ne=c.tickPixelInterval;!s(c.tickInterval)&&this.len<e&&!this.isRadial&&!this.isLog&&c.startOnTick&&c.endOnTick&&(d=2);!d&&this.chart.options.chart.alignTicks!==!1&&c.alignTicks!==!1&&(o(this.chart[this.coll],function(c){var d=c.options,e=c.horiz,d=[e?d.left:d.top,e?d.width:d.height,d.pane].join(\",\");a[d]?c.series.length&&(b=!0):a[d]=1}),b&&(d=sa(this.len/e)+1));if(d<4)this.finalTickAmt=d,d=5;this.tickAmount=d},adjustTickAmount:function(){var a=this.tickInterval,b=this.tickPositions,c=this.tickAmount,\nd=this.finalTickAmt,e=b&&b.length;if(e<c){for(;b.length<c;)b.push(ea(b[b.length-1]+a));this.transA*=(e-1)/(c-1);this.max=b[b.length-1]}else e>c&&(this.tickInterval*=2,this.setTickPositions());if(s(d)){for(a=c=b.length;a--;)(d===3&&a%2===1||d<=2&&a>0&&a<c-1)&&b.splice(a,1);this.finalTickAmt=v}},setScale:function(){var a,b;this.oldMin=this.min;this.oldMax=this.max;this.oldAxisLength=this.len;this.setAxisSize();b=this.len!==this.oldAxisLength;o(this.series,function(b){if(b.isDirtyData||b.isDirty||b.xAxis.isDirty)a=\n!0});if(b||a||this.isLinked||this.forceRedraw||this.userMin!==this.oldUserMin||this.userMax!==this.oldUserMax){if(this.resetStacks&&this.resetStacks(),this.forceRedraw=!1,this.getSeriesExtremes(),this.setTickInterval(),this.oldUserMin=this.userMin,this.oldUserMax=this.userMax,!this.isDirty)this.isDirty=b||this.min!==this.oldMin||this.max!==this.oldMax}else this.cleanStacks&&this.cleanStacks()},setExtremes:function(a,b,c,d,e){var f=this,g=f.chart,c=p(c,!0);o(f.series,function(a){delete a.kdTree});\ne=r(e,{min:a,max:b});I(f,\"setExtremes\",e,function(){f.userMin=a;f.userMax=b;f.eventArgs=e;c&&g.redraw(d)})},zoom:function(a,b){var c=this.dataMin,d=this.dataMax,e=this.options,f=z(c,p(e.min,c)),e=t(d,p(e.max,d));this.allowZoomOutside||(s(c)&&a<=f&&(a=f),s(d)&&b>=e&&(b=e));this.displayBtn=a!==v||b!==v;this.setExtremes(a,b,!1,v,{trigger:\"zoom\"});return!0},setAxisSize:function(){var a=this.chart,b=this.options,c=b.offsetLeft||0,d=this.horiz,e=p(b.width,a.plotWidth-c+(b.offsetRight||0)),f=p(b.height,\na.plotHeight),g=p(b.top,a.plotTop),b=p(b.left,a.plotLeft+c),c=/%$/;c.test(f)&&(f=parseFloat(f)/100*a.plotHeight);c.test(g)&&(g=parseFloat(g)/100*a.plotHeight+a.plotTop);this.left=b;this.top=g;this.width=e;this.height=f;this.bottom=a.chartHeight-f-g;this.right=a.chartWidth-e-b;this.len=t(d?e:f,0);this.pos=d?b:g},getExtremes:function(){var a=this.isLog;return{min:a?ea(ia(this.min)):this.min,max:a?ea(ia(this.max)):this.max,dataMin:this.dataMin,dataMax:this.dataMax,userMin:this.userMin,userMax:this.userMax}},\ngetThreshold:function(a){var b=this.isLog,c=b?ia(this.min):this.min,b=b?ia(this.max):this.max;a===null?a=b<0?b:c:c>a?a=c:b<a&&(a=b);return this.translate(a,0,1,0,1)},autoLabelAlign:function(a){a=(p(a,0)-this.side*90+720)%360;return a>15&&a<165?\"right\":a>195&&a<345?\"left\":\"center\"},unsquish:function(){var a=this.ticks,b=this.options.labels,c=this.horiz,d=this.tickInterval,e=d,f=this.len/(((this.categories?1:0)+this.max-this.min)/d),g,h=b.rotation,i=this.chart.renderer.fontMetrics(b.style.fontSize,\na[0]&&a[0].label),j,k=Number.MAX_VALUE,m,l=function(a){a/=f||1;a=a>1?sa(a):1;return a*d};c?(m=s(h)?[h]:f<p(b.autoRotationLimit,80)&&!b.staggerLines&&!b.step&&b.autoRotation)&&o(m,function(a){var b;if(a===h||a&&a>=-90&&a<=90)j=l(N(i.h/aa(ga*a))),b=j+N(a/360),b<k&&(k=b,g=a,e=j)}):b.step||(e=l(i.h));this.autoRotation=m;this.labelRotation=g;return e},renderUnsquish:function(){var a=this.chart,b=a.renderer,c=this.tickPositions,d=this.ticks,e=this.options.labels,f=this.horiz,g=a.margin,h=this.categories?\nc.length:c.length-1,i=this.slotWidth=f&&!e.step&&!e.rotation&&(this.staggerLines||1)*a.plotWidth/h||!f&&(g[3]&&g[3]-a.spacing[3]||a.chartWidth*0.33),j=t(1,w(i-2*(e.padding||5))),k={},g=b.fontMetrics(e.style.fontSize,d[0]&&d[0].label),h=e.style.textOverflow,m,l=0;if(!Aa(e.rotation))k.rotation=e.rotation||0;if(this.autoRotation)o(c,function(a){if((a=d[a])&&a.labelLength>l)l=a.labelLength}),l>j&&l>g.h?k.rotation=this.labelRotation:this.labelRotation=0;else if(i&&(m={width:j+\"px\"},!h)){m.textOverflow=\n\"clip\";for(i=c.length;!f&&i--;)if(j=c[i],j=d[j].label)if(j.styles.textOverflow===\"ellipsis\"&&j.css({textOverflow:\"clip\"}),j.getBBox().height>this.len/c.length-(g.h-g.f))j.specCss={textOverflow:\"ellipsis\"}}if(k.rotation&&(m={width:(l>a.chartHeight*0.5?a.chartHeight*0.33:a.chartHeight)+\"px\"},!h))m.textOverflow=\"ellipsis\";this.labelAlign=k.align=e.align||this.autoLabelAlign(this.labelRotation);o(c,function(a){var b=(a=d[a])&&a.label;if(b)m&&b.css(A(m,b.specCss)),delete b.specCss,b.attr(k),a.rotation=\nk.rotation});this.tickRotCorr=b.rotCorr(g.b,this.labelRotation||0,this.side===2)},hasData:function(){return this.hasVisibleSeries||s(this.min)&&s(this.max)&&!!this.tickPositions},getOffset:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.tickPositions,f=a.ticks,g=a.horiz,h=a.side,i=b.inverted?[1,0,3,2][h]:h,j,k,m=0,l,n=0,q=d.title,x=d.labels,T=0,Q=b.axisOffset,b=b.clipOffset,u=[-1,1,1,-1][h],y;j=a.hasData();a.showAxis=k=j||p(d.showEmpty,!0);a.staggerLines=a.horiz&&x.staggerLines;if(!a.axisGroup)a.gridGroup=\nc.g(\"grid\").attr({zIndex:d.gridZIndex||1}).add(),a.axisGroup=c.g(\"axis\").attr({zIndex:d.zIndex||2}).add(),a.labelGroup=c.g(\"axis-labels\").attr({zIndex:x.zIndex||7}).addClass(\"highcharts-\"+a.coll.toLowerCase()+\"-labels\").add();if(j||a.isLinked){if(o(e,function(b){f[b]?f[b].addLabel():f[b]=new Ra(a,b)}),a.renderUnsquish(),o(e,function(b){if(h===0||h===2||{1:\"left\",3:\"right\"}[h]===a.labelAlign)T=t(f[b].getLabelSize(),T)}),a.staggerLines)T*=a.staggerLines,a.labelOffset=T}else for(y in f)f[y].destroy(),\ndelete f[y];if(q&&q.text&&q.enabled!==!1){if(!a.axisTitle)a.axisTitle=c.text(q.text,0,0,q.useHTML).attr({zIndex:7,rotation:q.rotation||0,align:q.textAlign||{low:\"left\",middle:\"center\",high:\"right\"}[q.align]}).addClass(\"highcharts-\"+this.coll.toLowerCase()+\"-title\").css(q.style).add(a.axisGroup),a.axisTitle.isNew=!0;if(k)m=a.axisTitle.getBBox()[g?\"height\":\"width\"],l=q.offset,n=s(l)?0:p(q.margin,g?5:10);a.axisTitle[k?\"show\":\"hide\"]()}a.offset=u*p(d.offset,Q[h]);a.tickRotCorr=a.tickRotCorr||{x:0,y:0};\nc=h===2?a.tickRotCorr.y:0;g=T+n+(T&&u*(g?p(x.y,a.tickRotCorr.y+8):x.x)-c);a.axisTitleMargin=p(l,g);Q[h]=t(Q[h],a.axisTitleMargin+m+u*a.offset,g);d=d.offset?0:V(d.lineWidth/2)*2;b[i]=t(b[i],d)},getLinePath:function(a){var b=this.chart,c=this.opposite,d=this.offset,e=this.horiz,f=this.left+(c?this.width:0)+d,d=b.chartHeight-this.bottom-(c?this.height:0)+d;c&&(a*=-1);return b.renderer.crispLine([\"M\",e?this.left:f,e?d:this.top,\"L\",e?b.chartWidth-this.right:f,e?d:b.chartHeight-this.bottom],a)},getTitlePosition:function(){var a=\nthis.horiz,b=this.left,c=this.top,d=this.len,e=this.options.title,f=a?b:c,g=this.opposite,h=this.offset,i=e.x||0,j=e.y||0,k=F(e.style.fontSize||12),d={low:f+(a?0:d),middle:f+d/2,high:f+(a?d:0)}[e.align],b=(a?c+this.height:b)+(a?1:-1)*(g?-1:1)*this.axisTitleMargin+(this.side===2?k:0);return{x:a?d+i:b+(g?this.width:0)+h+i,y:a?b+j-(g?this.height:0)+h:d+j}},render:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.isLog,f=a.isLinked,g=a.tickPositions,h=a.axisTitle,i=a.ticks,j=a.minorTicks,k=\na.alternateBands,m=d.stackLabels,l=d.alternateGridColor,n=a.tickmarkOffset,q=d.lineWidth,x,p=b.hasRendered&&s(a.oldMin)&&!isNaN(a.oldMin),Q=a.showAxis,u=c.globalAnimation,y,t;a.labelEdge.length=0;a.overlap=!1;o([i,j,k],function(a){for(var b in a)a[b].isActive=!1});if(a.hasData()||f){a.minorTickInterval&&!a.categories&&o(a.getMinorTickPositions(),function(b){j[b]||(j[b]=new Ra(a,b,\"minor\"));p&&j[b].isNew&&j[b].render(null,!0);j[b].render(null,!1,1)});if(g.length&&(o(g,function(b,c){if(!f||b>=a.min&&\nb<=a.max)i[b]||(i[b]=new Ra(a,b)),p&&i[b].isNew&&i[b].render(c,!0,0.1),i[b].render(c)}),n&&(a.min===0||a.single)))i[-1]||(i[-1]=new Ra(a,-1,null,!0)),i[-1].render(-1);l&&o(g,function(b,c){if(c%2===0&&b<a.max)k[b]||(k[b]=new B.PlotLineOrBand(a)),y=b+n,t=g[c+1]!==v?g[c+1]+n:a.max,k[b].options={from:e?ia(y):y,to:e?ia(t):t,color:l},k[b].render(),k[b].isActive=!0});if(!a._addedPlotLB)o((d.plotLines||[]).concat(d.plotBands||[]),function(b){a.addPlotBandOrLine(b)}),a._addedPlotLB=!0}o([i,j,k],function(a){var c,\nd,e=[],f=u?u.duration||500:0,g=function(){for(d=e.length;d--;)a[e[d]]&&!a[e[d]].isActive&&(a[e[d]].destroy(),delete a[e[d]])};for(c in a)if(!a[c].isActive)a[c].render(c,!1,0),a[c].isActive=!1,e.push(c);a===k||!b.hasRendered||!f?g():f&&setTimeout(g,f)});if(q)x=a.getLinePath(q),a.axisLine?a.axisLine.animate({d:x}):a.axisLine=c.path(x).attr({stroke:d.lineColor,\"stroke-width\":q,zIndex:7}).add(a.axisGroup),a.axisLine[Q?\"show\":\"hide\"]();if(h&&Q)h[h.isNew?\"attr\":\"animate\"](a.getTitlePosition()),h.isNew=\n!1;m&&m.enabled&&a.renderStackTotals();a.isDirty=!1},redraw:function(){this.render();o(this.plotLinesAndBands,function(a){a.render()});o(this.series,function(a){a.isDirty=!0})},destroy:function(a){var b=this,c=b.stacks,d,e=b.plotLinesAndBands;a||Z(b);for(d in c)Oa(c[d]),c[d]=null;o([b.ticks,b.minorTicks,b.alternateBands],function(a){Oa(a)});for(a=e.length;a--;)e[a].destroy();o(\"stackTotalGroup,axisLine,axisTitle,axisGroup,cross,gridGroup,labelGroup\".split(\",\"),function(a){b[a]&&(b[a]=b[a].destroy())});\nthis.cross&&this.cross.destroy()},drawCrosshair:function(a,b){var c,d=this.crosshair,e=d.animation;if(!this.crosshair||(s(b)||!p(this.crosshair.snap,!0))===!1||b&&b.series&&b.series[this.coll]!==this)this.hideCrosshair();else if(p(d.snap,!0)?s(b)&&(c=this.isXAxis?b.plotX:this.len-b.plotY):c=this.horiz?a.chartX-this.pos:this.len-a.chartY+this.pos,c=this.isRadial?this.getPlotLinePath(this.isXAxis?b.x:p(b.stackY,b.y))||null:this.getPlotLinePath(null,null,null,null,c)||null,c===null)this.hideCrosshair();\nelse if(this.cross)this.cross.attr({visibility:\"visible\"})[e?\"animate\":\"attr\"]({d:c},e);else{e=this.categories&&!this.isRadial;e={\"stroke-width\":d.width||(e?this.transA:1),stroke:d.color||(e?\"rgba(155,200,255,0.2)\":\"#C0C0C0\"),zIndex:d.zIndex||2};if(d.dashStyle)e.dashstyle=d.dashStyle;this.cross=this.chart.renderer.path(c).attr(e).add()}},hideCrosshair:function(){this.cross&&this.cross.hide()}};r(ha.prototype,{getPlotBandPath:function(a,b){var c=this.getPlotLinePath(b,null,null,!0),d=this.getPlotLinePath(a,\nnull,null,!0);d&&c&&d.toString()!==c.toString()?d.push(c[4],c[5],c[1],c[2]):d=null;return d},addPlotBand:function(a){return this.addPlotBandOrLine(a,\"plotBands\")},addPlotLine:function(a){return this.addPlotBandOrLine(a,\"plotLines\")},addPlotBandOrLine:function(a,b){var c=(new B.PlotLineOrBand(this,a)).render(),d=this.userOptions;c&&(b&&(d[b]=d[b]||[],d[b].push(a)),this.plotLinesAndBands.push(c));return c},removePlotBandOrLine:function(a){for(var b=this.plotLinesAndBands,c=this.options,d=this.userOptions,\ne=b.length;e--;)b[e].id===a&&b[e].destroy();o([c.plotLines||[],d.plotLines||[],c.plotBands||[],d.plotBands||[]],function(b){for(e=b.length;e--;)b[e].id===a&&ja(b,b[e])})}});ha.prototype.getTimeTicks=function(a,b,c,d){var e=[],f={},g=S.global.useUTC,h,i=new ya(b-Va(b)),j=a.unitRange,k=a.count;if(s(b)){i[Db](j>=E.second?0:k*V(i.getMilliseconds()/k));if(j>=E.second)i[Eb](j>=E.minute?0:k*V(i.getSeconds()/k));if(j>=E.minute)i[Fb](j>=E.hour?0:k*V(i[qb]()/k));if(j>=E.hour)i[Gb](j>=E.day?0:k*V(i[rb]()/k));\nif(j>=E.day)i[tb](j>=E.month?1:k*V(i[Wa]()/k));j>=E.month&&(i[ub](j>=E.year?0:k*V(i[Xa]()/k)),h=i[Ya]());j>=E.year&&(h-=h%k,i[vb](h));if(j===E.week)i[tb](i[Wa]()-i[sb]()+p(d,1));b=1;if(mb||bb)i=i.getTime(),i=new ya(i+Va(i));h=i[Ya]();for(var d=i.getTime(),m=i[Xa](),l=i[Wa](),n=(E.day+(g?Va(i):i.getTimezoneOffset()*6E4))%E.day;d<c;)e.push(d),j===E.year?d=db(h+b*k,0):j===E.month?d=db(h,m+b*k):!g&&(j===E.day||j===E.week)?d=db(h,m,l+b*k*(j===E.day?1:7)):d+=j*k,b++;e.push(d);o(ib(e,function(a){return j<=\nE.hour&&a%E.day===n}),function(a){f[a]=\"day\"})}e.info=r(a,{higherRanks:f,totalRange:j*k});return e};ha.prototype.normalizeTimeTickInterval=function(a,b){var c=b||[[\"millisecond\",[1,2,5,10,20,25,50,100,200,500]],[\"second\",[1,2,5,10,15,30]],[\"minute\",[1,2,5,10,15,30]],[\"hour\",[1,2,3,4,6,8,12]],[\"day\",[1,2]],[\"week\",[1,2]],[\"month\",[1,2,3,4,6]],[\"year\",null]],d=c[c.length-1],e=E[d[0]],f=d[1],g;for(g=0;g<c.length;g++)if(d=c[g],e=E[d[0]],f=d[1],c[g+1]&&a<=(e*f[f.length-1]+E[c[g+1][0]])/2)break;e===E.year&&\na<5*e&&(f=[1,2,5]);c=ob(a/e,f,d[0]===\"year\"?t(nb(a/e),1):1);return{unitRange:e,count:c,unitName:d[0]}};ha.prototype.getLogTickPositions=function(a,b,c,d){var e=this.options,f=this.len,g=[];if(!d)this._minorAutoInterval=null;if(a>=0.5)a=w(a),g=this.getLinearTickPositions(a,b,c);else if(a>=0.08)for(var f=V(b),h,i,j,k,m,e=a>0.3?[1,2,4]:a>0.15?[1,2,4,6,8]:[1,2,3,4,5,6,7,8,9];f<c+1&&!m;f++){i=e.length;for(h=0;h<i&&!m;h++)j=Ba(ia(f)*e[h]),j>b&&(!d||k<=c)&&k!==v&&g.push(k),k>c&&(m=!0),k=j}else if(b=ia(b),\nc=ia(c),a=e[d?\"minorTickInterval\":\"tickInterval\"],a=p(a===\"auto\"?null:a,this._minorAutoInterval,(c-b)*(e.tickPixelInterval/(d?5:1))/((d?f/this.tickPositions.length:f)||1)),a=ob(a,null,nb(a)),g=Ta(this.getLinearTickPositions(a,b,c),Ba),!d)this._minorAutoInterval=a/5;if(!d)this.tickInterval=a;return g};var Mb=B.Tooltip=function(){this.init.apply(this,arguments)};Mb.prototype={init:function(a,b){var c=b.borderWidth,d=b.style,e=F(d.padding);this.chart=a;this.options=b;this.crosshairs=[];this.now={x:0,\ny:0};this.isHidden=!0;this.label=a.renderer.label(\"\",0,0,b.shape||\"callout\",null,null,b.useHTML,null,\"tooltip\").attr({padding:e,fill:b.backgroundColor,\"stroke-width\":c,r:b.borderRadius,zIndex:8}).css(d).css({padding:0}).add().attr({y:-9999});fa||this.label.shadow(b.shadow);this.shared=b.shared},destroy:function(){if(this.label)this.label=this.label.destroy();clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout)},move:function(a,b,c,d){var e=this,f=e.now,g=e.options.animation!==!1&&!e.isHidden&&\n(N(a-f.x)>1||N(b-f.y)>1),h=e.followPointer||e.len>1;r(f,{x:g?(2*f.x+a)/3:a,y:g?(f.y+b)/2:b,anchorX:h?v:g?(2*f.anchorX+c)/3:c,anchorY:h?v:g?(f.anchorY+d)/2:d});e.label.attr(f);if(g)clearTimeout(this.tooltipTimeout),this.tooltipTimeout=setTimeout(function(){e&&e.move(a,b,c,d)},32)},hide:function(a){var b=this;clearTimeout(this.hideTimer);if(!this.isHidden)this.hideTimer=setTimeout(function(){b.label.fadeOut();b.isHidden=!0},p(a,this.options.hideDelay,500))},getAnchor:function(a,b){var c,d=this.chart,\ne=d.inverted,f=d.plotTop,g=d.plotLeft,h=0,i=0,j,k,a=ra(a);c=a[0].tooltipPos;this.followPointer&&b&&(b.chartX===v&&(b=d.pointer.normalize(b)),c=[b.chartX-d.plotLeft,b.chartY-f]);c||(o(a,function(a){j=a.series.yAxis;k=a.series.xAxis;h+=a.plotX+(!e&&k?k.left-g:0);i+=(a.plotLow?(a.plotLow+a.plotHigh)/2:a.plotY)+(!e&&j?j.top-f:0)}),h/=a.length,i/=a.length,c=[e?d.plotWidth-i:h,this.shared&&!e&&a.length>1&&b?b.chartY-f:e?d.plotHeight-h:i]);return Ta(c,w)},getPosition:function(a,b,c){var d=this.chart,e=this.distance,\nf={},g=c.h||0,h,i=[\"y\",d.chartHeight,b,c.plotY+d.plotTop,d.plotTop,d.plotTop+d.plotHeight],j=[\"x\",d.chartWidth,a,c.plotX+d.plotLeft,d.plotLeft,d.plotLeft+d.plotWidth],k=p(c.ttBelow,d.inverted&&!c.negative||!d.inverted&&c.negative),m=function(a,b,c,d,h,i){var j=c<d-e,l=d+e+c<b,m=d-e-c;d+=e;if(k&&l)f[a]=d;else if(!k&&j)f[a]=m;else if(j)f[a]=z(i-c,m-g<0?m:m-g);else if(l)f[a]=t(h,d+g+c>b?d:d+g);else return!1},l=function(a,b,c,d){if(d<e||d>b-e)return!1;else f[a]=d<c/2?1:d>b-c/2?b-c-2:d-c/2},n=function(a){var b=\ni;i=j;j=b;h=a},q=function(){m.apply(0,i)!==!1?l.apply(0,j)===!1&&!h&&(n(!0),q()):h?f.x=f.y=0:(n(!0),q())};(d.inverted||this.len>1)&&n();q();return f},defaultFormatter:function(a){var b=this.points||ra(this),c;c=[a.tooltipFooterHeaderFormatter(b[0])];c=c.concat(a.bodyFormatter(b));c.push(a.tooltipFooterHeaderFormatter(b[0],!0));return c.join(\"\")},refresh:function(a,b){var c=this.chart,d=this.label,e=this.options,f,g,h,i={},j,k=[];j=e.formatter||this.defaultFormatter;var i=c.hoverPoints,m,l=this.shared;\nclearTimeout(this.hideTimer);this.followPointer=ra(a)[0].series.tooltipOptions.followPointer;h=this.getAnchor(a,b);f=h[0];g=h[1];l&&(!a.series||!a.series.noSharedTooltip)?(c.hoverPoints=a,i&&o(i,function(a){a.setState()}),o(a,function(a){a.setState(\"hover\");k.push(a.getLabelConfig())}),i={x:a[0].category,y:a[0].y},i.points=k,this.len=k.length,a=a[0]):i=a.getLabelConfig();j=j.call(i,this);i=a.series;this.distance=p(i.tooltipOptions.distance,16);j===!1?this.hide():(this.isHidden&&(kb(d),d.attr(\"opacity\",\n1).show()),d.attr({text:j}),m=e.borderColor||a.color||i.color||\"#606060\",d.attr({stroke:m}),this.updatePosition({plotX:f,plotY:g,negative:a.negative,ttBelow:a.ttBelow,h:h[2]||0}),this.isHidden=!1);I(c,\"tooltipRefresh\",{text:j,x:f+c.plotLeft,y:g+c.plotTop,borderColor:m})},updatePosition:function(a){var b=this.chart,c=this.label,c=(this.options.positioner||this.getPosition).call(this,c.width,c.height,a);this.move(w(c.x),w(c.y||0),a.plotX+b.plotLeft,a.plotY+b.plotTop)},getXDateFormat:function(a,b,c){var d,\nb=b.dateTimeLabelFormats,e=c&&c.closestPointRange,f,g={millisecond:15,second:12,minute:9,hour:6,day:3},h,i=\"millisecond\";if(e){h=Ma(\"%m-%d %H:%M:%S.%L\",a.x);for(f in E){if(e===E.week&&+Ma(\"%w\",a.x)===c.options.startOfWeek&&h.substr(6)===\"00:00:00.000\"){f=\"week\";break}else if(E[f]>e){f=i;break}else if(g[f]&&h.substr(g[f])!==\"01-01 00:00:00.000\".substr(g[f]))break;f!==\"week\"&&(i=f)}f&&(d=b[f])}else d=b.day;return d||b.year},tooltipFooterHeaderFormatter:function(a,b){var c=b?\"footer\":\"header\",d=a.series,\ne=d.tooltipOptions,f=e.xDateFormat,g=d.xAxis,h=g&&g.options.type===\"datetime\"&&qa(a.key),c=e[c+\"Format\"];h&&!f&&(f=this.getXDateFormat(a,e,g));h&&f&&(c=c.replace(\"{point.key}\",\"{point.key:\"+f+\"}\"));return Ha(c,{point:a,series:d})},bodyFormatter:function(a){return Ta(a,function(a){var c=a.series.tooltipOptions;return(c.pointFormatter||a.point.tooltipFormatter).call(a.point,c.pointFormat)})}};var oa;$a=C.documentElement.ontouchstart!==v;var Ua=B.Pointer=function(a,b){this.init(a,b)};Ua.prototype={init:function(a,\nb){var c=b.chart,d=c.events,e=fa?\"\":c.zoomType,c=a.inverted,f;this.options=b;this.chart=a;this.zoomX=f=/x/.test(e);this.zoomY=e=/y/.test(e);this.zoomHor=f&&!c||e&&c;this.zoomVert=e&&!c||f&&c;this.hasZoom=f||e;this.runChartClick=d&&!!d.click;this.pinchDown=[];this.lastValidTouch={};if(B.Tooltip&&b.tooltip.enabled)a.tooltip=new Mb(a,b.tooltip),this.followTouchMove=p(b.tooltip.followTouchMove,!0);this.setDOMEvents()},normalize:function(a,b){var c,d,a=a||window.event,a=Sb(a);if(!a.target)a.target=a.srcElement;\nd=a.touches?a.touches.length?a.touches.item(0):a.changedTouches[0]:a;if(!b)this.chartPosition=b=Rb(this.chart.container);d.pageX===v?(c=t(a.x,a.clientX-b.left),d=a.y):(c=d.pageX-b.left,d=d.pageY-b.top);return r(a,{chartX:w(c),chartY:w(d)})},getCoordinates:function(a){var b={xAxis:[],yAxis:[]};o(this.chart.axes,function(c){b[c.isXAxis?\"xAxis\":\"yAxis\"].push({axis:c,value:c.toValue(a[c.horiz?\"chartX\":\"chartY\"])})});return b},runPointActions:function(a){var b=this.chart,c=b.series,d=b.tooltip,e=d?d.shared:\n!1,f=b.hoverPoint,g=b.hoverSeries,h,i=b.chartWidth,j,k,m=[],l,n;if(!e&&!g)for(h=0;h<c.length;h++)if(c[h].directTouch||!c[h].options.stickyTracking)c=[];!e&&g&&g.directTouch&&f?l=f:(o(c,function(b){j=b.noSharedTooltip&&e;k=!e&&b.directTouch;b.visible&&!j&&!k&&p(b.options.enableMouseTracking,!0)&&(n=b.searchPoint(a,!j&&b.kdDimensions===1))&&m.push(n)}),o(m,function(a){if(a&&typeof a.dist===\"number\"&&a.dist<i)i=a.dist,l=a}));if(l&&(l!==this.prevKDPoint||d&&d.isHidden)){if(e&&!l.series.noSharedTooltip){for(h=\nm.length;h--;)(m[h].clientX!==l.clientX||m[h].series.noSharedTooltip)&&m.splice(h,1);m.length&&d&&d.refresh(m,a);o(m,function(b){b.onMouseOver(a,b!==(g&&g.directTouch&&f||l))})}else if(d&&d.refresh(l,a),!g||!g.directTouch)l.onMouseOver(a);this.prevKDPoint=l}else c=g&&g.tooltipOptions.followPointer,d&&c&&!d.isHidden&&(c=d.getAnchor([{}],a),d.updatePosition({plotX:c[0],plotY:c[1]}));if(d&&!this._onDocumentMouseMove)this._onDocumentMouseMove=function(a){if(Y[oa])Y[oa].pointer.onDocumentMouseMove(a)},\nH(C,\"mousemove\",this._onDocumentMouseMove);o(b.axes,function(b){b.drawCrosshair(a,p(l,f))})},reset:function(a,b){var c=this.chart,d=c.hoverSeries,e=c.hoverPoint,f=c.hoverPoints,g=c.tooltip,h=g&&g.shared?f:e;(a=a&&g&&h)&&ra(h)[0].plotX===v&&(a=!1);if(a)g.refresh(h),e&&(e.setState(e.state,!0),o(c.axes,function(a){p(a.options.crosshair&&a.options.crosshair.snap,!0)?a.drawCrosshair(null,e):a.hideCrosshair()}));else{if(e)e.onMouseOut();f&&o(f,function(a){a.setState()});if(d)d.onMouseOut();g&&g.hide(b);\nif(this._onDocumentMouseMove)Z(C,\"mousemove\",this._onDocumentMouseMove),this._onDocumentMouseMove=null;o(c.axes,function(a){a.hideCrosshair()});this.hoverX=c.hoverPoints=c.hoverPoint=null}},scaleGroups:function(a,b){var c=this.chart,d;o(c.series,function(e){d=a||e.getPlotBox();e.xAxis&&e.xAxis.zoomEnabled&&(e.group.attr(d),e.markerGroup&&(e.markerGroup.attr(d),e.markerGroup.clip(b?c.clipRect:null)),e.dataLabelsGroup&&e.dataLabelsGroup.attr(d))});c.clipRect.attr(b||c.clipBox)},dragStart:function(a){var b=\nthis.chart;b.mouseIsDown=a.type;b.cancelClick=!1;b.mouseDownX=this.mouseDownX=a.chartX;b.mouseDownY=this.mouseDownY=a.chartY},drag:function(a){var b=this.chart,c=b.options.chart,d=a.chartX,e=a.chartY,f=this.zoomHor,g=this.zoomVert,h=b.plotLeft,i=b.plotTop,j=b.plotWidth,k=b.plotHeight,m,l=this.selectionMarker,n=this.mouseDownX,q=this.mouseDownY,x=c.panKey&&a[c.panKey+\"Key\"];if(!l||!l.touch)if(d<h?d=h:d>h+j&&(d=h+j),e<i?e=i:e>i+k&&(e=i+k),this.hasDragged=Math.sqrt(Math.pow(n-d,2)+Math.pow(q-e,2)),this.hasDragged>\n10){m=b.isInsidePlot(n-h,q-i);if(b.hasCartesianSeries&&(this.zoomX||this.zoomY)&&m&&!x&&!l)this.selectionMarker=l=b.renderer.rect(h,i,f?1:j,g?1:k,0).attr({fill:c.selectionMarkerFill||\"rgba(69,114,167,0.25)\",zIndex:7}).add();l&&f&&(d-=n,l.attr({width:N(d),x:(d>0?0:d)+n}));l&&g&&(d=e-q,l.attr({height:N(d),y:(d>0?0:d)+q}));m&&!l&&c.panning&&b.pan(a,c.panning)}},drop:function(a){var b=this,c=this.chart,d=this.hasPinched;if(this.selectionMarker){var e={xAxis:[],yAxis:[],originalEvent:a.originalEvent||\na},f=this.selectionMarker,g=f.attr?f.attr(\"x\"):f.x,h=f.attr?f.attr(\"y\"):f.y,i=f.attr?f.attr(\"width\"):f.width,j=f.attr?f.attr(\"height\"):f.height,k;if(this.hasDragged||d)o(c.axes,function(c){if(c.zoomEnabled&&s(c.min)&&(d||b[{xAxis:\"zoomX\",yAxis:\"zoomY\"}[c.coll]])){var f=c.horiz,n=a.type===\"touchend\"?c.minPixelPadding:0,q=c.toValue((f?g:h)+n),f=c.toValue((f?g+i:h+j)-n);e[c.coll].push({axis:c,min:z(q,f),max:t(q,f)});k=!0}}),k&&I(c,\"selection\",e,function(a){c.zoom(r(a,d?{animation:!1}:null))});this.selectionMarker=\nthis.selectionMarker.destroy();d&&this.scaleGroups()}if(c)L(c.container,{cursor:c._cursor}),c.cancelClick=this.hasDragged>10,c.mouseIsDown=this.hasDragged=this.hasPinched=!1,this.pinchDown=[]},onContainerMouseDown:function(a){a=this.normalize(a);a.preventDefault&&a.preventDefault();this.dragStart(a)},onDocumentMouseUp:function(a){Y[oa]&&Y[oa].pointer.drop(a)},onDocumentMouseMove:function(a){var b=this.chart,c=this.chartPosition,a=this.normalize(a,c);c&&!this.inClass(a.target,\"highcharts-tracker\")&&\n!b.isInsidePlot(a.chartX-b.plotLeft,a.chartY-b.plotTop)&&this.reset()},onContainerMouseLeave:function(){var a=Y[oa];if(a)a.pointer.reset(),a.pointer.chartPosition=null},onContainerMouseMove:function(a){var b=this.chart;oa=b.index;a=this.normalize(a);a.returnValue=!1;b.mouseIsDown===\"mousedown\"&&this.drag(a);(this.inClass(a.target,\"highcharts-tracker\")||b.isInsidePlot(a.chartX-b.plotLeft,a.chartY-b.plotTop))&&!b.openMenu&&this.runPointActions(a)},inClass:function(a,b){for(var c;a;){if(c=J(a,\"class\"))if(c.indexOf(b)!==\n-1)return!0;else if(c.indexOf(\"highcharts-container\")!==-1)return!1;a=a.parentNode}},onTrackerMouseOut:function(a){var b=this.chart.hoverSeries,c=(a=a.relatedTarget||a.toElement)&&a.point&&a.point.series;if(b&&!b.options.stickyTracking&&!this.inClass(a,\"highcharts-tooltip\")&&c!==b)b.onMouseOut()},onContainerClick:function(a){var b=this.chart,c=b.hoverPoint,d=b.plotLeft,e=b.plotTop,a=this.normalize(a);a.originalEvent=a;b.cancelClick||(c&&this.inClass(a.target,\"highcharts-tracker\")?(I(c.series,\"click\",\nr(a,{point:c})),b.hoverPoint&&c.firePointEvent(\"click\",a)):(r(a,this.getCoordinates(a)),b.isInsidePlot(a.chartX-d,a.chartY-e)&&I(b,\"click\",a)))},setDOMEvents:function(){var a=this,b=a.chart.container;b.onmousedown=function(b){a.onContainerMouseDown(b)};b.onmousemove=function(b){a.onContainerMouseMove(b)};b.onclick=function(b){a.onContainerClick(b)};H(b,\"mouseleave\",a.onContainerMouseLeave);ab===1&&H(C,\"mouseup\",a.onDocumentMouseUp);if($a)b.ontouchstart=function(b){a.onContainerTouchStart(b)},b.ontouchmove=\nfunction(b){a.onContainerTouchMove(b)},ab===1&&H(C,\"touchend\",a.onDocumentTouchEnd)},destroy:function(){var a;Z(this.chart.container,\"mouseleave\",this.onContainerMouseLeave);ab||(Z(C,\"mouseup\",this.onDocumentMouseUp),Z(C,\"touchend\",this.onDocumentTouchEnd));clearInterval(this.tooltipTimeout);for(a in this)this[a]=null}};r(B.Pointer.prototype,{pinchTranslate:function(a,b,c,d,e,f){(this.zoomHor||this.pinchHor)&&this.pinchTranslateDirection(!0,a,b,c,d,e,f);(this.zoomVert||this.pinchVert)&&this.pinchTranslateDirection(!1,\na,b,c,d,e,f)},pinchTranslateDirection:function(a,b,c,d,e,f,g,h){var i=this.chart,j=a?\"x\":\"y\",k=a?\"X\":\"Y\",m=\"chart\"+k,l=a?\"width\":\"height\",n=i[\"plot\"+(a?\"Left\":\"Top\")],q,x,p=h||1,o=i.inverted,u=i.bounds[a?\"h\":\"v\"],t=b.length===1,s=b[0][m],r=c[0][m],w=!t&&b[1][m],v=!t&&c[1][m],z,c=function(){!t&&N(s-w)>20&&(p=h||N(r-v)/N(s-w));x=(n-r)/p+s;q=i[\"plot\"+(a?\"Width\":\"Height\")]/p};c();b=x;b<u.min?(b=u.min,z=!0):b+q>u.max&&(b=u.max-q,z=!0);z?(r-=0.8*(r-g[j][0]),t||(v-=0.8*(v-g[j][1])),c()):g[j]=[r,v];o||(f[j]=\nx-n,f[l]=q);f=o?1/p:p;e[l]=q;e[j]=b;d[o?a?\"scaleY\":\"scaleX\":\"scale\"+k]=p;d[\"translate\"+k]=f*n+(r-f*s)},pinch:function(a){var b=this,c=b.chart,d=b.pinchDown,e=a.touches,f=e.length,g=b.lastValidTouch,h=b.hasZoom,i=b.selectionMarker,j={},k=f===1&&(b.inClass(a.target,\"highcharts-tracker\")&&c.runTrackerClick||b.runChartClick),m={};if(f>1)b.initiated=!0;h&&b.initiated&&!k&&a.preventDefault();Ta(e,function(a){return b.normalize(a)});if(a.type===\"touchstart\")o(e,function(a,b){d[b]={chartX:a.chartX,chartY:a.chartY}}),\ng.x=[d[0].chartX,d[1]&&d[1].chartX],g.y=[d[0].chartY,d[1]&&d[1].chartY],o(c.axes,function(a){if(a.zoomEnabled){var b=c.bounds[a.horiz?\"h\":\"v\"],d=a.minPixelPadding,e=a.toPixels(p(a.options.min,a.dataMin)),f=a.toPixels(p(a.options.max,a.dataMax)),g=z(e,f),e=t(e,f);b.min=z(a.pos,g-d);b.max=t(a.pos+a.len,e+d)}}),b.res=!0;else if(d.length){if(!i)b.selectionMarker=i=r({destroy:ta,touch:!0},c.plotBox);b.pinchTranslate(d,e,j,i,m,g);b.hasPinched=h;b.scaleGroups(j,m);if(!h&&b.followTouchMove&&f===1)this.runPointActions(b.normalize(a));\nelse if(b.res)b.res=!1,this.reset(!1,0)}},touch:function(a,b){var c=this.chart;oa=c.index;a.touches.length===1?(a=this.normalize(a),c.isInsidePlot(a.chartX-c.plotLeft,a.chartY-c.plotTop)&&!c.openMenu?(b&&this.runPointActions(a),this.pinch(a)):b&&this.reset()):a.touches.length===2&&this.pinch(a)},onContainerTouchStart:function(a){this.touch(a,!0)},onContainerTouchMove:function(a){this.touch(a)},onDocumentTouchEnd:function(a){Y[oa]&&Y[oa].pointer.drop(a)}});if(K.PointerEvent||K.MSPointerEvent){var va=\n{},Ab=!!K.PointerEvent,Wb=function(){var a,b=[];b.item=function(a){return this[a]};for(a in va)va.hasOwnProperty(a)&&b.push({pageX:va[a].pageX,pageY:va[a].pageY,target:va[a].target});return b},Bb=function(a,b,c,d){a=a.originalEvent||a;if((a.pointerType===\"touch\"||a.pointerType===a.MSPOINTER_TYPE_TOUCH)&&Y[oa])d(a),d=Y[oa].pointer,d[b]({type:c,target:a.currentTarget,preventDefault:ta,touches:Wb()})};r(Ua.prototype,{onContainerPointerDown:function(a){Bb(a,\"onContainerTouchStart\",\"touchstart\",function(a){va[a.pointerId]=\n{pageX:a.pageX,pageY:a.pageY,target:a.currentTarget}})},onContainerPointerMove:function(a){Bb(a,\"onContainerTouchMove\",\"touchmove\",function(a){va[a.pointerId]={pageX:a.pageX,pageY:a.pageY};if(!va[a.pointerId].target)va[a.pointerId].target=a.currentTarget})},onDocumentPointerUp:function(a){Bb(a,\"onDocumentTouchEnd\",\"touchend\",function(a){delete va[a.pointerId]})},batchMSEvents:function(a){a(this.chart.container,Ab?\"pointerdown\":\"MSPointerDown\",this.onContainerPointerDown);a(this.chart.container,Ab?\n\"pointermove\":\"MSPointerMove\",this.onContainerPointerMove);a(C,Ab?\"pointerup\":\"MSPointerUp\",this.onDocumentPointerUp)}});Sa(Ua.prototype,\"init\",function(a,b,c){a.call(this,b,c);this.hasZoom&&L(b.container,{\"-ms-touch-action\":O,\"touch-action\":O})});Sa(Ua.prototype,\"setDOMEvents\",function(a){a.apply(this);(this.hasZoom||this.followTouchMove)&&this.batchMSEvents(H)});Sa(Ua.prototype,\"destroy\",function(a){this.batchMSEvents(Z);a.call(this)})}var lb=B.Legend=function(a,b){this.init(a,b)};lb.prototype=\n{init:function(a,b){var c=this,d=b.itemStyle,e=b.itemMarginTop||0;this.options=b;if(b.enabled)c.itemStyle=d,c.itemHiddenStyle=A(d,b.itemHiddenStyle),c.itemMarginTop=e,c.padding=d=p(b.padding,8),c.initialItemX=d,c.initialItemY=d-5,c.maxItemWidth=0,c.chart=a,c.itemHeight=0,c.symbolWidth=p(b.symbolWidth,16),c.pages=[],c.render(),H(c.chart,\"endResize\",function(){c.positionCheckboxes()})},colorizeItem:function(a,b){var c=this.options,d=a.legendItem,e=a.legendLine,f=a.legendSymbol,g=this.itemHiddenStyle.color,\nc=b?c.itemStyle.color:g,h=b?a.legendColor||a.color||\"#CCC\":g,g=a.options&&a.options.marker,i={fill:h},j;d&&d.css({fill:c,color:c});e&&e.attr({stroke:h});if(f){if(g&&f.isMarker)for(j in i.stroke=h,g=a.convertAttribs(g),g)d=g[j],d!==v&&(i[j]=d);f.attr(i)}},positionItem:function(a){var b=this.options,c=b.symbolPadding,b=!b.rtl,d=a._legendItemPos,e=d[0],d=d[1],f=a.checkbox;(a=a.legendGroup)&&a.element&&a.translate(b?e:this.legendWidth-e-2*c-4,d);if(f)f.x=e,f.y=d},destroyItem:function(a){var b=a.checkbox;\no([\"legendItem\",\"legendLine\",\"legendSymbol\",\"legendGroup\"],function(b){a[b]&&(a[b]=a[b].destroy())});b&&Pa(a.checkbox)},destroy:function(){var a=this.group,b=this.box;if(b)this.box=b.destroy();if(a)this.group=a.destroy()},positionCheckboxes:function(a){var b=this.group.alignAttr,c,d=this.clipHeight||this.legendHeight;if(b)c=b.translateY,o(this.allItems,function(e){var f=e.checkbox,g;f&&(g=c+f.y+(a||0)+3,L(f,{left:b.translateX+e.checkboxOffset+f.x-20+\"px\",top:g+\"px\",display:g>c-6&&g<c+d-6?\"\":O}))})},\nrenderTitle:function(){var a=this.padding,b=this.options.title,c=0;if(b.text){if(!this.title)this.title=this.chart.renderer.label(b.text,a-3,a-4,null,null,null,null,null,\"legend-title\").attr({zIndex:1}).css(b.style).add(this.group);a=this.title.getBBox();c=a.height;this.offsetWidth=a.width;this.contentGroup.attr({translateY:c})}this.titleHeight=c},setText:function(a){var b=this.options;a.legendItem.attr({text:b.labelFormat?Ha(b.labelFormat,a):b.labelFormatter.call(a)})},renderItem:function(a){var b=\nthis.chart,c=b.renderer,d=this.options,e=d.layout===\"horizontal\",f=this.symbolWidth,g=d.symbolPadding,h=this.itemStyle,i=this.itemHiddenStyle,j=this.padding,k=e?p(d.itemDistance,20):0,m=!d.rtl,l=d.width,n=d.itemMarginBottom||0,q=this.itemMarginTop,x=this.initialItemX,o=a.legendItem,s=a.series&&a.series.drawLegendSymbol?a.series:a,u=s.options,u=this.createCheckboxForItem&&u&&u.showCheckbox,y=d.useHTML;if(!o){a.legendGroup=c.g(\"legend-item\").attr({zIndex:1}).add(this.scrollGroup);a.legendItem=o=c.text(\"\",\nm?f+g:-g,this.baseline||0,y).css(A(a.visible?h:i)).attr({align:m?\"left\":\"right\",zIndex:2}).add(a.legendGroup);if(!this.baseline)this.fontMetrics=c.fontMetrics(h.fontSize,o),this.baseline=this.fontMetrics.f+3+q,o.attr(\"y\",this.baseline);s.drawLegendSymbol(this,a);this.setItemEvents&&this.setItemEvents(a,o,y,h,i);this.colorizeItem(a,a.visible);u&&this.createCheckboxForItem(a)}this.setText(a);c=o.getBBox();f=a.checkboxOffset=d.itemWidth||a.legendItemWidth||f+g+c.width+k+(u?20:0);this.itemHeight=g=w(a.legendItemHeight||\nc.height);if(e&&this.itemX-x+f>(l||b.chartWidth-2*j-x-d.x))this.itemX=x,this.itemY+=q+this.lastLineHeight+n,this.lastLineHeight=0;this.maxItemWidth=t(this.maxItemWidth,f);this.lastItemY=q+this.itemY+n;this.lastLineHeight=t(g,this.lastLineHeight);a._legendItemPos=[this.itemX,this.itemY];e?this.itemX+=f:(this.itemY+=q+g+n,this.lastLineHeight=g);this.offsetWidth=l||t((e?this.itemX-x-k:f)+j,this.offsetWidth)},getAllItems:function(){var a=[];o(this.chart.series,function(b){var c=b.options;if(p(c.showInLegend,\n!s(c.linkedTo)?v:!1,!0))a=a.concat(b.legendItems||(c.legendType===\"point\"?b.data:b))});return a},adjustMargins:function(a,b){var c=this.chart,d=this.options,e=d.align.charAt(0)+d.verticalAlign.charAt(0)+d.layout.charAt(0);this.display&&!d.floating&&o([/(lth|ct|rth)/,/(rtv|rm|rbv)/,/(rbh|cb|lbh)/,/(lbv|lm|ltv)/],function(f,g){f.test(e)&&!s(a[g])&&(c[gb[g]]=t(c[gb[g]],c.legend[(g+1)%2?\"legendHeight\":\"legendWidth\"]+[1,-1,-1,1][g]*d[g%2?\"x\":\"y\"]+p(d.margin,12)+b[g]))})},render:function(){var a=this,b=\na.chart,c=b.renderer,d=a.group,e,f,g,h,i=a.box,j=a.options,k=a.padding,m=j.borderWidth,l=j.backgroundColor;a.itemX=a.initialItemX;a.itemY=a.initialItemY;a.offsetWidth=0;a.lastItemY=0;if(!d)a.group=d=c.g(\"legend\").attr({zIndex:7}).add(),a.contentGroup=c.g().attr({zIndex:1}).add(d),a.scrollGroup=c.g().add(a.contentGroup);a.renderTitle();e=a.getAllItems();pb(e,function(a,b){return(a.options&&a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0)});j.reversed&&e.reverse();a.allItems=e;a.display=\nf=!!e.length;a.lastLineHeight=0;o(e,function(b){a.renderItem(b)});g=(j.width||a.offsetWidth)+k;h=a.lastItemY+a.lastLineHeight+a.titleHeight;h=a.handleOverflow(h);h+=k;if(m||l){if(i){if(g>0&&h>0)i[i.isNew?\"attr\":\"animate\"](i.crisp({width:g,height:h})),i.isNew=!1}else a.box=i=c.rect(0,0,g,h,j.borderRadius,m||0).attr({stroke:j.borderColor,\"stroke-width\":m||0,fill:l||O}).add(d).shadow(j.shadow),i.isNew=!0;i[f?\"show\":\"hide\"]()}a.legendWidth=g;a.legendHeight=h;o(e,function(b){a.positionItem(b)});f&&d.align(r({width:g,\nheight:h},j),!0,\"spacingBox\");b.isResizing||this.positionCheckboxes()},handleOverflow:function(a){var b=this,c=this.chart,d=c.renderer,e=this.options,f=e.y,f=c.spacingBox.height+(e.verticalAlign===\"top\"?-f:f)-this.padding,g=e.maxHeight,h,i=this.clipRect,j=e.navigation,k=p(j.animation,!0),m=j.arrowSize||12,l=this.nav,n=this.pages,q=this.padding,x,s=this.allItems,r=function(a){i.attr({height:a});if(b.contentGroup.div)b.contentGroup.div.style.clip=\"rect(\"+q+\"px,9999px,\"+(q+a)+\"px,0)\"};e.layout===\"horizontal\"&&\n(f/=2);g&&(f=z(f,g));n.length=0;if(a>f){this.clipHeight=h=t(f-20-this.titleHeight-q,0);this.currentPage=p(this.currentPage,1);this.fullHeight=a;o(s,function(a,b){var c=a._legendItemPos[1],d=w(a.legendItem.getBBox().height),e=n.length;if(!e||c-n[e-1]>h&&(x||c)!==n[e-1])n.push(x||c),e++;b===s.length-1&&c+d-n[e-1]>h&&n.push(c);c!==x&&(x=c)});if(!i)i=b.clipRect=d.clipRect(0,q,9999,0),b.contentGroup.clip(i);r(h);if(!l)this.nav=l=d.g().attr({zIndex:1}).add(this.group),this.up=d.symbol(\"triangle\",0,0,m,\nm).on(\"click\",function(){b.scroll(-1,k)}).add(l),this.pager=d.text(\"\",15,10).css(j.style).add(l),this.down=d.symbol(\"triangle-down\",0,0,m,m).on(\"click\",function(){b.scroll(1,k)}).add(l);b.scroll(0);a=f}else if(l)r(c.chartHeight),l.hide(),this.scrollGroup.attr({translateY:1}),this.clipHeight=0;return a},scroll:function(a,b){var c=this.pages,d=c.length,e=this.currentPage+a,f=this.clipHeight,g=this.options.navigation,h=g.activeColor,g=g.inactiveColor,i=this.pager,j=this.padding;e>d&&(e=d);if(e>0)b!==\nv&&Qa(b,this.chart),this.nav.attr({translateX:j,translateY:f+this.padding+7+this.titleHeight,visibility:\"visible\"}),this.up.attr({fill:e===1?g:h}).css({cursor:e===1?\"default\":\"pointer\"}),i.attr({text:e+\"/\"+d}),this.down.attr({x:18+this.pager.getBBox().width,fill:e===d?g:h}).css({cursor:e===d?\"default\":\"pointer\"}),c=-c[e-1]+this.initialItemY,this.scrollGroup.animate({translateY:c}),this.currentPage=e,this.positionCheckboxes(c)}};La=B.LegendSymbolMixin={drawRectangle:function(a,b){var c=a.options.symbolHeight||\na.fontMetrics.f;b.legendSymbol=this.chart.renderer.rect(0,a.baseline-c+1,a.symbolWidth,c,a.options.symbolRadius||0).attr({zIndex:3}).add(b.legendGroup)},drawLineMarker:function(a){var b=this.options,c=b.marker,d;d=a.symbolWidth;var e=this.chart.renderer,f=this.legendGroup,a=a.baseline-w(a.fontMetrics.b*0.3),g;if(b.lineWidth){g={\"stroke-width\":b.lineWidth};if(b.dashStyle)g.dashstyle=b.dashStyle;this.legendLine=e.path([\"M\",0,a,\"L\",d,a]).attr(g).add(f)}if(c&&c.enabled!==!1)b=c.radius,this.legendSymbol=\nd=e.symbol(this.symbol,d/2-b,a-b,2*b,2*b).add(f),d.isMarker=!0}};(/Trident\\/7\\.0/.test(za)||Ja)&&Sa(lb.prototype,\"positionItem\",function(a,b){var c=this,d=function(){b._legendItemPos&&a.call(c,b)};d();setTimeout(d)});D=B.Chart=function(){this.init.apply(this,arguments)};D.prototype={callbacks:[],init:function(a,b){var c,d=a.series;a.series=null;c=A(S,a);c.series=a.series=d;this.userOptions=a;d=c.chart;this.margin=this.splashArray(\"margin\",d);this.spacing=this.splashArray(\"spacing\",d);var e=d.events;\nthis.bounds={h:{},v:{}};this.callback=b;this.isResizing=0;this.options=c;this.axes=[];this.series=[];this.hasCartesianSeries=d.showAxes;var f=this,g;f.index=Y.length;Y.push(f);ab++;d.reflow!==!1&&H(f,\"load\",function(){f.initReflow()});if(e)for(g in e)H(f,g,e[g]);f.xAxis=[];f.yAxis=[];f.animation=fa?!1:p(d.animation,!0);f.pointCount=f.colorCounter=f.symbolCounter=0;f.firstRender()},initSeries:function(a){var b=this.options.chart;(b=M[a.type||b.type||b.defaultSeriesType])||la(17,!0);b=new b;b.init(this,\na);return b},isInsidePlot:function(a,b,c){var d=c?b:a,a=c?a:b;return d>=0&&d<=this.plotWidth&&a>=0&&a<=this.plotHeight},redraw:function(a){var b=this.axes,c=this.series,d=this.pointer,e=this.legend,f=this.isDirtyLegend,g,h,i=this.hasCartesianSeries,j=this.isDirtyBox,k=c.length,m=k,l=this.renderer,n=l.isHidden(),q=[];Qa(a,this);n&&this.cloneRenderTo();for(this.layOutTitles();m--;)if(a=c[m],a.options.stacking&&(g=!0,a.isDirty)){h=!0;break}if(h)for(m=k;m--;)if(a=c[m],a.options.stacking)a.isDirty=!0;\no(c,function(a){a.isDirty&&a.options.legendType===\"point\"&&(a.updateTotals&&a.updateTotals(),f=!0)});if(f&&e.options.enabled)e.render(),this.isDirtyLegend=!1;g&&this.getStacks();if(i&&!this.isResizing)this.maxTicks=null,o(b,function(a){a.setScale()});this.getMargins();i&&(o(b,function(a){a.isDirty&&(j=!0)}),o(b,function(a){var b=a.min+\",\"+a.max;if(a.extKey!==b)a.extKey=b,q.push(function(){I(a,\"afterSetExtremes\",r(a.eventArgs,a.getExtremes()));delete a.eventArgs});(j||g)&&a.redraw()}));j&&this.drawChartBox();\no(c,function(a){a.isDirty&&a.visible&&(!a.isCartesian||a.xAxis)&&a.redraw()});d&&d.reset(!0);l.draw();I(this,\"redraw\");n&&this.cloneRenderTo(!0);o(q,function(a){a.call()})},get:function(a){var b=this.axes,c=this.series,d,e;for(d=0;d<b.length;d++)if(b[d].options.id===a)return b[d];for(d=0;d<c.length;d++)if(c[d].options.id===a)return c[d];for(d=0;d<c.length;d++){e=c[d].points||[];for(b=0;b<e.length;b++)if(e[b].id===a)return e[b]}return null},getAxes:function(){var a=this,b=this.options,c=b.xAxis=ra(b.xAxis||\n{}),b=b.yAxis=ra(b.yAxis||{});o(c,function(a,b){a.index=b;a.isX=!0});o(b,function(a,b){a.index=b});c=c.concat(b);o(c,function(b){new ha(a,b)})},getSelectedPoints:function(){var a=[];o(this.series,function(b){a=a.concat(ib(b.points||[],function(a){return a.selected}))});return a},getSelectedSeries:function(){return ib(this.series,function(a){return a.selected})},setTitle:function(a,b,c){var g;var d=this,e=d.options,f;f=e.title=A(e.title,a);g=e.subtitle=A(e.subtitle,b),e=g;o([[\"title\",a,f],[\"subtitle\",\nb,e]],function(a){var b=a[0],c=d[b],e=a[1],a=a[2];c&&e&&(d[b]=c=c.destroy());a&&a.text&&!c&&(d[b]=d.renderer.text(a.text,0,0,a.useHTML).attr({align:a.align,\"class\":\"highcharts-\"+b,zIndex:a.zIndex||4}).css(a.style).add())});d.layOutTitles(c)},layOutTitles:function(a){var b=0,c=this.title,d=this.subtitle,e=this.options,f=e.title,e=e.subtitle,g=this.renderer,h=this.spacingBox.width-44;if(c&&(c.css({width:(f.width||h)+\"px\"}).align(r({y:g.fontMetrics(f.style.fontSize,c).b-3},f),!1,\"spacingBox\"),!f.floating&&\n!f.verticalAlign))b=c.getBBox().height;d&&(d.css({width:(e.width||h)+\"px\"}).align(r({y:b+(f.margin-13)+g.fontMetrics(f.style.fontSize,d).b},e),!1,\"spacingBox\"),!e.floating&&!e.verticalAlign&&(b=sa(b+d.getBBox().height)));c=this.titleOffset!==b;this.titleOffset=b;if(!this.isDirtyBox&&c)this.isDirtyBox=c,this.hasRendered&&p(a,!0)&&this.isDirtyBox&&this.redraw()},getChartSize:function(){var a=this.options.chart,b=a.width,a=a.height,c=this.renderToClone||this.renderTo;if(!s(b))this.containerWidth=hb(c,\n\"width\");if(!s(a))this.containerHeight=hb(c,\"height\");this.chartWidth=t(0,b||this.containerWidth||600);this.chartHeight=t(0,p(a,this.containerHeight>19?this.containerHeight:400))},cloneRenderTo:function(a){var b=this.renderToClone,c=this.container;a?b&&(this.renderTo.appendChild(c),Pa(b),delete this.renderToClone):(c&&c.parentNode===this.renderTo&&this.renderTo.removeChild(c),this.renderToClone=b=this.renderTo.cloneNode(0),L(b,{position:\"absolute\",top:\"-9999px\",display:\"block\"}),b.style.setProperty&&\nb.style.setProperty(\"display\",\"block\",\"important\"),C.body.appendChild(b),c&&b.appendChild(c))},getContainer:function(){var a,b=this.options.chart,c,d,e;this.renderTo=a=b.renderTo;e=\"highcharts-\"+wb++;if(Aa(a))this.renderTo=a=C.getElementById(a);a||la(13,!0);c=F(J(a,\"data-highcharts-chart\"));!isNaN(c)&&Y[c]&&Y[c].hasRendered&&Y[c].destroy();J(a,\"data-highcharts-chart\",this.index);a.innerHTML=\"\";!b.skipClone&&!a.offsetWidth&&this.cloneRenderTo();this.getChartSize();c=this.chartWidth;d=this.chartHeight;\nthis.container=a=$(Ia,{className:\"highcharts-container\"+(b.className?\" \"+b.className:\"\"),id:e},r({position:\"relative\",overflow:\"hidden\",width:c+\"px\",height:d+\"px\",textAlign:\"left\",lineHeight:\"normal\",zIndex:0,\"-webkit-tap-highlight-color\":\"rgba(0,0,0,0)\"},b.style),this.renderToClone||a);this._cursor=a.style.cursor;this.renderer=b.forExport?new ua(a,c,d,b.style,!0):new Za(a,c,d,b.style);fa&&this.renderer.create(this,a,c,d);this.renderer.chartIndex=this.index},getMargins:function(a){var b=this.spacing,\nc=this.margin,d=this.titleOffset;this.resetMargins();if(d&&!s(c[0]))this.plotTop=t(this.plotTop,d+this.options.title.margin+b[0]);this.legend.adjustMargins(c,b);this.extraBottomMargin&&(this.marginBottom+=this.extraBottomMargin);this.extraTopMargin&&(this.plotTop+=this.extraTopMargin);a||this.getAxisMargins()},getAxisMargins:function(){var a=this,b=a.axisOffset=[0,0,0,0],c=a.margin;a.hasCartesianSeries&&o(a.axes,function(a){a.getOffset()});o(gb,function(d,e){s(c[e])||(a[d]+=b[e])});a.setChartSize()},\nreflow:function(a){var b=this,c=b.options.chart,d=b.renderTo,e=c.width||hb(d,\"width\"),f=c.height||hb(d,\"height\"),c=a?a.target:K,d=function(){if(b.container)b.setSize(e,f,!1),b.hasUserSize=null};if(!b.hasUserSize&&!b.isPrinting&&e&&f&&(c===K||c===C)){if(e!==b.containerWidth||f!==b.containerHeight)clearTimeout(b.reflowTimeout),a?b.reflowTimeout=setTimeout(d,100):d();b.containerWidth=e;b.containerHeight=f}},initReflow:function(){var a=this,b=function(b){a.reflow(b)};H(K,\"resize\",b);H(a,\"destroy\",function(){Z(K,\n\"resize\",b)})},setSize:function(a,b,c){var d=this,e,f,g,h=d.renderer,i=h.globalAnimation;d.isResizing+=1;g=function(){d&&I(d,\"endResize\",null,function(){d.isResizing-=1})};Qa(c,d);d.oldChartHeight=d.chartHeight;d.oldChartWidth=d.chartWidth;if(s(a))d.chartWidth=e=t(0,w(a)),d.hasUserSize=!!e;if(s(b))d.chartHeight=f=t(0,w(b));(i?jb:L)(d.container,{width:e+\"px\",height:f+\"px\"},i);d.setChartSize(!0);h.setSize(e,f,c);d.maxTicks=null;o(d.axes,function(a){a.isDirty=!0;a.setScale()});o(d.series,function(a){a.isDirty=\n!0});d.isDirtyLegend=!0;d.isDirtyBox=!0;d.layOutTitles();d.getMargins();d.redraw(c);d.oldChartHeight=null;I(d,\"resize\");i===!1?g():setTimeout(g,i&&i.duration||500)},setChartSize:function(a){var b=this.inverted,c=this.renderer,d=this.chartWidth,e=this.chartHeight,f=this.options.chart,g=this.spacing,h=this.clipOffset,i,j,k,m;this.plotLeft=i=w(this.plotLeft);this.plotTop=j=w(this.plotTop);this.plotWidth=k=t(0,w(d-i-this.marginRight));this.plotHeight=m=t(0,w(e-j-this.marginBottom));this.plotSizeX=b?m:\nk;this.plotSizeY=b?k:m;this.plotBorderWidth=f.plotBorderWidth||0;this.spacingBox=c.spacingBox={x:g[3],y:g[0],width:d-g[3]-g[1],height:e-g[0]-g[2]};this.plotBox=c.plotBox={x:i,y:j,width:k,height:m};d=2*V(this.plotBorderWidth/2);b=sa(t(d,h[3])/2);c=sa(t(d,h[0])/2);this.clipBox={x:b,y:c,width:V(this.plotSizeX-t(d,h[1])/2-b),height:t(0,V(this.plotSizeY-t(d,h[2])/2-c))};a||o(this.axes,function(a){a.setAxisSize();a.setAxisTranslation()})},resetMargins:function(){var a=this;o(gb,function(b,c){a[b]=p(a.margin[c],\na.spacing[c])});a.axisOffset=[0,0,0,0];a.clipOffset=[0,0,0,0]},drawChartBox:function(){var a=this.options.chart,b=this.renderer,c=this.chartWidth,d=this.chartHeight,e=this.chartBackground,f=this.plotBackground,g=this.plotBorder,h=this.plotBGImage,i=a.borderWidth||0,j=a.backgroundColor,k=a.plotBackgroundColor,m=a.plotBackgroundImage,l=a.plotBorderWidth||0,n,q=this.plotLeft,p=this.plotTop,o=this.plotWidth,t=this.plotHeight,u=this.plotBox,s=this.clipRect,r=this.clipBox;n=i+(a.shadow?8:0);if(i||j)if(e)e.animate(e.crisp({width:c-\nn,height:d-n}));else{e={fill:j||O};if(i)e.stroke=a.borderColor,e[\"stroke-width\"]=i;this.chartBackground=b.rect(n/2,n/2,c-n,d-n,a.borderRadius,i).attr(e).addClass(\"highcharts-background\").add().shadow(a.shadow)}if(k)f?f.animate(u):this.plotBackground=b.rect(q,p,o,t,0).attr({fill:k}).add().shadow(a.plotShadow);if(m)h?h.animate(u):this.plotBGImage=b.image(m,q,p,o,t).add();s?s.animate({width:r.width,height:r.height}):this.clipRect=b.clipRect(r);if(l)g?g.animate(g.crisp({x:q,y:p,width:o,height:t,strokeWidth:-l})):\nthis.plotBorder=b.rect(q,p,o,t,0,-l).attr({stroke:a.plotBorderColor,\"stroke-width\":l,fill:O,zIndex:1}).add();this.isDirtyBox=!1},propFromSeries:function(){var a=this,b=a.options.chart,c,d=a.options.series,e,f;o([\"inverted\",\"angular\",\"polar\"],function(g){c=M[b.type||b.defaultSeriesType];f=a[g]||b[g]||c&&c.prototype[g];for(e=d&&d.length;!f&&e--;)(c=M[d[e].type])&&c.prototype[g]&&(f=!0);a[g]=f})},linkSeries:function(){var a=this,b=a.series;o(b,function(a){a.linkedSeries.length=0});o(b,function(b){var d=\nb.options.linkedTo;if(Aa(d)&&(d=d===\":previous\"?a.series[b.index-1]:a.get(d)))d.linkedSeries.push(b),b.linkedParent=d,b.visible=p(b.options.visible,d.options.visible,b.visible)})},renderSeries:function(){o(this.series,function(a){a.translate();a.render()})},renderLabels:function(){var a=this,b=a.options.labels;b.items&&o(b.items,function(c){var d=r(b.style,c.style),e=F(d.left)+a.plotLeft,f=F(d.top)+a.plotTop+12;delete d.left;delete d.top;a.renderer.text(c.html,e,f).attr({zIndex:2}).css(d).add()})},\nrender:function(){var a=this.axes,b=this.renderer,c=this.options,d,e,f,g;this.setTitle();this.legend=new lb(this,c.legend);this.getStacks&&this.getStacks();this.getMargins(!0);this.setChartSize();d=this.plotWidth;e=this.plotHeight-=13;o(a,function(a){a.setScale()});this.getAxisMargins();f=d/this.plotWidth>1.1;g=e/this.plotHeight>1.1;if(f||g)this.maxTicks=null,o(a,function(a){(a.horiz&&f||!a.horiz&&g)&&a.setTickInterval(!0)}),this.getMargins();this.drawChartBox();this.hasCartesianSeries&&o(a,function(a){a.render()});\nif(!this.seriesGroup)this.seriesGroup=b.g(\"series-group\").attr({zIndex:3}).add();this.renderSeries();this.renderLabels();this.showCredits(c.credits);this.hasRendered=!0},showCredits:function(a){if(a.enabled&&!this.credits)this.credits=this.renderer.text(a.text,0,0).on(\"click\",function(){if(a.href)location.href=a.href}).attr({align:a.position.align,zIndex:8}).css(a.style).add().align(a.position)},destroy:function(){var a=this,b=a.axes,c=a.series,d=a.container,e,f=d&&d.parentNode;I(a,\"destroy\");Y[a.index]=\nv;ab--;a.renderTo.removeAttribute(\"data-highcharts-chart\");Z(a);for(e=b.length;e--;)b[e]=b[e].destroy();for(e=c.length;e--;)c[e]=c[e].destroy();o(\"title,subtitle,chartBackground,plotBackground,plotBGImage,plotBorder,seriesGroup,clipRect,credits,pointer,scroller,rangeSelector,legend,resetZoomButton,tooltip,renderer\".split(\",\"),function(b){var c=a[b];c&&c.destroy&&(a[b]=c.destroy())});if(d)d.innerHTML=\"\",Z(d),f&&Pa(d);for(e in a)delete a[e]},isReadyToRender:function(){var a=this;return!ca&&K==K.top&&\nC.readyState!==\"complete\"||fa&&!K.canvg?(fa?Lb.push(function(){a.firstRender()},a.options.global.canvasToolsURL):C.attachEvent(\"onreadystatechange\",function(){C.detachEvent(\"onreadystatechange\",a.firstRender);C.readyState===\"complete\"&&a.firstRender()}),!1):!0},firstRender:function(){var a=this,b=a.options,c=a.callback;if(a.isReadyToRender()){a.getContainer();I(a,\"init\");a.resetMargins();a.setChartSize();a.propFromSeries();a.getAxes();o(b.series||[],function(b){a.initSeries(b)});a.linkSeries();I(a,\n\"beforeRender\");if(B.Pointer)a.pointer=new Ua(a,b);a.render();a.renderer.draw();c&&c.apply(a,[a]);o(a.callbacks,function(b){a.index!==v&&b.apply(a,[a])});I(a,\"load\");a.cloneRenderTo(!0)}},splashArray:function(a,b){var c=b[a],c=da(c)?c:[c,c,c,c];return[p(b[a+\"Top\"],c[0]),p(b[a+\"Right\"],c[1]),p(b[a+\"Bottom\"],c[2]),p(b[a+\"Left\"],c[3])]}};var Xb=B.CenteredSeriesMixin={getCenter:function(){var a=this.options,b=this.chart,c=2*(a.slicedOffset||0),d=b.plotWidth-2*c,b=b.plotHeight-2*c,e=a.center,e=[p(e[0],\n\"50%\"),p(e[1],\"50%\"),a.size||\"100%\",a.innerSize||0],f=z(d,b),g,h;for(g=0;g<4;++g)h=e[g],a=g<2||g===2&&/%$/.test(h),e[g]=(/%$/.test(h)?[d,b,f,e[2]][g]*parseFloat(h)/100:parseFloat(h))+(a?c:0);return e}},Ea=function(){};Ea.prototype={init:function(a,b,c){this.series=a;this.color=a.color;this.applyOptions(b,c);this.pointAttr={};if(a.options.colorByPoint&&(b=a.options.colors||a.chart.options.colors,this.color=this.color||b[a.colorCounter++],a.colorCounter===b.length))a.colorCounter=0;a.chart.pointCount++;\nreturn this},applyOptions:function(a,b){var c=this.series,d=c.options.pointValKey||c.pointValKey,a=Ea.prototype.optionsToObject.call(this,a);r(this,a);this.options=this.options?r(this.options,a):a;if(d)this.y=this[d];if(this.x===v&&c)this.x=b===v?c.autoIncrement():b;return this},optionsToObject:function(a){var b={},c=this.series,d=c.options.keys,e=d||c.pointArrayMap||[\"y\"],f=e.length,g=0,h=0;if(typeof a===\"number\"||a===null)b[e[0]]=a;else if(Fa(a)){if(!d&&a.length>f){c=typeof a[0];if(c===\"string\")b.name=\na[0];else if(c===\"number\")b.x=a[0];g++}for(;h<f;)b[e[h++]]=a[g++]}else if(typeof a===\"object\"){b=a;if(a.dataLabels)c._hasPointLabels=!0;if(a.marker)c._hasPointMarkers=!0}return b},destroy:function(){var a=this.series.chart,b=a.hoverPoints,c;a.pointCount--;if(b&&(this.setState(),ja(b,this),!b.length))a.hoverPoints=null;if(this===a.hoverPoint)this.onMouseOut();if(this.graphic||this.dataLabel)Z(this),this.destroyElements();this.legendItem&&a.legend.destroyItem(this);for(c in this)this[c]=null},destroyElements:function(){for(var a=\n\"graphic,dataLabel,dataLabelUpper,group,connector,shadowGroup\".split(\",\"),b,c=6;c--;)b=a[c],this[b]&&(this[b]=this[b].destroy())},getLabelConfig:function(){return{x:this.category,y:this.y,color:this.color,key:this.name||this.category,series:this.series,point:this,percentage:this.percentage,total:this.total||this.stackTotal}},tooltipFormatter:function(a){var b=this.series,c=b.tooltipOptions,d=p(c.valueDecimals,\"\"),e=c.valuePrefix||\"\",f=c.valueSuffix||\"\";o(b.pointArrayMap||[\"y\"],function(b){b=\"{point.\"+\nb;if(e||f)a=a.replace(b+\"}\",e+b+\"}\"+f);a=a.replace(b+\"}\",b+\":,.\"+d+\"f}\")});return Ha(a,{point:this,series:this.series})},firePointEvent:function(a,b,c){var d=this,e=this.series.options;(e.point.events[a]||d.options&&d.options.events&&d.options.events[a])&&this.importEvents();a===\"click\"&&e.allowPointSelect&&(c=function(a){d.select&&d.select(null,a.ctrlKey||a.metaKey||a.shiftKey)});I(this,a,b,c)}};var R=B.Series=function(){};R.prototype={isCartesian:!0,type:\"line\",pointClass:Ea,sorted:!0,requireSorting:!0,\npointAttrToOptions:{stroke:\"lineColor\",\"stroke-width\":\"lineWidth\",fill:\"fillColor\",r:\"radius\"},axisTypes:[\"xAxis\",\"yAxis\"],colorCounter:0,parallelArrays:[\"x\",\"y\"],init:function(a,b){var c=this,d,e,f=a.series,g=function(a,b){return p(a.options.index,a._i)-p(b.options.index,b._i)};c.chart=a;c.options=b=c.setOptions(b);c.linkedSeries=[];c.bindAxes();r(c,{name:b.name,state:\"\",pointAttr:{},visible:b.visible!==!1,selected:b.selected===!0});if(fa)b.animation=!1;e=b.events;for(d in e)H(c,d,e[d]);if(e&&e.click||\nb.point&&b.point.events&&b.point.events.click||b.allowPointSelect)a.runTrackerClick=!0;c.getColor();c.getSymbol();o(c.parallelArrays,function(a){c[a+\"Data\"]=[]});c.setData(b.data,!1);if(c.isCartesian)a.hasCartesianSeries=!0;f.push(c);c._i=f.length-1;pb(f,g);this.yAxis&&pb(this.yAxis.series,g);o(f,function(a,b){a.index=b;a.name=a.name||\"Series \"+(b+1)})},bindAxes:function(){var a=this,b=a.options,c=a.chart,d;o(a.axisTypes||[],function(e){o(c[e],function(c){d=c.options;if(b[e]===d.index||b[e]!==v&&\nb[e]===d.id||b[e]===v&&d.index===0)c.series.push(a),a[e]=c,c.isDirty=!0});!a[e]&&a.optionalAxis!==e&&la(18,!0)})},updateParallelArrays:function(a,b){var c=a.series,d=arguments;o(c.parallelArrays,typeof b===\"number\"?function(d){var f=d===\"y\"&&c.toYData?c.toYData(a):a[d];c[d+\"Data\"][b]=f}:function(a){Array.prototype[b].apply(c[a+\"Data\"],Array.prototype.slice.call(d,2))})},autoIncrement:function(){var a=this.options,b=this.xIncrement,c,d=a.pointIntervalUnit,b=p(b,a.pointStart,0);this.pointInterval=c=\np(this.pointInterval,a.pointInterval,1);if(d===\"month\"||d===\"year\")a=new ya(b),a=d===\"month\"?+a[ub](a[Xa]()+c):+a[vb](a[Ya]()+c),c=a-b;this.xIncrement=b+c;return b},getSegments:function(){var a=-1,b=[],c,d=this.points,e=d.length;if(e)if(this.options.connectNulls){for(c=e;c--;)d[c].y===null&&d.splice(c,1);d.length&&(b=[d])}else o(d,function(c,g){c.y===null?(g>a+1&&b.push(d.slice(a+1,g)),a=g):g===e-1&&b.push(d.slice(a+1,g+1))});this.segments=b},setOptions:function(a){var b=this.chart,c=b.options.plotOptions,\nb=b.userOptions||{},d=b.plotOptions||{},e=c[this.type];this.userOptions=a;c=A(e,c.series,a);this.tooltipOptions=A(S.tooltip,S.plotOptions[this.type].tooltip,b.tooltip,d.series&&d.series.tooltip,d[this.type]&&d[this.type].tooltip,a.tooltip);e.marker===null&&delete c.marker;this.zoneAxis=c.zoneAxis;a=this.zones=(c.zones||[]).slice();if((c.negativeColor||c.negativeFillColor)&&!c.zones)a.push({value:c[this.zoneAxis+\"Threshold\"]||c.threshold||0,color:c.negativeColor,fillColor:c.negativeFillColor});a.length&&\ns(a[a.length-1].value)&&a.push({color:this.color,fillColor:this.fillColor});return c},getCyclic:function(a,b,c){var d=this.userOptions,e=\"_\"+a+\"Index\",f=a+\"Counter\";b||(s(d[e])?b=d[e]:(d[e]=b=this.chart[f]%c.length,this.chart[f]+=1),b=c[b]);this[a]=b},getColor:function(){this.options.colorByPoint?this.options.color=null:this.getCyclic(\"color\",this.options.color||ba[this.type].color,this.chart.options.colors)},getSymbol:function(){var a=this.options.marker;this.getCyclic(\"symbol\",a.symbol,this.chart.options.symbols);\nif(/^url/.test(this.symbol))a.radius=0},drawLegendSymbol:La.drawLineMarker,setData:function(a,b,c,d){var e=this,f=e.points,g=f&&f.length||0,h,i=e.options,j=e.chart,k=null,m=e.xAxis,l=m&&!!m.categories,n=i.turboThreshold,q=this.xData,x=this.yData,t=(h=e.pointArrayMap)&&h.length,a=a||[];h=a.length;b=p(b,!0);if(d!==!1&&h&&g===h&&!e.cropped&&!e.hasGroupedData&&e.visible)o(a,function(a,b){f[b].update&&f[b].update(a,!1,null,!1)});else{e.xIncrement=null;e.pointRange=l?1:i.pointRange;e.colorCounter=0;o(this.parallelArrays,\nfunction(a){e[a+\"Data\"].length=0});if(n&&h>n){for(c=0;k===null&&c<h;)k=a[c],c++;if(qa(k)){l=p(i.pointStart,0);i=p(i.pointInterval,1);for(c=0;c<h;c++)q[c]=l,x[c]=a[c],l+=i;e.xIncrement=l}else if(Fa(k))if(t)for(c=0;c<h;c++)i=a[c],q[c]=i[0],x[c]=i.slice(1,t+1);else for(c=0;c<h;c++)i=a[c],q[c]=i[0],x[c]=i[1];else la(12)}else for(c=0;c<h;c++)if(a[c]!==v&&(i={series:e},e.pointClass.prototype.applyOptions.apply(i,[a[c]]),e.updateParallelArrays(i,c),l&&s(i.name)))m.names[i.x]=i.name;Aa(x[0])&&la(14,!0);e.data=\n[];e.options.data=a;for(c=g;c--;)f[c]&&f[c].destroy&&f[c].destroy();if(m)m.minRange=m.userMinRange;e.isDirty=e.isDirtyData=j.isDirtyBox=!0;c=!1}b&&j.redraw(c)},processData:function(a){var b=this.xData,c=this.yData,d=b.length,e;e=0;var f,g,h=this.xAxis,i,j=this.options;i=j.cropThreshold;var k=this.isCartesian,m,l;if(k&&!this.isDirty&&!h.isDirty&&!this.yAxis.isDirty&&!a)return!1;if(h)a=h.getExtremes(),m=a.min,l=a.max;if(k&&this.sorted&&(!i||d>i||this.forceCrop))if(b[d-1]<m||b[0]>l)b=[],c=[];else if(b[0]<\nm||b[d-1]>l)e=this.cropData(this.xData,this.yData,m,l),b=e.xData,c=e.yData,e=e.start,f=!0;for(i=b.length-1;i>=0;i--)d=b[i]-b[i-1],d>0&&(g===v||d<g)?g=d:d<0&&this.requireSorting&&la(15);this.cropped=f;this.cropStart=e;this.processedXData=b;this.processedYData=c;if(j.pointRange===null)this.pointRange=g||1;this.closestPointRange=g},cropData:function(a,b,c,d){var e=a.length,f=0,g=e,h=p(this.cropShoulder,1),i;for(i=0;i<e;i++)if(a[i]>=c){f=t(0,i-h);break}for(;i<e;i++)if(a[i]>d){g=i+h;break}return{xData:a.slice(f,\ng),yData:b.slice(f,g),start:f,end:g}},generatePoints:function(){var a=this.options.data,b=this.data,c,d=this.processedXData,e=this.processedYData,f=this.pointClass,g=d.length,h=this.cropStart||0,i,j=this.hasGroupedData,k,m=[],l;if(!b&&!j)b=[],b.length=a.length,b=this.data=b;for(l=0;l<g;l++)i=h+l,j?m[l]=(new f).init(this,[d[l]].concat(ra(e[l]))):(b[i]?k=b[i]:a[i]!==v&&(b[i]=k=(new f).init(this,a[i],d[l])),m[l]=k),m[l].index=i;if(b&&(g!==(c=b.length)||j))for(l=0;l<c;l++)if(l===h&&!j&&(l+=g),b[l])b[l].destroyElements(),\nb[l].plotX=v;this.data=b;this.points=m},getExtremes:function(a){var b=this.yAxis,c=this.processedXData,d,e=[],f=0;d=this.xAxis.getExtremes();var g=d.min,h=d.max,i,j,k,m,a=a||this.stackedYData||this.processedYData;d=a.length;for(m=0;m<d;m++)if(j=c[m],k=a[m],i=k!==null&&k!==v&&(!b.isLog||k.length||k>0),j=this.getExtremesFromAll||this.options.getExtremesFromAll||this.cropped||(c[m+1]||j)>=g&&(c[m-1]||j)<=h,i&&j)if(i=k.length)for(;i--;)k[i]!==null&&(e[f++]=k[i]);else e[f++]=k;this.dataMin=Na(e);this.dataMax=\nCa(e)},translate:function(){this.processedXData||this.processData();this.generatePoints();for(var a=this.options,b=a.stacking,c=this.xAxis,d=c.categories,e=this.yAxis,f=this.points,g=f.length,h=!!this.modifyValue,i=a.pointPlacement,j=i===\"between\"||qa(i),k=a.threshold,m=a.startFromThreshold?k:0,l,n,q,o=Number.MAX_VALUE,a=0;a<g;a++){var r=f[a],w=r.x,u=r.y;n=r.low;var y=b&&e.stacks[(this.negStacks&&u<(m?0:k)?\"-\":\"\")+this.stackKey];if(e.isLog&&u!==null&&u<=0)r.y=u=null,la(10);r.plotX=l=z(t(-1E5,c.translate(w,\n0,0,0,1,i,this.type===\"flags\")),1E5);if(b&&this.visible&&y&&y[w])y=y[w],u=y.points[this.index+\",\"+a],n=u[0],u=u[1],n===m&&(n=p(k,e.min)),e.isLog&&n<=0&&(n=null),r.total=r.stackTotal=y.total,r.percentage=y.total&&r.y/y.total*100,r.stackY=u,y.setOffset(this.pointXOffset||0,this.barW||0);r.yBottom=s(n)?e.translate(n,0,1,0,1):null;h&&(u=this.modifyValue(u,r));r.plotY=n=typeof u===\"number\"&&u!==Infinity?z(t(-1E5,e.translate(u,0,1,0,1)),1E5):v;r.isInside=n!==v&&n>=0&&n<=e.len&&l>=0&&l<=c.len;r.clientX=\nj?c.translate(w,0,0,0,1):l;r.negative=r.y<(k||0);r.category=d&&d[r.x]!==v?d[r.x]:r.x;a&&(o=z(o,N(l-q)));q=l}this.closestPointRangePx=o;this.getSegments()},setClip:function(a){var b=this.chart,c=b.renderer,d=b.inverted,e=this.clipBox,f=e||b.clipBox,g=this.sharedClipKey||[\"_sharedClip\",a&&a.duration,a&&a.easing,f.height].join(\",\"),h=b[g],i=b[g+\"m\"];if(!h){if(a)f.width=0,b[g+\"m\"]=i=c.clipRect(-99,d?-b.plotLeft:-b.plotTop,99,d?b.chartWidth:b.chartHeight);b[g]=h=c.clipRect(f)}a&&(h.count+=1);if(this.options.clip!==\n!1)this.group.clip(a||e?h:b.clipRect),this.markerGroup.clip(i),this.sharedClipKey=g;a||(h.count-=1,h.count<=0&&g&&b[g]&&(e||(b[g]=b[g].destroy()),b[g+\"m\"]&&(b[g+\"m\"]=b[g+\"m\"].destroy())))},animate:function(a){var b=this.chart,c=this.options.animation,d;if(c&&!da(c))c=ba[this.type].animation;a?this.setClip(c):(d=this.sharedClipKey,(a=b[d])&&a.animate({width:b.plotSizeX},c),b[d+\"m\"]&&b[d+\"m\"].animate({width:b.plotSizeX+99},c),this.animate=null)},afterAnimate:function(){this.setClip();I(this,\"afterAnimate\")},\ndrawPoints:function(){var a,b=this.points,c=this.chart,d,e,f,g,h,i,j,k,m=this.options.marker,l=this.pointAttr[\"\"],n,q,o,t=this.markerGroup,s=p(m.enabled,this.xAxis.isRadial,this.closestPointRangePx>2*m.radius);if(m.enabled!==!1||this._hasPointMarkers)for(f=b.length;f--;)if(g=b[f],d=V(g.plotX),e=g.plotY,k=g.graphic,n=g.marker||{},q=!!g.marker,a=s&&n.enabled===v||n.enabled,o=g.isInside,a&&e!==v&&!isNaN(e)&&g.y!==null)if(a=g.pointAttr[g.selected?\"select\":\"\"]||l,h=a.r,i=p(n.symbol,this.symbol),j=i.indexOf(\"url\")===\n0,k)k[o?\"show\":\"hide\"](!0).animate(r({x:d-h,y:e-h},k.symbolName?{width:2*h,height:2*h}:{}));else{if(o&&(h>0||j))g.graphic=c.renderer.symbol(i,d-h,e-h,2*h,2*h,q?n:m).attr(a).add(t)}else if(k)g.graphic=k.destroy()},convertAttribs:function(a,b,c,d){var e=this.pointAttrToOptions,f,g,h={},a=a||{},b=b||{},c=c||{},d=d||{};for(f in e)g=e[f],h[f]=p(a[g],b[f],c[f],d[f]);return h},getAttribs:function(){var a=this,b=a.options,c=ba[a.type].marker?b.marker:b,d=c.states,e=d.hover,f,g=a.color,h=a.options.negativeColor;\nf={stroke:g,fill:g};var i=a.points||[],j,k,m=[],l=a.pointAttrToOptions;j=a.hasPointSpecificOptions;var n=c.lineColor,q=c.fillColor;k=b.turboThreshold;var p=a.zones,t=a.zoneAxis||\"y\",w;b.marker?(e.radius=e.radius||c.radius+e.radiusPlus,e.lineWidth=e.lineWidth||c.lineWidth+e.lineWidthPlus):(e.color=e.color||na(e.color||g).brighten(e.brightness).get(),e.negativeColor=e.negativeColor||na(e.negativeColor||h).brighten(e.brightness).get());m[\"\"]=a.convertAttribs(c,f);o([\"hover\",\"select\"],function(b){m[b]=\na.convertAttribs(d[b],m[\"\"])});a.pointAttr=m;g=i.length;if(!k||g<k||j)for(;g--;){k=i[g];if((c=k.options&&k.options.marker||k.options)&&c.enabled===!1)c.radius=0;if(p.length){j=0;for(f=p[j];k[t]>=f.value;)f=p[++j];if(f.color)k.color=k.fillColor=f.color}j=b.colorByPoint||k.color;if(k.options)for(w in l)s(c[l[w]])&&(j=!0);if(j){c=c||{};j=[];d=c.states||{};f=d.hover=d.hover||{};if(!b.marker)f.color=f.color||!k.options.color&&e[k.negative&&h?\"negativeColor\":\"color\"]||na(k.color).brighten(f.brightness||\ne.brightness).get();f={color:k.color};if(!q)f.fillColor=k.color;if(!n)f.lineColor=k.color;c.hasOwnProperty(\"color\")&&!c.color&&delete c.color;j[\"\"]=a.convertAttribs(r(f,c),m[\"\"]);j.hover=a.convertAttribs(d.hover,m.hover,j[\"\"]);j.select=a.convertAttribs(d.select,m.select,j[\"\"])}else j=m;k.pointAttr=j}},destroy:function(){var a=this,b=a.chart,c=/AppleWebKit\\/533/.test(za),d,e=a.data||[],f,g,h;I(a,\"destroy\");Z(a);o(a.axisTypes||[],function(b){if(h=a[b])ja(h.series,a),h.isDirty=h.forceRedraw=!0});a.legendItem&&\na.chart.legend.destroyItem(a);for(d=e.length;d--;)(f=e[d])&&f.destroy&&f.destroy();a.points=null;clearTimeout(a.animationTimeout);for(g in a)a[g]instanceof P&&!a[g].survive&&(d=c&&g===\"group\"?\"hide\":\"destroy\",a[g][d]());if(b.hoverSeries===a)b.hoverSeries=null;ja(b.series,a);for(g in a)delete a[g]},getSegmentPath:function(a){var b=this,c=[],d=b.options.step;o(a,function(e,f){var g=e.plotX,h=e.plotY,i;b.getPointSpline?c.push.apply(c,b.getPointSpline(a,e,f)):(c.push(f?\"L\":\"M\"),d&&f&&(i=a[f-1],d===\"right\"?\nc.push(i.plotX,h):d===\"center\"?c.push((i.plotX+g)/2,i.plotY,(i.plotX+g)/2,h):c.push(g,i.plotY)),c.push(e.plotX,e.plotY))});return c},getGraphPath:function(){var a=this,b=[],c,d=[];o(a.segments,function(e){c=a.getSegmentPath(e);e.length>1?b=b.concat(c):d.push(e[0])});a.singlePoints=d;return a.graphPath=b},drawGraph:function(){var a=this,b=this.options,c=[[\"graph\",b.lineColor||this.color,b.dashStyle]],d=b.lineWidth,e=b.linecap!==\"square\",f=this.getGraphPath(),g=this.fillGraph&&this.color||O;o(this.zones,\nfunction(d,e){c.push([\"zoneGraph\"+e,d.color||a.color,d.dashStyle||b.dashStyle])});o(c,function(c,i){var j=c[0],k=a[j];if(k)k.animate({d:f});else if((d||g)&&f.length)k={stroke:c[1],\"stroke-width\":d,fill:g,zIndex:1},c[2]?k.dashstyle=c[2]:e&&(k[\"stroke-linecap\"]=k[\"stroke-linejoin\"]=\"round\"),a[j]=a.chart.renderer.path(f).attr(k).add(a.group).shadow(i<2&&b.shadow)})},applyZones:function(){var a=this,b=this.chart,c=b.renderer,d=this.zones,e,f,g=this.clips||[],h,i=this.graph,j=this.area,k=t(b.chartWidth,\nb.chartHeight),m=this[(this.zoneAxis||\"y\")+\"Axis\"],l,n=m.reversed,q=b.inverted,x=m.horiz,r,s,u,y=!1;if(d.length&&(i||j)&&m.min!==v)i&&i.hide(),j&&j.hide(),l=m.getExtremes(),o(d,function(d,o){e=n?x?b.plotWidth:0:x?0:m.toPixels(l.min);e=z(t(p(f,e),0),k);f=z(t(w(m.toPixels(p(d.value,l.max),!0)),0),k);y&&(e=f=m.toPixels(l.max));r=Math.abs(e-f);s=z(e,f);u=t(e,f);if(m.isXAxis){if(h={x:q?u:s,y:0,width:r,height:k},!x)h.x=b.plotHeight-h.x}else if(h={x:0,y:q?u:s,width:k,height:r},x)h.y=b.plotWidth-h.y;b.inverted&&\nc.isVML&&(h=m.isXAxis?{x:0,y:n?s:u,height:h.width,width:b.chartWidth}:{x:h.y-b.plotLeft-b.spacingBox.x,y:0,width:h.height,height:b.chartHeight});g[o]?g[o].animate(h):(g[o]=c.clipRect(h),i&&a[\"zoneGraph\"+o].clip(g[o]),j&&a[\"zoneArea\"+o].clip(g[o]));y=d.value>l.max}),this.clips=g},invertGroups:function(){function a(){var a={width:b.yAxis.len,height:b.xAxis.len};o([\"group\",\"markerGroup\"],function(c){b[c]&&b[c].attr(a).invert()})}var b=this,c=b.chart;if(b.xAxis)H(c,\"resize\",a),H(b,\"destroy\",function(){Z(c,\n\"resize\",a)}),a(),b.invertGroups=a},plotGroup:function(a,b,c,d,e){var f=this[a],g=!f;g&&(this[a]=f=this.chart.renderer.g(b).attr({visibility:c,zIndex:d||0.1}).add(e));f[g?\"attr\":\"animate\"](this.getPlotBox());return f},getPlotBox:function(){var a=this.chart,b=this.xAxis,c=this.yAxis;if(a.inverted)b=c,c=this.xAxis;return{translateX:b?b.left:a.plotLeft,translateY:c?c.top:a.plotTop,scaleX:1,scaleY:1}},render:function(){var a=this,b=a.chart,c,d=a.options,e=(c=d.animation)&&!!a.animate&&b.renderer.isSVG&&\np(c.duration,500)||0,f=a.visible?\"visible\":\"hidden\",g=d.zIndex,h=a.hasRendered,i=b.seriesGroup;c=a.plotGroup(\"group\",\"series\",f,g,i);a.markerGroup=a.plotGroup(\"markerGroup\",\"markers\",f,g,i);e&&a.animate(!0);a.getAttribs();c.inverted=a.isCartesian?b.inverted:!1;a.drawGraph&&(a.drawGraph(),a.applyZones());o(a.points,function(a){a.redraw&&a.redraw()});a.drawDataLabels&&a.drawDataLabels();a.visible&&a.drawPoints();a.drawTracker&&a.options.enableMouseTracking!==!1&&a.drawTracker();b.inverted&&a.invertGroups();\nd.clip!==!1&&!a.sharedClipKey&&!h&&c.clip(b.clipRect);e&&a.animate();if(!h)e?a.animationTimeout=setTimeout(function(){a.afterAnimate()},e):a.afterAnimate();a.isDirty=a.isDirtyData=!1;a.hasRendered=!0},redraw:function(){var a=this.chart,b=this.isDirtyData,c=this.isDirty,d=this.group,e=this.xAxis,f=this.yAxis;d&&(a.inverted&&d.attr({width:a.plotWidth,height:a.plotHeight}),d.animate({translateX:p(e&&e.left,a.plotLeft),translateY:p(f&&f.top,a.plotTop)}));this.translate();this.render();b&&I(this,\"updatedData\");\n(c||b)&&delete this.kdTree},kdDimensions:1,kdAxisArray:[\"clientX\",\"plotY\"],searchPoint:function(a,b){var c=this.xAxis,d=this.yAxis,e=this.chart.inverted;return this.searchKDTree({clientX:e?c.len-a.chartY+c.pos:a.chartX-c.pos,plotY:e?d.len-a.chartX+d.pos:a.chartY-d.pos},b)},buildKDTree:function(){function a(b,d,g){var h,i;if(i=b&&b.length)return h=c.kdAxisArray[d%g],b.sort(function(a,b){return a[h]-b[h]}),i=Math.floor(i/2),{point:b[i],left:a(b.slice(0,i),d+1,g),right:a(b.slice(i+1),d+1,g)}}function b(){var b=\nib(c.points||[],function(a){return a.y!==null});c.kdTree=a(b,d,d)}var c=this,d=c.kdDimensions;delete c.kdTree;c.options.kdSync?b():setTimeout(b)},searchKDTree:function(a,b){function c(a,b,j,k){var m=b.point,l=d.kdAxisArray[j%k],n,q,p=m;q=s(a[e])&&s(m[e])?Math.pow(a[e]-m[e],2):null;n=s(a[f])&&s(m[f])?Math.pow(a[f]-m[f],2):null;n=(q||0)+(n||0);m.dist=s(n)?Math.sqrt(n):Number.MAX_VALUE;m.distX=s(q)?Math.sqrt(q):Number.MAX_VALUE;l=a[l]-m[l];n=l<0?\"left\":\"right\";q=l<0?\"right\":\"left\";b[n]&&(n=c(a,b[n],\nj+1,k),p=n[g]<p[g]?n:m);b[q]&&Math.sqrt(l*l)<p[g]&&(a=c(a,b[q],j+1,k),p=a[g]<p[g]?a:p);return p}var d=this,e=this.kdAxisArray[0],f=this.kdAxisArray[1],g=b?\"distX\":\"dist\";this.kdTree||this.buildKDTree();if(this.kdTree)return c(a,this.kdTree,this.kdDimensions,this.kdDimensions)}};Hb.prototype={destroy:function(){Oa(this,this.axis)},render:function(a){var b=this.options,c=b.format,c=c?Ha(c,this):b.formatter.call(this);this.label?this.label.attr({text:c,visibility:\"hidden\"}):this.label=this.axis.chart.renderer.text(c,\nnull,null,b.useHTML).css(b.style).attr({align:this.textAlign,rotation:b.rotation,visibility:\"hidden\"}).add(a)},setOffset:function(a,b){var c=this.axis,d=c.chart,e=d.inverted,f=c.reversed,f=this.isNegative&&!f||!this.isNegative&&f,g=c.translate(c.usePercentage?100:this.total,0,0,0,1),c=c.translate(0),c=N(g-c),h=d.xAxis[0].translate(this.x)+a,i=d.plotHeight,f={x:e?f?g:g-c:h,y:e?i-h-b:f?i-g-c:i-g,width:e?c:b,height:e?b:c};if(e=this.label)e.align(this.alignOptions,null,f),f=e.alignAttr,e[this.options.crop===\n!1||d.isInsidePlot(f.x,f.y)?\"show\":\"hide\"](!0)}};D.prototype.getStacks=function(){var a=this;o(a.yAxis,function(a){if(a.stacks&&a.hasVisibleSeries)a.oldStacks=a.stacks});o(a.series,function(b){if(b.options.stacking&&(b.visible===!0||a.options.chart.ignoreHiddenSeries===!1))b.stackKey=b.type+p(b.options.stack,\"\")})};ha.prototype.buildStacks=function(){var a=this.series,b=p(this.options.reversedStacks,!0),c=a.length;if(!this.isXAxis){for(this.usePercentage=!1;c--;)a[b?c:a.length-c-1].setStackedPoints();\nif(this.usePercentage)for(c=0;c<a.length;c++)a[c].setPercentStacks()}};ha.prototype.renderStackTotals=function(){var a=this.chart,b=a.renderer,c=this.stacks,d,e,f=this.stackTotalGroup;if(!f)this.stackTotalGroup=f=b.g(\"stack-labels\").attr({visibility:\"visible\",zIndex:6}).add();f.translate(a.plotLeft,a.plotTop);for(d in c)for(e in a=c[d],a)a[e].render(f)};ha.prototype.resetStacks=function(){var a=this.stacks,b,c;if(!this.isXAxis)for(b in a)for(c in a[b])a[b][c].touched<this.stacksTouched?(a[b][c].destroy(),\ndelete a[b][c]):(a[b][c].total=null,a[b][c].cum=0)};ha.prototype.cleanStacks=function(){var a,b,c;if(!this.isXAxis){if(this.oldStacks)a=this.stacks=this.oldStacks;for(b in a)for(c in a[b])a[b][c].cum=a[b][c].total}};R.prototype.setStackedPoints=function(){if(this.options.stacking&&!(this.visible!==!0&&this.chart.options.chart.ignoreHiddenSeries!==!1)){var a=this.processedXData,b=this.processedYData,c=[],d=b.length,e=this.options,f=e.threshold,g=e.startFromThreshold?f:0,h=e.stack,e=e.stacking,i=this.stackKey,\nj=\"-\"+i,k=this.negStacks,m=this.yAxis,l=m.stacks,n=m.oldStacks,q,o,r,s,u,y;m.stacksTouched+=1;for(s=0;s<d;s++){u=a[s];y=b[s];r=this.index+\",\"+s;o=(q=k&&y<(g?0:f))?j:i;l[o]||(l[o]={});if(!l[o][u])n[o]&&n[o][u]?(l[o][u]=n[o][u],l[o][u].total=null):l[o][u]=new Hb(m,m.options.stackLabels,q,u,h);o=l[o][u];o.points[r]=[p(o.cum,g)];o.touched=m.stacksTouched;e===\"percent\"?(q=q?i:j,k&&l[q]&&l[q][u]?(q=l[q][u],o.total=q.total=t(q.total,o.total)+N(y)||0):o.total=ea(o.total+(N(y)||0))):o.total=ea(o.total+(y||\n0));o.cum=p(o.cum,g)+(y||0);o.points[r].push(o.cum);c[s]=o.cum}if(e===\"percent\")m.usePercentage=!0;this.stackedYData=c;m.oldStacks={}}};R.prototype.setPercentStacks=function(){var a=this,b=a.stackKey,c=a.yAxis.stacks,d=a.processedXData;o([b,\"-\"+b],function(b){var e;for(var f=d.length,g,h;f--;)if(g=d[f],e=(h=c[b]&&c[b][g])&&h.points[a.index+\",\"+f],g=e)h=h.total?100/h.total:0,g[0]=ea(g[0]*h),g[1]=ea(g[1]*h),a.stackedYData[f]=g[1]})};r(D.prototype,{addSeries:function(a,b,c){var d,e=this;a&&(b=p(b,!0),\nI(e,\"addSeries\",{options:a},function(){d=e.initSeries(a);e.isDirtyLegend=!0;e.linkSeries();b&&e.redraw(c)}));return d},addAxis:function(a,b,c,d){var e=b?\"xAxis\":\"yAxis\",f=this.options;new ha(this,A(a,{index:this[e].length,isX:b}));f[e]=ra(f[e]||{});f[e].push(a);p(c,!0)&&this.redraw(d)},showLoading:function(a){var b=this,c=b.options,d=b.loadingDiv,e=c.loading,f=function(){d&&L(d,{left:b.plotLeft+\"px\",top:b.plotTop+\"px\",width:b.plotWidth+\"px\",height:b.plotHeight+\"px\"})};if(!d)b.loadingDiv=d=$(Ia,{className:\"highcharts-loading\"},\nr(e.style,{zIndex:10,display:O}),b.container),b.loadingSpan=$(\"span\",null,e.labelStyle,d),H(b,\"redraw\",f);b.loadingSpan.innerHTML=a||c.lang.loading;if(!b.loadingShown)L(d,{opacity:0,display:\"\"}),jb(d,{opacity:e.style.opacity},{duration:e.showDuration||0}),b.loadingShown=!0;f()},hideLoading:function(){var a=this.options,b=this.loadingDiv;b&&jb(b,{opacity:0},{duration:a.loading.hideDuration||100,complete:function(){L(b,{display:O})}});this.loadingShown=!1}});r(Ea.prototype,{update:function(a,b,c,d){function e(){f.applyOptions(a);\nif(f.y===null&&h)f.graphic=h.destroy();if(da(a)&&!Fa(a))f.redraw=function(){if(h&&h.element&&a&&a.marker&&a.marker.symbol)f.graphic=h.destroy();if(a&&a.dataLabels&&f.dataLabel)f.dataLabel=f.dataLabel.destroy();f.redraw=null};i=f.index;g.updateParallelArrays(f,i);if(m&&f.name)m[f.x]=f.name;k.data[i]=f.options;g.isDirty=g.isDirtyData=!0;if(!g.fixedBox&&g.hasCartesianSeries)j.isDirtyBox=!0;if(k.legendType===\"point\")j.isDirtyLegend=!0;b&&j.redraw(c)}var f=this,g=f.series,h=f.graphic,i,j=g.chart,k=g.options,\nm=g.xAxis&&g.xAxis.names,b=p(b,!0);d===!1?e():f.firePointEvent(\"update\",{options:a},e)},remove:function(a,b){this.series.removePoint(Ka(this,this.series.data),a,b)}});r(R.prototype,{addPoint:function(a,b,c,d){var e=this,f=e.options,g=e.data,h=e.graph,i=e.area,j=e.chart,k=e.xAxis&&e.xAxis.names,m=h&&h.shift||0,l=[\"graph\",\"area\"],h=f.data,n,q=e.xData;Qa(d,j);if(c){for(d=e.zones.length;d--;)l.push(\"zoneGraph\"+d,\"zoneArea\"+d);o(l,function(a){if(e[a])e[a].shift=m+1})}if(i)i.isArea=!0;b=p(b,!0);i={series:e};\ne.pointClass.prototype.applyOptions.apply(i,[a]);l=i.x;d=q.length;if(e.requireSorting&&l<q[d-1])for(n=!0;d&&q[d-1]>l;)d--;e.updateParallelArrays(i,\"splice\",d,0,0);e.updateParallelArrays(i,d);if(k&&i.name)k[l]=i.name;h.splice(d,0,a);n&&(e.data.splice(d,0,null),e.processData());f.legendType===\"point\"&&e.generatePoints();c&&(g[0]&&g[0].remove?g[0].remove(!1):(g.shift(),e.updateParallelArrays(i,\"shift\"),h.shift()));e.isDirty=!0;e.isDirtyData=!0;b&&(e.getAttribs(),j.redraw())},removePoint:function(a,b,\nc){var d=this,e=d.data,f=e[a],g=d.points,h=d.chart,i=function(){e.length===g.length&&g.splice(a,1);e.splice(a,1);d.options.data.splice(a,1);d.updateParallelArrays(f||{series:d},\"splice\",a,1);f&&f.destroy();d.isDirty=!0;d.isDirtyData=!0;b&&h.redraw()};Qa(c,h);b=p(b,!0);f?f.firePointEvent(\"remove\",null,i):i()},remove:function(a,b){var c=this,d=c.chart,a=p(a,!0);if(!c.isRemoving)c.isRemoving=!0,I(c,\"remove\",null,function(){c.destroy();d.isDirtyLegend=d.isDirtyBox=!0;d.linkSeries();a&&d.redraw(b)});c.isRemoving=\n!1},update:function(a,b){var c=this,d=this.chart,e=this.userOptions,f=this.type,g=M[f].prototype,h=[\"group\",\"markerGroup\",\"dataLabelsGroup\"],i;if(a.type&&a.type!==f||a.zIndex!==void 0)h.length=0;o(h,function(a){h[a]=c[a];delete c[a]});a=A(e,{animation:!1,index:this.index,pointStart:this.xData[0]},{data:this.options.data},a);this.remove(!1);for(i in g)this[i]=v;r(this,M[a.type||f].prototype);o(h,function(a){c[a]=h[a]});this.init(d,a);d.linkSeries();p(b,!0)&&d.redraw(!1)}});r(ha.prototype,{update:function(a,\nb){var c=this.chart,a=c.options[this.coll][this.options.index]=A(this.userOptions,a);this.destroy(!0);this._addedPlotLB=this.chart._labelPanes=v;this.init(c,r(a,{events:v}));c.isDirtyBox=!0;p(b,!0)&&c.redraw()},remove:function(a){for(var b=this.chart,c=this.coll,d=this.series,e=d.length;e--;)d[e]&&d[e].remove(!1);ja(b.axes,this);ja(b[c],this);b.options[c].splice(this.options.index,1);o(b[c],function(a,b){a.options.index=b});this.destroy();b.isDirtyBox=!0;p(a,!0)&&b.redraw()},setTitle:function(a,b){this.update({title:a},\nb)},setCategories:function(a,b){this.update({categories:a},b)}});var wa=ka(R);M.line=wa;ba.area=A(U,{threshold:0});var pa=ka(R,{type:\"area\",getSegments:function(){var a=this,b=[],c=[],d=[],e=this.xAxis,f=this.yAxis,g=f.stacks[this.stackKey],h={},i,j,k=this.points,m=this.options.connectNulls,l,n;if(this.options.stacking&&!this.cropped){for(l=0;l<k.length;l++)h[k[l].x]=k[l];for(n in g)g[n].total!==null&&d.push(+n);d.sort(function(a,b){return a-b});o(d,function(b){var d=0,k;if(!m||h[b]&&h[b].y!==null)if(h[b])c.push(h[b]);\nelse{for(l=a.index;l<=f.series.length;l++)if(k=g[b].points[l+\",\"+b]){d=k[1];break}i=e.translate(b);j=f.toPixels(d,!0);c.push({y:null,plotX:i,clientX:i,plotY:j,yBottom:j,onMouseOver:ta})}});c.length&&b.push(c)}else R.prototype.getSegments.call(this),b=this.segments;this.segments=b},getSegmentPath:function(a){var b=R.prototype.getSegmentPath.call(this,a),c=[].concat(b),d,e=this.options;d=b.length;var f=this.yAxis.getThreshold(e.threshold),g;d===3&&c.push(\"L\",b[1],b[2]);if(e.stacking&&!this.closedStacks)for(d=\na.length-1;d>=0;d--)g=p(a[d].yBottom,f),d<a.length-1&&e.step&&c.push(a[d+1].plotX,g),c.push(a[d].plotX,g);else this.closeSegment(c,a,f);this.areaPath=this.areaPath.concat(c);return b},closeSegment:function(a,b,c){a.push(\"L\",b[b.length-1].plotX,c,\"L\",b[0].plotX,c)},drawGraph:function(){this.areaPath=[];R.prototype.drawGraph.apply(this);var a=this,b=this.areaPath,c=this.options,d=[[\"area\",this.color,c.fillColor]];o(this.zones,function(b,f){d.push([\"zoneArea\"+f,b.color||a.color,b.fillColor||c.fillColor])});\no(d,function(d){var f=d[0],g=a[f];g?g.animate({d:b}):a[f]=a.chart.renderer.path(b).attr({fill:p(d[2],na(d[1]).setOpacity(p(c.fillOpacity,0.75)).get()),zIndex:0}).add(a.group)})},drawLegendSymbol:La.drawRectangle});M.area=pa;ba.spline=A(U);wa=ka(R,{type:\"spline\",getPointSpline:function(a,b,c){var d=b.plotX,e=b.plotY,f=a[c-1],g=a[c+1],h,i,j,k;if(f&&g){a=f.plotY;j=g.plotX;var g=g.plotY,m;h=(1.5*d+f.plotX)/2.5;i=(1.5*e+a)/2.5;j=(1.5*d+j)/2.5;k=(1.5*e+g)/2.5;m=(k-i)*(j-d)/(j-h)+e-k;i+=m;k+=m;i>a&&i>e?\n(i=t(a,e),k=2*e-i):i<a&&i<e&&(i=z(a,e),k=2*e-i);k>g&&k>e?(k=t(g,e),i=2*e-k):k<g&&k<e&&(k=z(g,e),i=2*e-k);b.rightContX=j;b.rightContY=k}c?(b=[\"C\",f.rightContX||f.plotX,f.rightContY||f.plotY,h||d,i||e,d,e],f.rightContX=f.rightContY=null):b=[\"M\",d,e];return b}});M.spline=wa;ba.areaspline=A(ba.area);pa=pa.prototype;wa=ka(wa,{type:\"areaspline\",closedStacks:!0,getSegmentPath:pa.getSegmentPath,closeSegment:pa.closeSegment,drawGraph:pa.drawGraph,drawLegendSymbol:La.drawRectangle});M.areaspline=wa;ba.column=\nA(U,{borderColor:\"#FFFFFF\",borderRadius:0,groupPadding:0.2,marker:null,pointPadding:0.1,minPointLength:0,cropThreshold:50,pointRange:null,states:{hover:{brightness:0.1,shadow:!1,halo:!1},select:{color:\"#C0C0C0\",borderColor:\"#000000\",shadow:!1}},dataLabels:{align:null,verticalAlign:null,y:null},startFromThreshold:!0,stickyTracking:!1,tooltip:{distance:6},threshold:0});wa=ka(R,{type:\"column\",pointAttrToOptions:{stroke:\"borderColor\",fill:\"color\",r:\"borderRadius\"},cropShoulder:0,directTouch:!0,trackerGroups:[\"group\",\n\"dataLabelsGroup\"],negStacks:!0,init:function(){R.prototype.init.apply(this,arguments);var a=this,b=a.chart;b.hasRendered&&o(b.series,function(b){if(b.type===a.type)b.isDirty=!0})},getColumnMetrics:function(){var a=this,b=a.options,c=a.xAxis,d=a.yAxis,e=c.reversed,f,g={},h,i=0;b.grouping===!1?i=1:o(a.chart.series,function(b){var c=b.options,e=b.yAxis;if(b.type===a.type&&b.visible&&d.len===e.len&&d.pos===e.pos)c.stacking?(f=b.stackKey,g[f]===v&&(g[f]=i++),h=g[f]):c.grouping!==!1&&(h=i++),b.columnIndex=\nh});var j=z(N(c.transA)*(c.ordinalSlope||b.pointRange||c.closestPointRange||c.tickInterval||1),c.len),k=j*b.groupPadding,m=(j-2*k)/i,b=z(b.maxPointWidth||c.len,p(b.pointWidth,m*(1-2*b.pointPadding)));return a.columnMetrics={width:b,offset:(m-b)/2+(k+((e?i-(a.columnIndex||0):a.columnIndex)||0)*m-j/2)*(e?-1:1)}},translate:function(){var a=this,b=a.chart,c=a.options,d=a.borderWidth=p(c.borderWidth,a.closestPointRange*a.xAxis.transA<2?0:1),e=a.yAxis,f=a.translatedThreshold=e.getThreshold(c.threshold),\ng=p(c.minPointLength,5),h=a.getColumnMetrics(),i=h.width,j=a.barW=t(i,1+2*d),k=a.pointXOffset=h.offset,m=-(d%2?0.5:0),l=d%2?0.5:1;b.inverted&&(f-=0.5,b.renderer.isVML&&(l+=1));c.pointPadding&&(j=sa(j));R.prototype.translate.apply(a);o(a.points,function(c){var d=p(c.yBottom,f),h=999+N(d),h=z(t(-h,c.plotY),e.len+h),o=c.plotX+k,r=j,s=z(h,d),y,v;y=t(h,d)-s;N(y)<g&&g&&(y=g,v=!e.reversed&&!c.negative||e.reversed&&c.negative,s=w(N(s-f)>g?d-g:f-(v?g:0)));c.barX=o;c.pointWidth=i;r=w(o+r)+m;o=w(o)+m;r-=o;d=\nN(s)<0.5;y=z(w(s+y)+l,9E4);s=w(s)+l;y-=s;d&&(s-=1,y+=1);c.tooltipPos=b.inverted?[e.len+e.pos-b.plotLeft-h,a.xAxis.len-o-r/2,y]:[o+r/2,h+e.pos-b.plotTop,y];c.shapeType=\"rect\";c.shapeArgs={x:o,y:s,width:r,height:y}})},getSymbol:ta,drawLegendSymbol:La.drawRectangle,drawGraph:ta,drawPoints:function(){var a=this,b=this.chart,c=a.options,d=b.renderer,e=c.animationLimit||250,f,g;o(a.points,function(h){var i=h.plotY,j=h.graphic;if(i!==v&&!isNaN(i)&&h.y!==null)f=h.shapeArgs,i=s(a.borderWidth)?{\"stroke-width\":a.borderWidth}:\n{},g=h.pointAttr[h.selected?\"select\":\"\"]||a.pointAttr[\"\"],j?(kb(j),j.attr(i)[b.pointCount<e?\"animate\":\"attr\"](A(f))):h.graphic=d[h.shapeType](f).attr(i).attr(g).add(a.group).shadow(c.shadow,null,c.stacking&&!c.borderRadius);else if(j)h.graphic=j.destroy()})},animate:function(a){var b=this.yAxis,c=this.options,d=this.chart.inverted,e={};if(ca)a?(e.scaleY=0.001,a=z(b.pos+b.len,t(b.pos,b.toPixels(c.threshold))),d?e.translateX=a-b.len:e.translateY=a,this.group.attr(e)):(e.scaleY=1,e[d?\"translateX\":\"translateY\"]=\nb.pos,this.group.animate(e,this.options.animation),this.animate=null)},remove:function(){var a=this,b=a.chart;b.hasRendered&&o(b.series,function(b){if(b.type===a.type)b.isDirty=!0});R.prototype.remove.apply(a,arguments)}});M.column=wa;ba.bar=A(ba.column);pa=ka(wa,{type:\"bar\",inverted:!0});M.bar=pa;ba.scatter=A(U,{lineWidth:0,marker:{enabled:!0},tooltip:{headerFormat:'<span style=\"color:{point.color}\">\\u25cf</span> <span style=\"font-size: 10px;\"> {series.name}</span><br/>',pointFormat:\"x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>\"}});\npa=ka(R,{type:\"scatter\",sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:[\"group\",\"markerGroup\",\"dataLabelsGroup\"],takeOrdinalPosition:!1,kdDimensions:2,drawGraph:function(){this.options.lineWidth&&R.prototype.drawGraph.call(this)}});M.scatter=pa;ba.pie=A(U,{borderColor:\"#FFFFFF\",borderWidth:1,center:[null,null],clip:!1,colorByPoint:!0,dataLabels:{distance:30,enabled:!0,formatter:function(){return this.y===null?void 0:this.point.name},x:0},ignoreHiddenPoint:!0,legendType:\"point\",marker:null,\nsize:null,showInLegend:!1,slicedOffset:10,states:{hover:{brightness:0.1,shadow:!1}},stickyTracking:!1,tooltip:{followPointer:!0}});U={type:\"pie\",isCartesian:!1,pointClass:ka(Ea,{init:function(){Ea.prototype.init.apply(this,arguments);var a=this,b;r(a,{visible:a.visible!==!1,name:p(a.name,\"Slice\")});b=function(b){a.slice(b.type===\"select\")};H(a,\"select\",b);H(a,\"unselect\",b);return a},setVisible:function(a,b){var c=this,d=c.series,e=d.chart,f=d.options.ignoreHiddenPoint,b=p(b,f);if(a!==c.visible){c.visible=\nc.options.visible=a=a===v?!c.visible:a;d.options.data[Ka(c,d.data)]=c.options;o([\"graphic\",\"dataLabel\",\"connector\",\"shadowGroup\"],function(b){if(c[b])c[b][a?\"show\":\"hide\"](!0)});c.legendItem&&e.legend.colorizeItem(c,a);!a&&c.state===\"hover\"&&c.setState(\"\");if(f)d.isDirty=!0;b&&e.redraw()}},slice:function(a,b,c){var d=this.series;Qa(c,d.chart);p(b,!0);this.sliced=this.options.sliced=a=s(a)?a:!this.sliced;d.options.data[Ka(this,d.data)]=this.options;a=a?this.slicedTranslation:{translateX:0,translateY:0};\nthis.graphic.animate(a);this.shadowGroup&&this.shadowGroup.animate(a)},haloPath:function(a){var b=this.shapeArgs,c=this.series.chart;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(c.plotLeft+b.x,c.plotTop+b.y,b.r+a,b.r+a,{innerR:this.shapeArgs.r,start:b.start,end:b.end})}}),requireSorting:!1,directTouch:!0,noSharedTooltip:!0,trackerGroups:[\"group\",\"dataLabelsGroup\"],axisTypes:[],pointAttrToOptions:{stroke:\"borderColor\",\"stroke-width\":\"borderWidth\",fill:\"color\"},animate:function(a){var b=\nthis,c=b.points,d=b.startAngleRad;if(!a)o(c,function(a){var c=a.graphic,g=a.shapeArgs;c&&(c.attr({r:a.startR||b.center[3]/2,start:d,end:d}),c.animate({r:g.r,start:g.start,end:g.end},b.options.animation))}),b.animate=null},setData:function(a,b,c,d){R.prototype.setData.call(this,a,!1,c,d);this.processData();this.generatePoints();p(b,!0)&&this.chart.redraw(c)},updateTotals:function(){var a,b=0,c=this.points,d=c.length,e,f=this.options.ignoreHiddenPoint;for(a=0;a<d;a++)e=c[a],b+=f&&!e.visible?0:e.y;this.total=\nb;for(a=0;a<d;a++)e=c[a],e.percentage=b>0&&(e.visible||!f)?e.y/b*100:0,e.total=b},generatePoints:function(){R.prototype.generatePoints.call(this);this.updateTotals()},translate:function(a){this.generatePoints();var b=0,c=this.options,d=c.slicedOffset,e=d+c.borderWidth,f,g,h,i=c.startAngle||0,j=this.startAngleRad=ma/180*(i-90),i=(this.endAngleRad=ma/180*(p(c.endAngle,i+360)-90))-j,k=this.points,m=c.dataLabels.distance,c=c.ignoreHiddenPoint,l,n=k.length,o;if(!a)this.center=a=this.getCenter();this.getX=\nfunction(b,c){h=W.asin(z((b-a[1])/(a[2]/2+m),1));return a[0]+(c?-1:1)*X(h)*(a[2]/2+m)};for(l=0;l<n;l++){o=k[l];f=j+b*i;if(!c||o.visible)b+=o.percentage/100;g=j+b*i;o.shapeType=\"arc\";o.shapeArgs={x:a[0],y:a[1],r:a[2]/2,innerR:a[3]/2,start:w(f*1E3)/1E3,end:w(g*1E3)/1E3};h=(g+f)/2;h>1.5*ma?h-=2*ma:h<-ma/2&&(h+=2*ma);o.slicedTranslation={translateX:w(X(h)*d),translateY:w(aa(h)*d)};f=X(h)*a[2]/2;g=aa(h)*a[2]/2;o.tooltipPos=[a[0]+f*0.7,a[1]+g*0.7];o.half=h<-ma/2||h>ma/2?1:0;o.angle=h;e=z(e,m/2);o.labelPos=\n[a[0]+f+X(h)*m,a[1]+g+aa(h)*m,a[0]+f+X(h)*e,a[1]+g+aa(h)*e,a[0]+f,a[1]+g,m<0?\"center\":o.half?\"right\":\"left\",h]}},drawGraph:null,drawPoints:function(){var a=this,b=a.chart.renderer,c,d,e=a.options.shadow,f,g,h;if(e&&!a.shadowGroup)a.shadowGroup=b.g(\"shadow\").add(a.group);o(a.points,function(i){if(i.y!==null){d=i.graphic;g=i.shapeArgs;f=i.shadowGroup;if(e&&!f)f=i.shadowGroup=b.g(\"shadow\").add(a.shadowGroup);c=i.sliced?i.slicedTranslation:{translateX:0,translateY:0};f&&f.attr(c);if(d)d.animate(r(g,c));\nelse{h={\"stroke-linejoin\":\"round\"};if(!i.visible)h.visibility=\"hidden\";i.graphic=d=b[i.shapeType](g).setRadialReference(a.center).attr(i.pointAttr[i.selected?\"select\":\"\"]).attr(h).attr(c).add(a.group).shadow(e,f)}}})},searchPoint:ta,sortByAngle:function(a,b){a.sort(function(a,d){return a.angle!==void 0&&(d.angle-a.angle)*b})},drawLegendSymbol:La.drawRectangle,getCenter:Xb.getCenter,getSymbol:ta};U=ka(R,U);M.pie=U;R.prototype.drawDataLabels=function(){var a=this,b=a.options,c=b.cursor,d=b.dataLabels,\ne=a.points,f,g,h=a.hasRendered||0,i,j,k=a.chart.renderer;if(d.enabled||a._hasPointLabels)a.dlProcessOptions&&a.dlProcessOptions(d),j=a.plotGroup(\"dataLabelsGroup\",\"data-labels\",d.defer?\"hidden\":\"visible\",d.zIndex||6),p(d.defer,!0)&&(j.attr({opacity:+h}),h||H(a,\"afterAnimate\",function(){a.visible&&j.show();j[b.animation?\"animate\":\"attr\"]({opacity:1},{duration:200})})),g=d,o(e,function(e){var h,n=e.dataLabel,o,t,w=e.connector,z=!0,u,y={};f=e.dlOptions||e.options&&e.options.dataLabels;h=p(f&&f.enabled,\ng.enabled);if(n&&!h)e.dataLabel=n.destroy();else if(h){d=A(g,f);u=d.style;h=d.rotation;o=e.getLabelConfig();i=d.format?Ha(d.format,o):d.formatter.call(o,d);u.color=p(d.color,u.color,a.color,\"black\");if(n)if(s(i))n.attr({text:i}),z=!1;else{if(e.dataLabel=n=n.destroy(),w)e.connector=w.destroy()}else if(s(i)){n={fill:d.backgroundColor,stroke:d.borderColor,\"stroke-width\":d.borderWidth,r:d.borderRadius||0,rotation:h,padding:d.padding,zIndex:1};if(u.color===\"contrast\")y.color=d.inside||d.distance<0||b.stacking?\nk.getContrast(e.color||a.color):\"#000000\";if(c)y.cursor=c;for(t in n)n[t]===v&&delete n[t];n=e.dataLabel=k[h?\"text\":\"label\"](i,0,-999,d.shape,null,null,d.useHTML).attr(n).css(r(u,y)).add(j).shadow(d.shadow)}n&&a.alignDataLabel(e,n,d,null,z)}})};R.prototype.alignDataLabel=function(a,b,c,d,e){var f=this.chart,g=f.inverted,h=p(a.plotX,-999),i=p(a.plotY,-999),j=b.getBBox(),k=f.renderer.fontMetrics(c.style.fontSize).b,m=this.visible&&(a.series.forceDL||f.isInsidePlot(h,w(i),g)||d&&f.isInsidePlot(h,g?d.x+\n1:d.y+d.height-1,g));if(m)d=r({x:g?f.plotWidth-i:h,y:w(g?f.plotHeight-h:i),width:0,height:0},d),r(c,{width:j.width,height:j.height}),c.rotation?(a=f.renderer.rotCorr(k,c.rotation),b[e?\"attr\":\"animate\"]({x:d.x+c.x+d.width/2+a.x,y:d.y+c.y+d.height/2}).attr({align:c.align})):(b.align(c,null,d),g=b.alignAttr,p(c.overflow,\"justify\")===\"justify\"?this.justifyDataLabel(b,c,g,j,d,e):p(c.crop,!0)&&(m=f.isInsidePlot(g.x,g.y)&&f.isInsidePlot(g.x+j.width,g.y+j.height)),c.shape&&b.attr({anchorX:a.plotX,anchorY:a.plotY}));\nif(!m)b.attr({y:-999}),b.placed=!1};R.prototype.justifyDataLabel=function(a,b,c,d,e,f){var g=this.chart,h=b.align,i=b.verticalAlign,j,k,m=a.box?0:a.padding||0;j=c.x+m;if(j<0)h===\"right\"?b.align=\"left\":b.x=-j,k=!0;j=c.x+d.width-m;if(j>g.plotWidth)h===\"left\"?b.align=\"right\":b.x=g.plotWidth-j,k=!0;j=c.y+m;if(j<0)i===\"bottom\"?b.verticalAlign=\"top\":b.y=-j,k=!0;j=c.y+d.height-m;if(j>g.plotHeight)i===\"top\"?b.verticalAlign=\"bottom\":b.y=g.plotHeight-j,k=!0;if(k)a.placed=!f,a.align(b,null,e)};if(M.pie)M.pie.prototype.drawDataLabels=\nfunction(){var a=this,b=a.data,c,d=a.chart,e=a.options.dataLabels,f=p(e.connectorPadding,10),g=p(e.connectorWidth,1),h=d.plotWidth,i=d.plotHeight,j,k,m=p(e.softConnector,!0),l=e.distance,n=a.center,q=n[2]/2,r=n[1],s=l>0,v,u,y,C=[[],[]],A,B,D,F,G,E=[0,0,0,0],L=function(a,b){return b.y-a.y};if(a.visible&&(e.enabled||a._hasPointLabels)){R.prototype.drawDataLabels.apply(a);o(b,function(a){a.dataLabel&&a.visible&&C[a.half].push(a)});for(F=2;F--;){var I=[],M=[],H=C[F],K=H.length,J;if(K){a.sortByAngle(H,\nF-0.5);for(G=b=0;!b&&H[G];)b=H[G]&&H[G].dataLabel&&(H[G].dataLabel.getBBox().height||21),G++;if(l>0){u=z(r+q+l,d.plotHeight);for(G=t(0,r-q-l);G<=u;G+=b)I.push(G);u=I.length;if(K>u){c=[].concat(H);c.sort(L);for(G=K;G--;)c[G].rank=G;for(G=K;G--;)H[G].rank>=u&&H.splice(G,1);K=H.length}for(G=0;G<K;G++){c=H[G];y=c.labelPos;c=9999;var P,O;for(O=0;O<u;O++)P=N(I[O]-y[1]),P<c&&(c=P,J=O);if(J<G&&I[G]!==null)J=G;else for(u<K-G+J&&I[G]!==null&&(J=u-K+G);I[J]===null;)J++;M.push({i:J,y:I[J]});I[J]=null}M.sort(L)}for(G=\n0;G<K;G++){c=H[G];y=c.labelPos;v=c.dataLabel;D=c.visible===!1?\"hidden\":\"inherit\";c=y[1];if(l>0){if(u=M.pop(),J=u.i,B=u.y,c>B&&I[J+1]!==null||c<B&&I[J-1]!==null)B=z(t(0,c),d.plotHeight)}else B=c;A=e.justify?n[0]+(F?-1:1)*(q+l):a.getX(B===r-q-l||B===r+q+l?c:B,F);v._attr={visibility:D,align:y[6]};v._pos={x:A+e.x+({left:f,right:-f}[y[6]]||0),y:B+e.y-10};v.connX=A;v.connY=B;if(this.options.size===null)u=v.width,A-u<f?E[3]=t(w(u-A+f),E[3]):A+u>h-f&&(E[1]=t(w(A+u-h+f),E[1])),B-b/2<0?E[0]=t(w(-B+b/2),E[0]):\nB+b/2>i&&(E[2]=t(w(B+b/2-i),E[2]))}}}if(Ca(E)===0||this.verifyDataLabelOverflow(E))this.placeDataLabels(),s&&g&&o(this.points,function(b){j=b.connector;y=b.labelPos;if((v=b.dataLabel)&&v._pos&&b.visible)D=v._attr.visibility,A=v.connX,B=v.connY,k=m?[\"M\",A+(y[6]===\"left\"?5:-5),B,\"C\",A,B,2*y[2]-y[4],2*y[3]-y[5],y[2],y[3],\"L\",y[4],y[5]]:[\"M\",A+(y[6]===\"left\"?5:-5),B,\"L\",y[2],y[3],\"L\",y[4],y[5]],j?(j.animate({d:k}),j.attr(\"visibility\",D)):b.connector=j=a.chart.renderer.path(k).attr({\"stroke-width\":g,stroke:e.connectorColor||\nb.color||\"#606060\",visibility:D}).add(a.dataLabelsGroup);else if(j)b.connector=j.destroy()})}},M.pie.prototype.placeDataLabels=function(){o(this.points,function(a){var b=a.dataLabel;if(b&&a.visible)(a=b._pos)?(b.attr(b._attr),b[b.moved?\"animate\":\"attr\"](a),b.moved=!0):b&&b.attr({y:-999})})},M.pie.prototype.alignDataLabel=ta,M.pie.prototype.verifyDataLabelOverflow=function(a){var b=this.center,c=this.options,d=c.center,e=c.minSize||80,f=e,g;d[0]!==null?f=t(b[2]-t(a[1],a[3]),e):(f=t(b[2]-a[1]-a[3],\ne),b[0]+=(a[3]-a[1])/2);d[1]!==null?f=t(z(f,b[2]-t(a[0],a[2])),e):(f=t(z(f,b[2]-a[0]-a[2]),e),b[1]+=(a[0]-a[2])/2);f<b[2]?(b[2]=f,b[3]=/%$/.test(c.innerSize||0)?f*parseFloat(c.innerSize||0)/100:parseFloat(c.innerSize||0),this.translate(b),o(this.points,function(a){if(a.dataLabel)a.dataLabel._pos=null}),this.drawDataLabels&&this.drawDataLabels()):g=!0;return g};if(M.column)M.column.prototype.alignDataLabel=function(a,b,c,d,e){var f=this.chart.inverted,g=a.series,h=a.dlBox||a.shapeArgs,i=p(a.below,\na.plotY>p(this.translatedThreshold,g.yAxis.len)),j=p(c.inside,!!this.options.stacking);if(h&&(d=A(h),f&&(d={x:g.yAxis.len-d.y-d.height,y:g.xAxis.len-d.x-d.width,width:d.height,height:d.width}),!j))f?(d.x+=i?0:d.width,d.width=0):(d.y+=i?d.height:0,d.height=0);c.align=p(c.align,!f||j?\"center\":i?\"right\":\"left\");c.verticalAlign=p(c.verticalAlign,f||j?\"middle\":i?\"top\":\"bottom\");R.prototype.alignDataLabel.call(this,a,b,c,d,e)};(function(a){var b=a.Chart,c=a.each,d=a.pick,e=HighchartsAdapter.addEvent;b.prototype.callbacks.push(function(a){function b(){var e=\n[];c(a.series,function(a){var b=a.options.dataLabels,f=a.dataLabelCollections||[\"dataLabel\"];(b.enabled||a._hasPointLabels)&&!b.allowOverlap&&a.visible&&c(f,function(b){c(a.points,function(a){if(a[b])a[b].labelrank=d(a.labelrank,a.shapeArgs&&a.shapeArgs.height),e.push(a[b])})})});a.hideOverlappingLabels(e)}b();e(a,\"redraw\",b)});b.prototype.hideOverlappingLabels=function(a){var b=a.length,d,e,j,k,m,l,n;for(e=0;e<b;e++)if(d=a[e])d.oldOpacity=d.opacity,d.newOpacity=1;a.sort(function(a,b){return(b.labelrank||\n0)-(a.labelrank||0)});for(e=0;e<b;e++){j=a[e];for(d=e+1;d<b;++d)if(k=a[d],j&&k&&j.placed&&k.placed&&j.newOpacity!==0&&k.newOpacity!==0&&(m=j.alignAttr,l=k.alignAttr,n=2*(j.box?0:j.padding),m=!(l.x>m.x+(j.width-n)||l.x+(k.width-n)<m.x||l.y>m.y+(j.height-n)||l.y+(k.height-n)<m.y)))(j.labelrank<k.labelrank?j:k).newOpacity=0}c(a,function(a){var b,c;if(a){c=a.newOpacity;if(a.oldOpacity!==c&&a.placed)c?a.show(!0):b=function(){a.hide()},a.alignAttr.opacity=c,a[a.isOld?\"animate\":\"attr\"](a.alignAttr,null,\nb);a.isOld=!0}})}})(B);U=B.TrackerMixin={drawTrackerPoint:function(){var a=this,b=a.chart,c=b.pointer,d=a.options.cursor,e=d&&{cursor:d},f=function(a){for(var c=a.target,d;c&&!d;)d=c.point,c=c.parentNode;if(d!==v&&d!==b.hoverPoint)d.onMouseOver(a)};o(a.points,function(a){if(a.graphic)a.graphic.element.point=a;if(a.dataLabel)a.dataLabel.element.point=a});if(!a._hasTracking)o(a.trackerGroups,function(b){if(a[b]&&(a[b].addClass(\"highcharts-tracker\").on(\"mouseover\",f).on(\"mouseout\",function(a){c.onTrackerMouseOut(a)}).css(e),\n$a))a[b].on(\"touchstart\",f)}),a._hasTracking=!0},drawTrackerGraph:function(){var a=this,b=a.options,c=b.trackByArea,d=[].concat(c?a.areaPath:a.graphPath),e=d.length,f=a.chart,g=f.pointer,h=f.renderer,i=f.options.tooltip.snap,j=a.tracker,k=b.cursor,m=k&&{cursor:k},k=a.singlePoints,l,n=function(){if(f.hoverSeries!==a)a.onMouseOver()},p=\"rgba(192,192,192,\"+(ca?1.0E-4:0.002)+\")\";if(e&&!c)for(l=e+1;l--;)d[l]===\"M\"&&d.splice(l+1,0,d[l+1]-i,d[l+2],\"L\"),(l&&d[l]===\"M\"||l===e)&&d.splice(l,0,\"L\",d[l-2]+i,d[l-\n1]);for(l=0;l<k.length;l++)e=k[l],d.push(\"M\",e.plotX-i,e.plotY,\"L\",e.plotX+i,e.plotY);j?j.attr({d:d}):(a.tracker=h.path(d).attr({\"stroke-linejoin\":\"round\",visibility:a.visible?\"visible\":\"hidden\",stroke:p,fill:c?p:O,\"stroke-width\":b.lineWidth+(c?0:2*i),zIndex:2}).add(a.group),o([a.tracker,a.markerGroup],function(a){a.addClass(\"highcharts-tracker\").on(\"mouseover\",n).on(\"mouseout\",function(a){g.onTrackerMouseOut(a)}).css(m);if($a)a.on(\"touchstart\",n)}))}};if(M.column)wa.prototype.drawTracker=U.drawTrackerPoint;\nif(M.pie)M.pie.prototype.drawTracker=U.drawTrackerPoint;if(M.scatter)pa.prototype.drawTracker=U.drawTrackerPoint;r(lb.prototype,{setItemEvents:function(a,b,c,d,e){var f=this;(c?b:a.legendGroup).on(\"mouseover\",function(){a.setState(\"hover\");b.css(f.options.itemHoverStyle)}).on(\"mouseout\",function(){b.css(a.visible?d:e);a.setState()}).on(\"click\",function(b){var c=function(){a.setVisible()},b={browserEvent:b};a.firePointEvent?a.firePointEvent(\"legendItemClick\",b,c):I(a,\"legendItemClick\",b,c)})},createCheckboxForItem:function(a){a.checkbox=\n$(\"input\",{type:\"checkbox\",checked:a.selected,defaultChecked:a.selected},this.options.itemCheckboxStyle,this.chart.container);H(a.checkbox,\"click\",function(b){I(a.series||a,\"checkboxClick\",{checked:b.target.checked,item:a},function(){a.select()})})}});S.legend.itemStyle.cursor=\"pointer\";r(D.prototype,{showResetZoom:function(){var a=this,b=S.lang,c=a.options.chart.resetZoomButton,d=c.theme,e=d.states,f=c.relativeTo===\"chart\"?null:\"plotBox\";this.resetZoomButton=a.renderer.button(b.resetZoom,null,null,\nfunction(){a.zoomOut()},d,e&&e.hover).attr({align:c.position.align,title:b.resetZoomTitle}).add().align(c.position,!1,f)},zoomOut:function(){var a=this;I(a,\"selection\",{resetSelection:!0},function(){a.zoom()})},zoom:function(a){var b,c=this.pointer,d=!1,e;!a||a.resetSelection?o(this.axes,function(a){b=a.zoom()}):o(a.xAxis.concat(a.yAxis),function(a){var e=a.axis,h=e.isXAxis;if(c[h?\"zoomX\":\"zoomY\"]||c[h?\"pinchX\":\"pinchY\"])b=e.zoom(a.min,a.max),e.displayBtn&&(d=!0)});e=this.resetZoomButton;if(d&&!e)this.showResetZoom();\nelse if(!d&&da(e))this.resetZoomButton=e.destroy();b&&this.redraw(p(this.options.chart.animation,a&&a.animation,this.pointCount<100))},pan:function(a,b){var c=this,d=c.hoverPoints,e;d&&o(d,function(a){a.setState()});o(b===\"xy\"?[1,0]:[1],function(b){var d=a[b?\"chartX\":\"chartY\"],h=c[b?\"xAxis\":\"yAxis\"][0],i=c[b?\"mouseDownX\":\"mouseDownY\"],j=(h.pointRange||0)/2,k=h.getExtremes(),m=h.toValue(i-d,!0)+j,j=h.toValue(i+c[b?\"plotWidth\":\"plotHeight\"]-d,!0)-j,i=i>d;if(h.series.length&&(i||m>z(k.dataMin,k.min))&&\n(!i||j<t(k.dataMax,k.max)))h.setExtremes(m,j,!1,!1,{trigger:\"pan\"}),e=!0;c[b?\"mouseDownX\":\"mouseDownY\"]=d});e&&c.redraw(!1);L(c.container,{cursor:\"move\"})}});r(Ea.prototype,{select:function(a,b){var c=this,d=c.series,e=d.chart,a=p(a,!c.selected);c.firePointEvent(a?\"select\":\"unselect\",{accumulate:b},function(){c.selected=c.options.selected=a;d.options.data[Ka(c,d.data)]=c.options;c.setState(a&&\"select\");b||o(e.getSelectedPoints(),function(a){if(a.selected&&a!==c)a.selected=a.options.selected=!1,d.options.data[Ka(a,\nd.data)]=a.options,a.setState(\"\"),a.firePointEvent(\"unselect\")})})},onMouseOver:function(a,b){var c=this.series,d=c.chart,e=d.tooltip,f=d.hoverPoint;if(d.hoverSeries!==c)c.onMouseOver();if(f&&f!==this)f.onMouseOut();if(this.series&&(this.firePointEvent(\"mouseOver\"),e&&(!e.shared||c.noSharedTooltip)&&e.refresh(this,a),this.setState(\"hover\"),!b))d.hoverPoint=this},onMouseOut:function(){var a=this.series.chart,b=a.hoverPoints;this.firePointEvent(\"mouseOut\");if(!b||Ka(this,b)===-1)this.setState(),a.hoverPoint=\nnull},importEvents:function(){if(!this.hasImportedEvents){var a=A(this.series.options.point,this.options).events,b;this.events=a;for(b in a)H(this,b,a[b]);this.hasImportedEvents=!0}},setState:function(a,b){var c=this.plotX,d=this.plotY,e=this.series,f=e.options.states,g=ba[e.type].marker&&e.options.marker,h=g&&!g.enabled,i=g&&g.states[a],j=i&&i.enabled===!1,k=e.stateMarkerGraphic,m=this.marker||{},l=e.chart,n=e.halo,o,a=a||\"\";o=this.pointAttr[a]||e.pointAttr[a];if(!(a===this.state&&!b||this.selected&&\na!==\"select\"||f[a]&&f[a].enabled===!1||a&&(j||h&&i.enabled===!1)||a&&m.states&&m.states[a]&&m.states[a].enabled===!1)){if(this.graphic)g=g&&this.graphic.symbolName&&o.r,this.graphic.attr(A(o,g?{x:c-g,y:d-g,width:2*g,height:2*g}:{})),k&&k.hide();else{if(a&&i)if(g=i.radius,m=m.symbol||e.symbol,k&&k.currentSymbol!==m&&(k=k.destroy()),k)k[b?\"animate\":\"attr\"]({x:c-g,y:d-g});else if(m)e.stateMarkerGraphic=k=l.renderer.symbol(m,c-g,d-g,2*g,2*g).attr(o).add(e.markerGroup),k.currentSymbol=m;if(k)k[a&&l.isInsidePlot(c,\nd,l.inverted)?\"show\":\"hide\"](),k.element.point=this}if((c=f[a]&&f[a].halo)&&c.size){if(!n)e.halo=n=l.renderer.path().add(l.seriesGroup);n.attr(r({fill:na(this.color||e.color).setOpacity(c.opacity).get()},c.attributes))[b?\"animate\":\"attr\"]({d:this.haloPath(c.size)})}else n&&n.attr({d:[]});this.state=a}},haloPath:function(a){var b=this.series,c=b.chart,d=b.getPlotBox(),e=c.inverted;return c.renderer.symbols.circle(d.translateX+(e?b.yAxis.len-this.plotY:this.plotX)-a,d.translateY+(e?b.xAxis.len-this.plotX:\nthis.plotY)-a,a*2,a*2)}});r(R.prototype,{onMouseOver:function(){var a=this.chart,b=a.hoverSeries;if(b&&b!==this)b.onMouseOut();this.options.events.mouseOver&&I(this,\"mouseOver\");this.setState(\"hover\");a.hoverSeries=this},onMouseOut:function(){var a=this.options,b=this.chart,c=b.tooltip,d=b.hoverPoint;b.hoverSeries=null;if(d)d.onMouseOut();this&&a.events.mouseOut&&I(this,\"mouseOut\");c&&!a.stickyTracking&&(!c.shared||this.noSharedTooltip)&&c.hide();this.setState()},setState:function(a){var b=this.options,\nc=this.graph,d=b.states,e=b.lineWidth,b=0,a=a||\"\";if(this.state!==a&&(this.state=a,!(d[a]&&d[a].enabled===!1)&&(a&&(e=d[a].lineWidth||e+(d[a].lineWidthPlus||0)),c&&!c.dashstyle))){a={\"stroke-width\":e};for(c.attr(a);this[\"zoneGraph\"+b];)this[\"zoneGraph\"+b].attr(a),b+=1}},setVisible:function(a,b){var c=this,d=c.chart,e=c.legendItem,f,g=d.options.chart.ignoreHiddenSeries,h=c.visible;f=(c.visible=a=c.userOptions.visible=a===v?!h:a)?\"show\":\"hide\";o([\"group\",\"dataLabelsGroup\",\"markerGroup\",\"tracker\"],function(a){if(c[a])c[a][f]()});\nif(d.hoverSeries===c||(d.hoverPoint&&d.hoverPoint.series)===c)c.onMouseOut();e&&d.legend.colorizeItem(c,a);c.isDirty=!0;c.options.stacking&&o(d.series,function(a){if(a.options.stacking&&a.visible)a.isDirty=!0});o(c.linkedSeries,function(b){b.setVisible(a,!1)});if(g)d.isDirtyBox=!0;b!==!1&&d.redraw();I(c,f)},show:function(){this.setVisible(!0)},hide:function(){this.setVisible(!1)},select:function(a){this.selected=a=a===v?!this.selected:a;if(this.checkbox)this.checkbox.checked=a;I(this,a?\"select\":\"unselect\")},\ndrawTracker:U.drawTrackerGraph});r(B,{Color:na,Point:Ea,Tick:Ra,Renderer:Za,SVGElement:P,SVGRenderer:ua,arrayMin:Na,arrayMax:Ca,charts:Y,dateFormat:Ma,error:la,format:Ha,pathAnim:xb,getOptions:function(){return S},hasBidiBug:Nb,isTouchDevice:Jb,setOptions:function(a){S=A(!0,S,a);Cb();return S},addEvent:H,removeEvent:Z,createElement:$,discardElement:Pa,css:L,each:o,map:Ta,merge:A,splat:ra,extendClass:ka,pInt:F,svg:ca,canvas:fa,vml:!ca&&!fa,product:\"Highcharts\",version:\"4.1.8\"})})();\n\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = Highcharts;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);