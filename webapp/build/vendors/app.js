!function(I){function g(t){if(C[t])return C[t].exports;var i=C[t]={exports:{},id:t,loaded:!1};return I[t].call(i.exports,i,i.exports,g),i.loaded=!0,i.exports}var t=window.webpackJsonp;window.webpackJsonp=function(n,e){for(var l,a,c=0,A=[];c<n.length;c++)a=n[c],i[a]&&A.push.apply(A,i[a]),i[a]=0;for(l in e)I[l]=e[l];for(t&&t(n,e);A.length;)A.shift().call(null,g);if(e[0])return C[0]=0,g(0)};var C={},i={2:0};return g.e=function(I,t){if(0===i[I])return t.call(null,g);if(void 0!==i[I])i[I].push(t);else{i[I]=[t];var C=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.async=!0,n.src=g.p+""+I+"."+({0:"home",1:"login",3:"common"}[I]||I)+"/app.js",C.appendChild(n)}},g.m=I,g.c=C,g.p="",g(0)}([function(I,g,t){t(1),t(5),t(2),I.exports=t(9)},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(_, $, module) {/*! jQuery v1.10.2 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license\n //@ sourceMappingURL=jquery.min.map\n */\n(function (e, t) {\n    var n, r, i = typeof t, o = e.location, a = e.document, s = a.documentElement, l = e.jQuery, u = e.$, c = {}, p = [], f = "1.10.2", d = p.concat, h = p.push, g = p.slice, m = p.indexOf, y = c.toString, v = c.hasOwnProperty, b = f.trim, x = function (e, t) {\n        return new x.fn.init(e, t, r)\n    }, w = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source, T = /\\S+/g, C = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, N = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/, k = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/, E = /^[\\],:{}\\s]*$/, S = /(?:^|:|,)(?:\\s*\\[)+/g, A = /\\\\(?:["\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g, j = /"[^"\\\\\\r\\n]*"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g, D = /^-ms-/, L = /-([\\da-z])/gi, H = function (e, t) {\n        return t.toUpperCase()\n    }, q = function (e) {\n        (a.addEventListener || "load" === e.type || "complete" === a.readyState) && (_(), x.ready())\n    }, _ = function () {\n        a.addEventListener ? (a.removeEventListener("DOMContentLoaded", q, !1), e.removeEventListener("load", q, !1)) : (a.detachEvent("onreadystatechange", q), e.detachEvent("onload", q))\n    };\n    x.fn = x.prototype = {jquery: f, constructor: x, init: function (e, n, r) {\n            var i, o;\n            if (!e)\n                return this;\n            if ("string" == typeof e) {\n                if (i = "<" === e.charAt(0) && ">" === e.charAt(e.length - 1) && e.length >= 3 ? [null, e, null] : N.exec(e), !i || !i[1] && n)\n                    return!n || n.jquery ? (n || r).find(e) : this.constructor(n).find(e);\n                if (i[1]) {\n                    if (n = n instanceof x ? n[0] : n, x.merge(this, x.parseHTML(i[1], n && n.nodeType ? n.ownerDocument || n : a, !0)), k.test(i[1]) && x.isPlainObject(n))\n                        for (i in n)\n                            x.isFunction(this[i]) ? this[i](n[i]) : this.attr(i, n[i]);\n                    return this\n                }\n                if (o = a.getElementById(i[2]), o && o.parentNode) {\n                    if (o.id !== i[2])\n                        return r.find(e);\n                    this.length = 1, this[0] = o\n                }\n                return this.context = a, this.selector = e, this\n            }\n            return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : x.isFunction(e) ? r.ready(e) : (e.selector !== t && (this.selector = e.selector, this.context = e.context), x.makeArray(e, this))\n        }, selector: "", length: 0, toArray: function () {\n            return g.call(this)\n        }, get: function (e) {\n            return null == e ? this.toArray() : 0 > e ? this[this.length + e] : this[e]\n        }, pushStack: function (e) {\n            var t = x.merge(this.constructor(), e);\n            return t.prevObject = this, t.context = this.context, t\n        }, each: function (e, t) {\n            return x.each(this, e, t)\n        }, ready: function (e) {\n            return x.ready.promise().done(e), this\n        }, slice: function () {\n            return this.pushStack(g.apply(this, arguments))\n        }, first: function () {\n            return this.eq(0)\n        }, last: function () {\n            return this.eq(-1)\n        }, eq: function (e) {\n            var t = this.length, n = +e + (0 > e ? t : 0);\n            return this.pushStack(n >= 0 && t > n ? [this[n]] : [])\n        }, map: function (e) {\n            return this.pushStack(x.map(this, function (t, n) {\n                return e.call(t, n, t)\n            }))\n        }, end: function () {\n            return this.prevObject || this.constructor(null)\n        }, push: h, sort: [].sort, splice: [].splice}, x.fn.init.prototype = x.fn, x.extend = x.fn.extend = function () {\n        var e, n, r, i, o, a, s = arguments[0] || {}, l = 1, u = arguments.length, c = !1;\n        for ("boolean" == typeof s && (c = s, s = arguments[1] || {}, l = 2), "object" == typeof s || x.isFunction(s) || (s = {}), u === l && (s = this, --l); u > l; l++)\n            if (null != (o = arguments[l]))\n                for (i in o)\n                    e = s[i], r = o[i], s !== r && (c && r && (x.isPlainObject(r) || (n = x.isArray(r))) ? (n ? (n = !1, a = e && x.isArray(e) ? e : []) : a = e && x.isPlainObject(e) ? e : {}, s[i] = x.extend(c, a, r)) : r !== t && (s[i] = r));\n        return s\n    }, x.extend({expando: "jQuery" + (f + Math.random()).replace(/\\D/g, ""), noConflict: function (t) {\n            return e.$ === x && (e.$ = u), t && e.jQuery === x && (e.jQuery = l), x\n        }, isReady: !1, readyWait: 1, holdReady: function (e) {\n            e ? x.readyWait++ : x.ready(!0)\n        }, ready: function (e) {\n            if (e === !0 ? !--x.readyWait : !x.isReady) {\n                if (!a.body)\n                    return setTimeout(x.ready);\n                x.isReady = !0, e !== !0 && --x.readyWait > 0 || (n.resolveWith(a, [x]), x.fn.trigger && x(a).trigger("ready").off("ready"))\n            }\n        }, isFunction: function (e) {\n            return"function" === x.type(e)\n        }, isArray: Array.isArray || function (e) {\n            return"array" === x.type(e)\n        }, isWindow: function (e) {\n            return null != e && e == e.window\n        }, isNumeric: function (e) {\n            return!isNaN(parseFloat(e)) && isFinite(e)\n        }, type: function (e) {\n            return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? c[y.call(e)] || "object" : typeof e\n        }, isPlainObject: function (e) {\n            var n;\n            if (!e || "object" !== x.type(e) || e.nodeType || x.isWindow(e))\n                return!1;\n            try {\n                if (e.constructor && !v.call(e, "constructor") && !v.call(e.constructor.prototype, "isPrototypeOf"))\n                    return!1\n            } catch (r) {\n                return!1\n            }\n            if (x.support.ownLast)\n                for (n in e)\n                    return v.call(e, n);\n            for (n in e)\n                ;\n            return n === t || v.call(e, n)\n        }, isEmptyObject: function (e) {\n            var t;\n            for (t in e)\n                return!1;\n            return!0\n        }, error: function (e) {\n            throw Error(e)\n        }, parseHTML: function (e, t, n) {\n            if (!e || "string" != typeof e)\n                return null;\n            "boolean" == typeof t && (n = t, t = !1), t = t || a;\n            var r = k.exec(e), i = !n && [];\n            return r ? [t.createElement(r[1])] : (r = x.buildFragment([e], t, i), i && x(i).remove(), x.merge([], r.childNodes))\n        }, parseJSON: function (n) {\n            return e.JSON && e.JSON.parse ? e.JSON.parse(n) : null === n ? n : "string" == typeof n && (n = x.trim(n), n && E.test(n.replace(A, "@").replace(j, "]").replace(S, ""))) ? Function("return " + n)() : (x.error("Invalid JSON: " + n), t)\n        }, parseXML: function (n) {\n            var r, i;\n            if (!n || "string" != typeof n)\n                return null;\n            try {\n                e.DOMParser ? (i = new DOMParser, r = i.parseFromString(n, "text/xml")) : (r = new ActiveXObject("Microsoft.XMLDOM"), r.async = "false", r.loadXML(n))\n            } catch (o) {\n                r = t\n            }\n            return r && r.documentElement && !r.getElementsByTagName("parsererror").length || x.error("Invalid XML: " + n), r\n        }, noop: function () {\n        }, globalEval: function (t) {\n            t && x.trim(t) && (e.execScript || function (t) {\n                e.eval.call(e, t)\n            })(t)\n        }, camelCase: function (e) {\n            return e.replace(D, "ms-").replace(L, H)\n        }, nodeName: function (e, t) {\n            return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()\n        }, each: function (e, t, n) {\n            var r, i = 0, o = e.length, a = M(e);\n            if (n) {\n                if (a) {\n                    for (; o > i; i++)\n                        if (r = t.apply(e[i], n), r === !1)\n                            break\n                } else\n                    for (i in e)\n                        if (r = t.apply(e[i], n), r === !1)\n                            break\n            } else if (a) {\n                for (; o > i; i++)\n                    if (r = t.call(e[i], i, e[i]), r === !1)\n                        break\n            } else\n                for (i in e)\n                    if (r = t.call(e[i], i, e[i]), r === !1)\n                        break;\n            return e\n        }, trim: b && !b.call("\\ufeff\\u00a0") ? function (e) {\n            return null == e ? "" : b.call(e)\n        } : function (e) {\n            return null == e ? "" : (e + "").replace(C, "")\n        }, makeArray: function (e, t) {\n            var n = t || [];\n            return null != e && (M(Object(e)) ? x.merge(n, "string" == typeof e ? [e] : e) : h.call(n, e)), n\n        }, inArray: function (e, t, n) {\n            var r;\n            if (t) {\n                if (m)\n                    return m.call(t, e, n);\n                for (r = t.length, n = n?0 > n?Math.max(0, r + n):n:0; r > n; n++)\n                    if (n in t && t[n] === e)\n                        return n\n            }\n            return-1\n        }, merge: function (e, n) {\n            var r = n.length, i = e.length, o = 0;\n            if ("number" == typeof r)\n                for (; r > o; o++)\n                    e[i++] = n[o];\n            else\n                while (n[o] !== t)\n                    e[i++] = n[o++];\n            return e.length = i, e\n        }, grep: function (e, t, n) {\n            var r, i = [], o = 0, a = e.length;\n            for (n = !!n; a > o; o++)\n                r = !!t(e[o], o), n !== r && i.push(e[o]);\n            return i\n        }, map: function (e, t, n) {\n            var r, i = 0, o = e.length, a = M(e), s = [];\n            if (a)\n                for (; o > i; i++)\n                    r = t(e[i], i, n), null != r && (s[s.length] = r);\n            else\n                for (i in e)\n                    r = t(e[i], i, n), null != r && (s[s.length] = r);\n            return d.apply([], s)\n        }, guid: 1, proxy: function (e, n) {\n            var r, i, o;\n            return"string" == typeof n && (o = e[n], n = e, e = o), x.isFunction(e) ? (r = g.call(arguments, 2), i = function () {\n                return e.apply(n || this, r.concat(g.call(arguments)))\n            }, i.guid = e.guid = e.guid || x.guid++, i) : t\n        }, access: function (e, n, r, i, o, a, s) {\n            var l = 0, u = e.length, c = null == r;\n            if ("object" === x.type(r)) {\n                o = !0;\n                for (l in r)\n                    x.access(e, n, l, r[l], !0, a, s)\n            } else if (i !== t && (o = !0, x.isFunction(i) || (s = !0), c && (s ? (n.call(e, i), n = null) : (c = n, n = function (e, t, n) {\n                return c.call(x(e), n)\n            })), n))\n                for (; u > l; l++)\n                    n(e[l], r, s ? i : i.call(e[l], l, n(e[l], r)));\n            return o ? e : c ? n.call(e) : u ? n(e[0], r) : a\n        }, now: function () {\n            return(new Date).getTime()\n        }, swap: function (e, t, n, r) {\n            var i, o, a = {};\n            for (o in t)\n                a[o] = e.style[o], e.style[o] = t[o];\n            i = n.apply(e, r || []);\n            for (o in t)\n                e.style[o] = a[o];\n            return i\n        }}), x.ready.promise = function (t) {\n        if (!n)\n            if (n = x.Deferred(), "complete" === a.readyState)\n                setTimeout(x.ready);\n            else if (a.addEventListener)\n                a.addEventListener("DOMContentLoaded", q, !1), e.addEventListener("load", q, !1);\n            else {\n                a.attachEvent("onreadystatechange", q), e.attachEvent("onload", q);\n                var r = !1;\n                try {\n                    r = null == e.frameElement && a.documentElement\n                } catch (i) {\n                }\n                r && r.doScroll && function o() {\n                    if (!x.isReady) {\n                        try {\n                            r.doScroll("left")\n                        } catch (e) {\n                            return setTimeout(o, 50)\n                        }\n                        _(), x.ready()\n                    }\n                }()\n            }\n        return n.promise(t)\n    }, x.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (e, t) {\n        c["[object " + t + "]"] = t.toLowerCase()\n    });\n    function M(e) {\n        var t = e.length, n = x.type(e);\n        return x.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : "array" === n || "function" !== n && (0 === t || "number" == typeof t && t > 0 && t - 1 in e)\n    }\n    r = x(a), function (e, t) {\n        var n, r, i, o, a, s, l, u, c, p, f, d, h, g, m, y, v, b = "sizzle" + -new Date, w = e.document, T = 0, C = 0, N = st(), k = st(), E = st(), S = !1, A = function (e, t) {\n            return e === t ? (S = !0, 0) : 0\n        }, j = typeof t, D = 1 << 31, L = {}.hasOwnProperty, H = [], q = H.pop, _ = H.push, M = H.push, O = H.slice, F = H.indexOf || function (e) {\n            var t = 0, n = this.length;\n            for (; n > t; t++)\n                if (this[t] === e)\n                    return t;\n            return-1\n        }, B = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", P = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]", R = "(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+", W = R.replace("w", "w#"), $ = "\\\\[" + P + "*(" + R + ")" + P + "*(?:([*^$|!~]?=)" + P + "*(?:([\'\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(" + W + ")|)|)" + P + "*\\\\]", I = ":(" + R + ")(?:\\\\((([\'\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + $.replace(3, 8) + ")*)|.*)\\\\)|)", z = RegExp("^" + P + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + P + "+$", "g"), X = RegExp("^" + P + "*," + P + "*"), U = RegExp("^" + P + "*([>+~]|" + P + ")" + P + "*"), V = RegExp(P + "*[+~]"), Y = RegExp("=" + P + "*([^\\\\]\'\\"]*)" + P + "*\\\\]", "g"), J = RegExp(I), G = RegExp("^" + W + "$"), Q = {ID: RegExp("^#(" + R + ")"), CLASS: RegExp("^\\\\.(" + R + ")"), TAG: RegExp("^(" + R.replace("w", "w*") + ")"), ATTR: RegExp("^" + $), PSEUDO: RegExp("^" + I), CHILD: RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + P + "*(even|odd|(([+-]|)(\\\\d*)n|)" + P + "*(?:([+-]|)" + P + "*(\\\\d+)|))" + P + "*\\\\)|)", "i"), bool: RegExp("^(?:" + B + ")$", "i"), needsContext: RegExp("^" + P + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" + P + "*((?:-\\\\d)?\\\\d*)" + P + "*\\\\)|)(?=[^-]|$)", "i")}, K = /^[^{]+\\{\\s*\\[native \\w/, Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/, et = /^(?:input|select|textarea|button)$/i, tt = /^h\\d$/i, nt = /\'|\\\\/g, rt = RegExp("\\\\\\\\([\\\\da-f]{1,6}" + P + "?|(" + P + ")|.)", "ig"), it = function (e, t, n) {\n            var r = "0x" + t - 65536;\n            return r !== r || n ? t : 0 > r ? String.fromCharCode(r + 65536) : String.fromCharCode(55296 | r >> 10, 56320 | 1023 & r)\n        };\n        try {\n            M.apply(H = O.call(w.childNodes), w.childNodes), H[w.childNodes.length].nodeType\n        } catch (ot) {\n            M = {apply: H.length ? function (e, t) {\n                    _.apply(e, O.call(t))\n                } : function (e, t) {\n                    var n = e.length, r = 0;\n                    while (e[n++] = t[r++])\n                        ;\n                    e.length = n - 1\n                }}\n        }\n        function at(e, t, n, i) {\n            var o, a, s, l, u, c, d, m, y, x;\n            if ((t ? t.ownerDocument || t : w) !== f && p(t), t = t || f, n = n || [], !e || "string" != typeof e)\n                return n;\n            if (1 !== (l = t.nodeType) && 9 !== l)\n                return[];\n            if (h && !i) {\n                if (o = Z.exec(e))\n                    if (s = o[1]) {\n                        if (9 === l) {\n                            if (a = t.getElementById(s), !a || !a.parentNode)\n                                return n;\n                            if (a.id === s)\n                                return n.push(a), n\n                        } else if (t.ownerDocument && (a = t.ownerDocument.getElementById(s)) && v(t, a) && a.id === s)\n                            return n.push(a), n\n                    } else {\n                        if (o[2])\n                            return M.apply(n, t.getElementsByTagName(e)), n;\n                        if ((s = o[3]) && r.getElementsByClassName && t.getElementsByClassName)\n                            return M.apply(n, t.getElementsByClassName(s)), n\n                    }\n                if (r.qsa && (!g || !g.test(e))) {\n                    if (m = d = b, y = t, x = 9 === l && e, 1 === l && "object" !== t.nodeName.toLowerCase()) {\n                        c = mt(e), (d = t.getAttribute("id")) ? m = d.replace(nt, "\\\\$&") : t.setAttribute("id", m), m = "[id=\'" + m + "\'] ", u = c.length;\n                        while (u--)\n                            c[u] = m + yt(c[u]);\n                        y = V.test(e) && t.parentNode || t, x = c.join(",")\n                    }\n                    if (x)\n                        try {\n                            return M.apply(n, y.querySelectorAll(x)), n\n                        } catch (T) {\n                        } finally {\n                            d || t.removeAttribute("id")\n                        }\n                }\n            }\n            return kt(e.replace(z, "$1"), t, n, i)\n        }\n        function st() {\n            var e = [];\n            function t(n, r) {\n                return e.push(n += " ") > o.cacheLength && delete t[e.shift()], t[n] = r\n            }\n            return t\n        }\n        function lt(e) {\n            return e[b] = !0, e\n        }\n        function ut(e) {\n            var t = f.createElement("div");\n            try {\n                return!!e(t)\n            } catch (n) {\n                return!1\n            } finally {\n                t.parentNode && t.parentNode.removeChild(t), t = null\n            }\n        }\n        function ct(e, t) {\n            var n = e.split("|"), r = e.length;\n            while (r--)\n                o.attrHandle[n[r]] = t\n        }\n        function pt(e, t) {\n            var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || D) - (~e.sourceIndex || D);\n            if (r)\n                return r;\n            if (n)\n                while (n = n.nextSibling)\n                    if (n === t)\n                        return-1;\n            return e ? 1 : -1\n        }\n        function ft(e) {\n            return function (t) {\n                var n = t.nodeName.toLowerCase();\n                return"input" === n && t.type === e\n            }\n        }\n        function dt(e) {\n            return function (t) {\n                var n = t.nodeName.toLowerCase();\n                return("input" === n || "button" === n) && t.type === e\n            }\n        }\n        function ht(e) {\n            return lt(function (t) {\n                return t = +t, lt(function (n, r) {\n                    var i, o = e([], n.length, t), a = o.length;\n                    while (a--)\n                        n[i = o[a]] && (n[i] = !(r[i] = n[i]))\n                })\n            })\n        }\n        s = at.isXML = function (e) {\n            var t = e && (e.ownerDocument || e).documentElement;\n            return t ? "HTML" !== t.nodeName : !1\n        }, r = at.support = {}, p = at.setDocument = function (e) {\n            var n = e ? e.ownerDocument || e : w, i = n.defaultView;\n            return n !== f && 9 === n.nodeType && n.documentElement ? (f = n, d = n.documentElement, h = !s(n), i && i.attachEvent && i !== i.top && i.attachEvent("onbeforeunload", function () {\n                p()\n            }), r.attributes = ut(function (e) {\n                return e.className = "i", !e.getAttribute("className")\n            }), r.getElementsByTagName = ut(function (e) {\n                return e.appendChild(n.createComment("")), !e.getElementsByTagName("*").length\n            }), r.getElementsByClassName = ut(function (e) {\n                return e.innerHTML = "<div class=\'a\'></div><div class=\'a i\'></div>", e.firstChild.className = "i", 2 === e.getElementsByClassName("i").length\n            }), r.getById = ut(function (e) {\n                return d.appendChild(e).id = b, !n.getElementsByName || !n.getElementsByName(b).length\n            }), r.getById ? (o.find.ID = function (e, t) {\n                if (typeof t.getElementById !== j && h) {\n                    var n = t.getElementById(e);\n                    return n && n.parentNode ? [n] : []\n                }\n            }, o.filter.ID = function (e) {\n                var t = e.replace(rt, it);\n                return function (e) {\n                    return e.getAttribute("id") === t\n                }\n            }) : (delete o.find.ID, o.filter.ID = function (e) {\n                var t = e.replace(rt, it);\n                return function (e) {\n                    var n = typeof e.getAttributeNode !== j && e.getAttributeNode("id");\n                    return n && n.value === t\n                }\n            }), o.find.TAG = r.getElementsByTagName ? function (e, n) {\n                return typeof n.getElementsByTagName !== j ? n.getElementsByTagName(e) : t\n            } : function (e, t) {\n                var n, r = [], i = 0, o = t.getElementsByTagName(e);\n                if ("*" === e) {\n                    while (n = o[i++])\n                        1 === n.nodeType && r.push(n);\n                    return r\n                }\n                return o\n            }, o.find.CLASS = r.getElementsByClassName && function (e, n) {\n                return typeof n.getElementsByClassName !== j && h ? n.getElementsByClassName(e) : t\n            }, m = [], g = [], (r.qsa = K.test(n.querySelectorAll)) && (ut(function (e) {\n                e.innerHTML = "<select><option selected=\'\'></option></select>", e.querySelectorAll("[selected]").length || g.push("\\\\[" + P + "*(?:value|" + B + ")"), e.querySelectorAll(":checked").length || g.push(":checked")\n            }), ut(function (e) {\n                var t = n.createElement("input");\n                t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("t", ""), e.querySelectorAll("[t^=\'\']").length && g.push("[*^$]=" + P + "*(?:\'\'|\\"\\")"), e.querySelectorAll(":enabled").length || g.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), g.push(",.*:")\n            })), (r.matchesSelector = K.test(y = d.webkitMatchesSelector || d.mozMatchesSelector || d.oMatchesSelector || d.msMatchesSelector)) && ut(function (e) {\n                r.disconnectedMatch = y.call(e, "div"), y.call(e, "[s!=\'\']:x"), m.push("!=", I)\n            }), g = g.length && RegExp(g.join("|")), m = m.length && RegExp(m.join("|")), v = K.test(d.contains) || d.compareDocumentPosition ? function (e, t) {\n                var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode;\n                return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)))\n            } : function (e, t) {\n                if (t)\n                    while (t = t.parentNode)\n                        if (t === e)\n                            return!0;\n                return!1\n            }, A = d.compareDocumentPosition ? function (e, t) {\n                if (e === t)\n                    return S = !0, 0;\n                var i = t.compareDocumentPosition && e.compareDocumentPosition && e.compareDocumentPosition(t);\n                return i ? 1 & i || !r.sortDetached && t.compareDocumentPosition(e) === i ? e === n || v(w, e) ? -1 : t === n || v(w, t) ? 1 : c ? F.call(c, e) - F.call(c, t) : 0 : 4 & i ? -1 : 1 : e.compareDocumentPosition ? -1 : 1\n            } : function (e, t) {\n                var r, i = 0, o = e.parentNode, a = t.parentNode, s = [e], l = [t];\n                if (e === t)\n                    return S = !0, 0;\n                if (!o || !a)\n                    return e === n ? -1 : t === n ? 1 : o ? -1 : a ? 1 : c ? F.call(c, e) - F.call(c, t) : 0;\n                if (o === a)\n                    return pt(e, t);\n                r = e;\n                while (r = r.parentNode)\n                    s.unshift(r);\n                r = t;\n                while (r = r.parentNode)\n                    l.unshift(r);\n                while (s[i] === l[i])\n                    i++;\n                return i ? pt(s[i], l[i]) : s[i] === w ? -1 : l[i] === w ? 1 : 0\n            }, n) : f\n        }, at.matches = function (e, t) {\n            return at(e, null, null, t)\n        }, at.matchesSelector = function (e, t) {\n            if ((e.ownerDocument || e) !== f && p(e), t = t.replace(Y, "=\'$1\']"), !(!r.matchesSelector || !h || m && m.test(t) || g && g.test(t)))\n                try {\n                    var n = y.call(e, t);\n                    if (n || r.disconnectedMatch || e.document && 11 !== e.document.nodeType)\n                        return n\n                } catch (i) {\n                }\n            return at(t, f, null, [e]).length > 0\n        }, at.contains = function (e, t) {\n            return(e.ownerDocument || e) !== f && p(e), v(e, t)\n        }, at.attr = function (e, n) {\n            (e.ownerDocument || e) !== f && p(e);\n            var i = o.attrHandle[n.toLowerCase()], a = i && L.call(o.attrHandle, n.toLowerCase()) ? i(e, n, !h) : t;\n            return a === t ? r.attributes || !h ? e.getAttribute(n) : (a = e.getAttributeNode(n)) && a.specified ? a.value : null : a\n        }, at.error = function (e) {\n            throw Error("Syntax error, unrecognized expression: " + e)\n        }, at.uniqueSort = function (e) {\n            var t, n = [], i = 0, o = 0;\n            if (S = !r.detectDuplicates, c = !r.sortStable && e.slice(0), e.sort(A), S) {\n                while (t = e[o++])\n                    t === e[o] && (i = n.push(o));\n                while (i--)\n                    e.splice(n[i], 1)\n            }\n            return e\n        }, a = at.getText = function (e) {\n            var t, n = "", r = 0, i = e.nodeType;\n            if (i) {\n                if (1 === i || 9 === i || 11 === i) {\n                    if ("string" == typeof e.textContent)\n                        return e.textContent;\n                    for (e = e.firstChild; e; e = e.nextSibling)\n                        n += a(e)\n                } else if (3 === i || 4 === i)\n                    return e.nodeValue\n            } else\n                for (; t = e[r]; r++)\n                    n += a(t);\n            return n\n        }, o = at.selectors = {cacheLength: 50, createPseudo: lt, match: Q, attrHandle: {}, find: {}, relative: {">": {dir: "parentNode", first: !0}, " ": {dir: "parentNode"}, "+": {dir: "previousSibling", first: !0}, "~": {dir: "previousSibling"}}, preFilter: {ATTR: function (e) {\n                    return e[1] = e[1].replace(rt, it), e[3] = (e[4] || e[5] || "").replace(rt, it), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4)\n                }, CHILD: function (e) {\n                    return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || at.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && at.error(e[0]), e\n                }, PSEUDO: function (e) {\n                    var n, r = !e[5] && e[2];\n                    return Q.CHILD.test(e[0]) ? null : (e[3] && e[4] !== t ? e[2] = e[4] : r && J.test(r) && (n = mt(r, !0)) && (n = r.indexOf(")", r.length - n) - r.length) && (e[0] = e[0].slice(0, n), e[2] = r.slice(0, n)), e.slice(0, 3))\n                }}, filter: {TAG: function (e) {\n                    var t = e.replace(rt, it).toLowerCase();\n                    return"*" === e ? function () {\n                        return!0\n                    } : function (e) {\n                        return e.nodeName && e.nodeName.toLowerCase() === t\n                    }\n                }, CLASS: function (e) {\n                    var t = N[e + " "];\n                    return t || (t = RegExp("(^|" + P + ")" + e + "(" + P + "|$)")) && N(e, function (e) {\n                        return t.test("string" == typeof e.className && e.className || typeof e.getAttribute !== j && e.getAttribute("class") || "")\n                    })\n                }, ATTR: function (e, t, n) {\n                    return function (r) {\n                        var i = at.attr(r, e);\n                        return null == i ? "!=" === t : t ? (i += "", "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i + " ").indexOf(n) > -1 : "|=" === t ? i === n || i.slice(0, n.length + 1) === n + "-" : !1) : !0\n                    }\n                }, CHILD: function (e, t, n, r, i) {\n                    var o = "nth" !== e.slice(0, 3), a = "last" !== e.slice(-4), s = "of-type" === t;\n                    return 1 === r && 0 === i ? function (e) {\n                        return!!e.parentNode\n                    } : function (t, n, l) {\n                        var u, c, p, f, d, h, g = o !== a ? "nextSibling" : "previousSibling", m = t.parentNode, y = s && t.nodeName.toLowerCase(), v = !l && !s;\n                        if (m) {\n                            if (o) {\n                                while (g) {\n                                    p = t;\n                                    while (p = p[g])\n                                        if (s ? p.nodeName.toLowerCase() === y : 1 === p.nodeType)\n                                            return!1;\n                                    h = g = "only" === e && !h && "nextSibling"\n                                }\n                                return!0\n                            }\n                            if (h = [a ? m.firstChild : m.lastChild], a && v) {\n                                c = m[b] || (m[b] = {}), u = c[e] || [], d = u[0] === T && u[1], f = u[0] === T && u[2], p = d && m.childNodes[d];\n                                while (p = ++d && p && p[g] || (f = d = 0) || h.pop())\n                                    if (1 === p.nodeType && ++f && p === t) {\n                                        c[e] = [T, d, f];\n                                        break\n                                    }\n                            } else if (v && (u = (t[b] || (t[b] = {}))[e]) && u[0] === T)\n                                f = u[1];\n                            else\n                                while (p = ++d && p && p[g] || (f = d = 0) || h.pop())\n                                    if ((s ? p.nodeName.toLowerCase() === y : 1 === p.nodeType) && ++f && (v && ((p[b] || (p[b] = {}))[e] = [T, f]), p === t))\n                                        break;\n                            return f -= i, f === r || 0 === f % r && f / r >= 0\n                        }\n                    }\n                }, PSEUDO: function (e, t) {\n                    var n, r = o.pseudos[e] || o.setFilters[e.toLowerCase()] || at.error("unsupported pseudo: " + e);\n                    return r[b] ? r(t) : r.length > 1 ? (n = [e, e, "", t], o.setFilters.hasOwnProperty(e.toLowerCase()) ? lt(function (e, n) {\n                        var i, o = r(e, t), a = o.length;\n                        while (a--)\n                            i = F.call(e, o[a]), e[i] = !(n[i] = o[a])\n                    }) : function (e) {\n                        return r(e, 0, n)\n                    }) : r\n                }}, pseudos: {not: lt(function (e) {\n                    var t = [], n = [], r = l(e.replace(z, "$1"));\n                    return r[b] ? lt(function (e, t, n, i) {\n                        var o, a = r(e, null, i, []), s = e.length;\n                        while (s--)\n                            (o = a[s]) && (e[s] = !(t[s] = o))\n                    }) : function (e, i, o) {\n                        return t[0] = e, r(t, null, o, n), !n.pop()\n                    }\n                }), has: lt(function (e) {\n                    return function (t) {\n                        return at(e, t).length > 0\n                    }\n                }), contains: lt(function (e) {\n                    return function (t) {\n                        return(t.textContent || t.innerText || a(t)).indexOf(e) > -1\n                    }\n                }), lang: lt(function (e) {\n                    return G.test(e || "") || at.error("unsupported lang: " + e), e = e.replace(rt, it).toLowerCase(), function (t) {\n                        var n;\n                        do\n                            if (n = h ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang"))\n                                return n = n.toLowerCase(), n === e || 0 === n.indexOf(e + "-");\n                        while ((t = t.parentNode) && 1 === t.nodeType);\n                        return!1\n                    }\n                }), target: function (t) {\n                    var n = e.location && e.location.hash;\n                    return n && n.slice(1) === t.id\n                }, root: function (e) {\n                    return e === d\n                }, focus: function (e) {\n                    return e === f.activeElement && (!f.hasFocus || f.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)\n                }, enabled: function (e) {\n                    return e.disabled === !1\n                }, disabled: function (e) {\n                    return e.disabled === !0\n                }, checked: function (e) {\n                    var t = e.nodeName.toLowerCase();\n                    return"input" === t && !!e.checked || "option" === t && !!e.selected\n                }, selected: function (e) {\n                    return e.parentNode && e.parentNode.selectedIndex, e.selected === !0\n                }, empty: function (e) {\n                    for (e = e.firstChild; e; e = e.nextSibling)\n                        if (e.nodeName > "@" || 3 === e.nodeType || 4 === e.nodeType)\n                            return!1;\n                    return!0\n                }, parent: function (e) {\n                    return!o.pseudos.empty(e)\n                }, header: function (e) {\n                    return tt.test(e.nodeName)\n                }, input: function (e) {\n                    return et.test(e.nodeName)\n                }, button: function (e) {\n                    var t = e.nodeName.toLowerCase();\n                    return"input" === t && "button" === e.type || "button" === t\n                }, text: function (e) {\n                    var t;\n                    return"input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || t.toLowerCase() === e.type)\n                }, first: ht(function () {\n                    return[0]\n                }), last: ht(function (e, t) {\n                    return[t - 1]\n                }), eq: ht(function (e, t, n) {\n                    return[0 > n ? n + t : n]\n                }), even: ht(function (e, t) {\n                    var n = 0;\n                    for (; t > n; n += 2)\n                        e.push(n);\n                    return e\n                }), odd: ht(function (e, t) {\n                    var n = 1;\n                    for (; t > n; n += 2)\n                        e.push(n);\n                    return e\n                }), lt: ht(function (e, t, n) {\n                    var r = 0 > n ? n + t : n;\n                    for (; --r >= 0; )\n                        e.push(r);\n                    return e\n                }), gt: ht(function (e, t, n) {\n                    var r = 0 > n ? n + t : n;\n                    for (; t > ++r; )\n                        e.push(r);\n                    return e\n                })}}, o.pseudos.nth = o.pseudos.eq;\n        for (n in{radio:!0, checkbox:!0, file:!0, password:!0, image:!0})\n            o.pseudos[n] = ft(n);\n        for (n in{submit:!0, reset:!0})\n            o.pseudos[n] = dt(n);\n        function gt() {\n        }\n        gt.prototype = o.filters = o.pseudos, o.setFilters = new gt;\n        function mt(e, t) {\n            var n, r, i, a, s, l, u, c = k[e + " "];\n            if (c)\n                return t ? 0 : c.slice(0);\n            s = e, l = [], u = o.preFilter;\n            while (s) {\n                (!n || (r = X.exec(s))) && (r && (s = s.slice(r[0].length) || s), l.push(i = [])), n = !1, (r = U.exec(s)) && (n = r.shift(), i.push({value: n, type: r[0].replace(z, " ")}), s = s.slice(n.length));\n                for (a in o.filter)\n                    !(r = Q[a].exec(s)) || u[a] && !(r = u[a](r)) || (n = r.shift(), i.push({value: n, type: a, matches: r}), s = s.slice(n.length));\n                if (!n)\n                    break\n            }\n            return t ? s.length : s ? at.error(e) : k(e, l).slice(0)\n        }\n        function yt(e) {\n            var t = 0, n = e.length, r = "";\n            for (; n > t; t++)\n                r += e[t].value;\n            return r\n        }\n        function vt(e, t, n) {\n            var r = t.dir, o = n && "parentNode" === r, a = C++;\n            return t.first ? function (t, n, i) {\n                while (t = t[r])\n                    if (1 === t.nodeType || o)\n                        return e(t, n, i)\n            } : function (t, n, s) {\n                var l, u, c, p = T + " " + a;\n                if (s) {\n                    while (t = t[r])\n                        if ((1 === t.nodeType || o) && e(t, n, s))\n                            return!0\n                } else\n                    while (t = t[r])\n                        if (1 === t.nodeType || o)\n                            if (c = t[b] || (t[b] = {}), (u = c[r]) && u[0] === p) {\n                                if ((l = u[1]) === !0 || l === i)\n                                    return l === !0\n                            } else if (u = c[r] = [p], u[1] = e(t, n, s) || i, u[1] === !0)\n                                return!0\n            }\n        }\n        function bt(e) {\n            return e.length > 1 ? function (t, n, r) {\n                var i = e.length;\n                while (i--)\n                    if (!e[i](t, n, r))\n                        return!1;\n                return!0\n            } : e[0]\n        }\n        function xt(e, t, n, r, i) {\n            var o, a = [], s = 0, l = e.length, u = null != t;\n            for (; l > s; s++)\n                (o = e[s]) && (!n || n(o, r, i)) && (a.push(o), u && t.push(s));\n            return a\n        }\n        function wt(e, t, n, r, i, o) {\n            return r && !r[b] && (r = wt(r)), i && !i[b] && (i = wt(i, o)), lt(function (o, a, s, l) {\n                var u, c, p, f = [], d = [], h = a.length, g = o || Nt(t || "*", s.nodeType ? [s] : s, []), m = !e || !o && t ? g : xt(g, f, e, s, l), y = n ? i || (o ? e : h || r) ? [] : a : m;\n                if (n && n(m, y, s, l), r) {\n                    u = xt(y, d), r(u, [], s, l), c = u.length;\n                    while (c--)\n                        (p = u[c]) && (y[d[c]] = !(m[d[c]] = p))\n                }\n                if (o) {\n                    if (i || e) {\n                        if (i) {\n                            u = [], c = y.length;\n                            while (c--)\n                                (p = y[c]) && u.push(m[c] = p);\n                            i(null, y = [], u, l)\n                        }\n                        c = y.length;\n                        while (c--)\n                            (p = y[c]) && (u = i ? F.call(o, p) : f[c]) > -1 && (o[u] = !(a[u] = p))\n                    }\n                } else\n                    y = xt(y === a ? y.splice(h, y.length) : y), i ? i(null, a, y, l) : M.apply(a, y)\n            })\n        }\n        function Tt(e) {\n            var t, n, r, i = e.length, a = o.relative[e[0].type], s = a || o.relative[" "], l = a ? 1 : 0, c = vt(function (e) {\n                return e === t\n            }, s, !0), p = vt(function (e) {\n                return F.call(t, e) > -1\n            }, s, !0), f = [function (e, n, r) {\n                    return!a && (r || n !== u) || ((t = n).nodeType ? c(e, n, r) : p(e, n, r))\n                }];\n            for (; i > l; l++)\n                if (n = o.relative[e[l].type])\n                    f = [vt(bt(f), n)];\n                else {\n                    if (n = o.filter[e[l].type].apply(null, e[l].matches), n[b]) {\n                        for (r = ++l; i > r; r++)\n                            if (o.relative[e[r].type])\n                                break;\n                        return wt(l > 1 && bt(f), l > 1 && yt(e.slice(0, l - 1).concat({value: " " === e[l - 2].type ? "*" : ""})).replace(z, "$1"), n, r > l && Tt(e.slice(l, r)), i > r && Tt(e = e.slice(r)), i > r && yt(e))\n                    }\n                    f.push(n)\n                }\n            return bt(f)\n        }\n        function Ct(e, t) {\n            var n = 0, r = t.length > 0, a = e.length > 0, s = function (s, l, c, p, d) {\n                var h, g, m, y = [], v = 0, b = "0", x = s && [], w = null != d, C = u, N = s || a && o.find.TAG("*", d && l.parentNode || l), k = T += null == C ? 1 : Math.random() || .1;\n                for (w && (u = l !== f && l, i = n); null != (h = N[b]); b++) {\n                    if (a && h) {\n                        g = 0;\n                        while (m = e[g++])\n                            if (m(h, l, c)) {\n                                p.push(h);\n                                break\n                            }\n                        w && (T = k, i = ++n)\n                    }\n                    r && ((h = !m && h) && v--, s && x.push(h))\n                }\n                if (v += b, r && b !== v) {\n                    g = 0;\n                    while (m = t[g++])\n                        m(x, y, l, c);\n                    if (s) {\n                        if (v > 0)\n                            while (b--)\n                                x[b] || y[b] || (y[b] = q.call(p));\n                        y = xt(y)\n                    }\n                    M.apply(p, y), w && !s && y.length > 0 && v + t.length > 1 && at.uniqueSort(p)\n                }\n                return w && (T = k, u = C), x\n            };\n            return r ? lt(s) : s\n        }\n        l = at.compile = function (e, t) {\n            var n, r = [], i = [], o = E[e + " "];\n            if (!o) {\n                t || (t = mt(e)), n = t.length;\n                while (n--)\n                    o = Tt(t[n]), o[b] ? r.push(o) : i.push(o);\n                o = E(e, Ct(i, r))\n            }\n            return o\n        };\n        function Nt(e, t, n) {\n            var r = 0, i = t.length;\n            for (; i > r; r++)\n                at(e, t[r], n);\n            return n\n        }\n        function kt(e, t, n, i) {\n            var a, s, u, c, p, f = mt(e);\n            if (!i && 1 === f.length) {\n                if (s = f[0] = f[0].slice(0), s.length > 2 && "ID" === (u = s[0]).type && r.getById && 9 === t.nodeType && h && o.relative[s[1].type]) {\n                    if (t = (o.find.ID(u.matches[0].replace(rt, it), t) || [])[0], !t)\n                        return n;\n                    e = e.slice(s.shift().value.length)\n                }\n                a = Q.needsContext.test(e) ? 0 : s.length;\n                while (a--) {\n                    if (u = s[a], o.relative[c = u.type])\n                        break;\n                    if ((p = o.find[c]) && (i = p(u.matches[0].replace(rt, it), V.test(s[0].type) && t.parentNode || t))) {\n                        if (s.splice(a, 1), e = i.length && yt(s), !e)\n                            return M.apply(n, i), n;\n                        break\n                    }\n                }\n            }\n            return l(e, f)(i, t, !h, n, V.test(e)), n\n        }\n        r.sortStable = b.split("").sort(A).join("") === b, r.detectDuplicates = S, p(), r.sortDetached = ut(function (e) {\n            return 1 & e.compareDocumentPosition(f.createElement("div"))\n        }), ut(function (e) {\n            return e.innerHTML = "<a href=\'#\'></a>", "#" === e.firstChild.getAttribute("href")\n        }) || ct("type|href|height|width", function (e, n, r) {\n            return r ? t : e.getAttribute(n, "type" === n.toLowerCase() ? 1 : 2)\n        }), r.attributes && ut(function (e) {\n            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value")\n        }) || ct("value", function (e, n, r) {\n            return r || "input" !== e.nodeName.toLowerCase() ? t : e.defaultValue\n        }), ut(function (e) {\n            return null == e.getAttribute("disabled")\n        }) || ct(B, function (e, n, r) {\n            var i;\n            return r ? t : (i = e.getAttributeNode(n)) && i.specified ? i.value : e[n] === !0 ? n.toLowerCase() : null\n        }), x.find = at, x.expr = at.selectors, x.expr[":"] = x.expr.pseudos, x.unique = at.uniqueSort, x.text = at.getText, x.isXMLDoc = at.isXML, x.contains = at.contains\n    }(e);\n    var O = {};\n    function F(e) {\n        var t = O[e] = {};\n        return x.each(e.match(T) || [], function (e, n) {\n            t[n] = !0\n        }), t\n    }\n    x.Callbacks = function (e) {\n        e = "string" == typeof e ? O[e] || F(e) : x.extend({}, e);\n        var n, r, i, o, a, s, l = [], u = !e.once && [], c = function (t) {\n            for (r = e.memory && t, i = !0, a = s || 0, s = 0, o = l.length, n = !0; l && o > a; a++)\n                if (l[a].apply(t[0], t[1]) === !1 && e.stopOnFalse) {\n                    r = !1;\n                    break\n                }\n            n = !1, l && (u ? u.length && c(u.shift()) : r ? l = [] : p.disable())\n        }, p = {add: function () {\n                if (l) {\n                    var t = l.length;\n                    (function i(t) {\n                        x.each(t, function (t, n) {\n                            var r = x.type(n);\n                            "function" === r ? e.unique && p.has(n) || l.push(n) : n && n.length && "string" !== r && i(n)\n                        })\n                    })(arguments), n ? o = l.length : r && (s = t, c(r))\n                }\n                return this\n            }, remove: function () {\n                return l && x.each(arguments, function (e, t) {\n                    var r;\n                    while ((r = x.inArray(t, l, r)) > - 1)\n                        l.splice(r, 1), n && (o >= r && o--, a >= r && a--)\n                }), this\n            }, has: function (e) {\n                return e ? x.inArray(e, l) > -1 : !(!l || !l.length)\n            }, empty: function () {\n                return l = [], o = 0, this\n            }, disable: function () {\n                return l = u = r = t, this\n            }, disabled: function () {\n                return!l\n            }, lock: function () {\n                return u = t, r || p.disable(), this\n            }, locked: function () {\n                return!u\n            }, fireWith: function (e, t) {\n                return!l || i && !u || (t = t || [], t = [e, t.slice ? t.slice() : t], n ? u.push(t) : c(t)), this\n            }, fire: function () {\n                return p.fireWith(this, arguments), this\n            }, fired: function () {\n                return!!i\n            }};\n        return p\n    }, x.extend({Deferred: function (e) {\n            var t = [["resolve", "done", x.Callbacks("once memory"), "resolved"], ["reject", "fail", x.Callbacks("once memory"), "rejected"], ["notify", "progress", x.Callbacks("memory")]], n = "pending", r = {state: function () {\n                    return n\n                }, always: function () {\n                    return i.done(arguments).fail(arguments), this\n                }, then: function () {\n                    var e = arguments;\n                    return x.Deferred(function (n) {\n                        x.each(t, function (t, o) {\n                            var a = o[0], s = x.isFunction(e[t]) && e[t];\n                            i[o[1]](function () {\n                                var e = s && s.apply(this, arguments);\n                                e && x.isFunction(e.promise) ? e.promise().done(n.resolve).fail(n.reject).progress(n.notify) : n[a + "With"](this === r ? n.promise() : this, s ? [e] : arguments)\n                            })\n                        }), e = null\n                    }).promise()\n                }, promise: function (e) {\n                    return null != e ? x.extend(e, r) : r\n                }}, i = {};\n            return r.pipe = r.then, x.each(t, function (e, o) {\n                var a = o[2], s = o[3];\n                r[o[1]] = a.add, s && a.add(function () {\n                    n = s\n                }, t[1 ^ e][2].disable, t[2][2].lock), i[o[0]] = function () {\n                    return i[o[0] + "With"](this === i ? r : this, arguments), this\n                }, i[o[0] + "With"] = a.fireWith\n            }), r.promise(i), e && e.call(i, i), i\n        }, when: function (e) {\n            var t = 0, n = g.call(arguments), r = n.length, i = 1 !== r || e && x.isFunction(e.promise) ? r : 0, o = 1 === i ? e : x.Deferred(), a = function (e, t, n) {\n                return function (r) {\n                    t[e] = this, n[e] = arguments.length > 1 ? g.call(arguments) : r, n === s ? o.notifyWith(t, n) : --i || o.resolveWith(t, n)\n                }\n            }, s, l, u;\n            if (r > 1)\n                for (s = Array(r), l = Array(r), u = Array(r); r > t; t++)\n                    n[t] && x.isFunction(n[t].promise) ? n[t].promise().done(a(t, u, n)).fail(o.reject).progress(a(t, l, s)) : --i;\n            return i || o.resolveWith(u, n), o.promise()\n        }}), x.support = function (t) {\n        var n, r, o, s, l, u, c, p, f, d = a.createElement("div");\n        if (d.setAttribute("className", "t"), d.innerHTML = "  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>", n = d.getElementsByTagName("*") || [], r = d.getElementsByTagName("a")[0], !r || !r.style || !n.length)\n            return t;\n        s = a.createElement("select"), u = s.appendChild(a.createElement("option")), o = d.getElementsByTagName("input")[0], r.style.cssText = "top:1px;float:left;opacity:.5", t.getSetAttribute = "t" !== d.className, t.leadingWhitespace = 3 === d.firstChild.nodeType, t.tbody = !d.getElementsByTagName("tbody").length, t.htmlSerialize = !!d.getElementsByTagName("link").length, t.style = /top/.test(r.getAttribute("style")), t.hrefNormalized = "/a" === r.getAttribute("href"), t.opacity = /^0.5/.test(r.style.opacity), t.cssFloat = !!r.style.cssFloat, t.checkOn = !!o.value, t.optSelected = u.selected, t.enctype = !!a.createElement("form").enctype, t.html5Clone = "<:nav></:nav>" !== a.createElement("nav").cloneNode(!0).outerHTML, t.inlineBlockNeedsLayout = !1, t.shrinkWrapBlocks = !1, t.pixelPosition = !1, t.deleteExpando = !0, t.noCloneEvent = !0, t.reliableMarginRight = !0, t.boxSizingReliable = !0, o.checked = !0, t.noCloneChecked = o.cloneNode(!0).checked, s.disabled = !0, t.optDisabled = !u.disabled;\n        try {\n            delete d.test\n        } catch (h) {\n            t.deleteExpando = !1\n        }\n        o = a.createElement("input"), o.setAttribute("value", ""), t.input = "" === o.getAttribute("value"), o.value = "t", o.setAttribute("type", "radio"), t.radioValue = "t" === o.value, o.setAttribute("checked", "t"), o.setAttribute("name", "t"), l = a.createDocumentFragment(), l.appendChild(o), t.appendChecked = o.checked, t.checkClone = l.cloneNode(!0).cloneNode(!0).lastChild.checked, d.attachEvent && (d.attachEvent("onclick", function () {\n            t.noCloneEvent = !1\n        }), d.cloneNode(!0).click());\n        for (f in{submit:!0, change:!0, focusin:!0})\n            d.setAttribute(c = "on" + f, "t"), t[f + "Bubbles"] = c in e || d.attributes[c].expando === !1;\n        d.style.backgroundClip = "content-box", d.cloneNode(!0).style.backgroundClip = "", t.clearCloneStyle = "content-box" === d.style.backgroundClip;\n        for (f in x(t))\n            break;\n        return t.ownLast = "0" !== f, x(function () {\n            var n, r, o, s = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;", l = a.getElementsByTagName("body")[0];\n            l && (n = a.createElement("div"), n.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px", l.appendChild(n).appendChild(d), d.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", o = d.getElementsByTagName("td"), o[0].style.cssText = "padding:0;margin:0;border:0;display:none", p = 0 === o[0].offsetHeight, o[0].style.display = "", o[1].style.display = "none", t.reliableHiddenOffsets = p && 0 === o[0].offsetHeight, d.innerHTML = "", d.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;", x.swap(l, null != l.style.zoom ? {zoom: 1} : {}, function () {\n                t.boxSizing = 4 === d.offsetWidth\n            }), e.getComputedStyle && (t.pixelPosition = "1%" !== (e.getComputedStyle(d, null) || {}).top, t.boxSizingReliable = "4px" === (e.getComputedStyle(d, null) || {width: "4px"}).width, r = d.appendChild(a.createElement("div")), r.style.cssText = d.style.cssText = s, r.style.marginRight = r.style.width = "0", d.style.width = "1px", t.reliableMarginRight = !parseFloat((e.getComputedStyle(r, null) || {}).marginRight)), typeof d.style.zoom !== i && (d.innerHTML = "", d.style.cssText = s + "width:1px;padding:1px;display:inline;zoom:1", t.inlineBlockNeedsLayout = 3 === d.offsetWidth, d.style.display = "block", d.innerHTML = "<div></div>", d.firstChild.style.width = "5px", t.shrinkWrapBlocks = 3 !== d.offsetWidth, t.inlineBlockNeedsLayout && (l.style.zoom = 1)), l.removeChild(n), n = d = o = r = null)\n        }), n = s = l = u = r = o = null, t\n    }({});\n    var B = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/, P = /([A-Z])/g;\n    function R(e, n, r, i) {\n        if (x.acceptData(e)) {\n            var o, a, s = x.expando, l = e.nodeType, u = l ? x.cache : e, c = l ? e[s] : e[s] && s;\n            if (c && u[c] && (i || u[c].data) || r !== t || "string" != typeof n)\n                return c || (c = l ? e[s] = p.pop() || x.guid++ : s), u[c] || (u[c] = l ? {} : {toJSON: x.noop}), ("object" == typeof n || "function" == typeof n) && (i ? u[c] = x.extend(u[c], n) : u[c].data = x.extend(u[c].data, n)), a = u[c], i || (a.data || (a.data = {}), a = a.data), r !== t && (a[x.camelCase(n)] = r), "string" == typeof n ? (o = a[n], null == o && (o = a[x.camelCase(n)])) : o = a, o\n        }\n    }\n    function W(e, t, n) {\n        if (x.acceptData(e)) {\n            var r, i, o = e.nodeType, a = o ? x.cache : e, s = o ? e[x.expando] : x.expando;\n            if (a[s]) {\n                if (t && (r = n ? a[s] : a[s].data)) {\n                    x.isArray(t) ? t = t.concat(x.map(t, x.camelCase)) : t in r ? t = [t] : (t = x.camelCase(t), t = t in r ? [t] : t.split(" ")), i = t.length;\n                    while (i--)\n                        delete r[t[i]];\n                    if (n ? !I(r) : !x.isEmptyObject(r))\n                        return\n                }\n                (n || (delete a[s].data, I(a[s]))) && (o ? x.cleanData([e], !0) : x.support.deleteExpando || a != a.window ? delete a[s] : a[s] = null)\n            }\n        }\n    }\n    x.extend({cache: {}, noData: {applet: !0, embed: !0, object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"}, hasData: function (e) {\n            return e = e.nodeType ? x.cache[e[x.expando]] : e[x.expando], !!e && !I(e)\n        }, data: function (e, t, n) {\n            return R(e, t, n)\n        }, removeData: function (e, t) {\n            return W(e, t)\n        }, _data: function (e, t, n) {\n            return R(e, t, n, !0)\n        }, _removeData: function (e, t) {\n            return W(e, t, !0)\n        }, acceptData: function (e) {\n            if (e.nodeType && 1 !== e.nodeType && 9 !== e.nodeType)\n                return!1;\n            var t = e.nodeName && x.noData[e.nodeName.toLowerCase()];\n            return!t || t !== !0 && e.getAttribute("classid") === t\n        }}), x.fn.extend({data: function (e, n) {\n            var r, i, o = null, a = 0, s = this[0];\n            if (e === t) {\n                if (this.length && (o = x.data(s), 1 === s.nodeType && !x._data(s, "parsedAttrs"))) {\n                    for (r = s.attributes; r.length > a; a++)\n                        i = r[a].name, 0 === i.indexOf("data-") && (i = x.camelCase(i.slice(5)), $(s, i, o[i]));\n                    x._data(s, "parsedAttrs", !0)\n                }\n                return o\n            }\n            return"object" == typeof e ? this.each(function () {\n                x.data(this, e)\n            }) : arguments.length > 1 ? this.each(function () {\n                x.data(this, e, n)\n            }) : s ? $(s, e, x.data(s, e)) : null\n        }, removeData: function (e) {\n            return this.each(function () {\n                x.removeData(this, e)\n            })\n        }});\n    function $(e, n, r) {\n        if (r === t && 1 === e.nodeType) {\n            var i = "data-" + n.replace(P, "-$1").toLowerCase();\n            if (r = e.getAttribute(i), "string" == typeof r) {\n                try {\n                    r = "true" === r ? !0 : "false" === r ? !1 : "null" === r ? null : +r + "" === r ? +r : B.test(r) ? x.parseJSON(r) : r\n                } catch (o) {\n                }\n                x.data(e, n, r)\n            } else\n                r = t\n        }\n        return r\n    }\n    function I(e) {\n        var t;\n        for (t in e)\n            if (("data" !== t || !x.isEmptyObject(e[t])) && "toJSON" !== t)\n                return!1;\n        return!0\n    }\n    x.extend({queue: function (e, n, r) {\n            var i;\n            return e ? (n = (n || "fx") + "queue", i = x._data(e, n), r && (!i || x.isArray(r) ? i = x._data(e, n, x.makeArray(r)) : i.push(r)), i || []) : t\n        }, dequeue: function (e, t) {\n            t = t || "fx";\n            var n = x.queue(e, t), r = n.length, i = n.shift(), o = x._queueHooks(e, t), a = function () {\n                x.dequeue(e, t)\n            };\n            "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire()\n        }, _queueHooks: function (e, t) {\n            var n = t + "queueHooks";\n            return x._data(e, n) || x._data(e, n, {empty: x.Callbacks("once memory").add(function () {\n                    x._removeData(e, t + "queue"), x._removeData(e, n)\n                })})\n        }}), x.fn.extend({queue: function (e, n) {\n            var r = 2;\n            return"string" != typeof e && (n = e, e = "fx", r--), r > arguments.length ? x.queue(this[0], e) : n === t ? this : this.each(function () {\n                var t = x.queue(this, e, n);\n                x._queueHooks(this, e), "fx" === e && "inprogress" !== t[0] && x.dequeue(this, e)\n            })\n        }, dequeue: function (e) {\n            return this.each(function () {\n                x.dequeue(this, e)\n            })\n        }, delay: function (e, t) {\n            return e = x.fx ? x.fx.speeds[e] || e : e, t = t || "fx", this.queue(t, function (t, n) {\n                var r = setTimeout(t, e);\n                n.stop = function () {\n                    clearTimeout(r)\n                }\n            })\n        }, clearQueue: function (e) {\n            return this.queue(e || "fx", [])\n        }, promise: function (e, n) {\n            var r, i = 1, o = x.Deferred(), a = this, s = this.length, l = function () {\n                --i || o.resolveWith(a, [a])\n            };\n            "string" != typeof e && (n = e, e = t), e = e || "fx";\n            while (s--)\n                r = x._data(a[s], e + "queueHooks"), r && r.empty && (i++, r.empty.add(l));\n            return l(), o.promise(n)\n        }});\n    var z, X, U = /[\\t\\r\\n\\f]/g, V = /\\r/g, Y = /^(?:input|select|textarea|button|object)$/i, J = /^(?:a|area)$/i, G = /^(?:checked|selected)$/i, Q = x.support.getSetAttribute, K = x.support.input;\n    x.fn.extend({attr: function (e, t) {\n            return x.access(this, x.attr, e, t, arguments.length > 1)\n        }, removeAttr: function (e) {\n            return this.each(function () {\n                x.removeAttr(this, e)\n            })\n        }, prop: function (e, t) {\n            return x.access(this, x.prop, e, t, arguments.length > 1)\n        }, removeProp: function (e) {\n            return e = x.propFix[e] || e, this.each(function () {\n                try {\n                    this[e] = t, delete this[e]\n                } catch (n) {\n                }\n            })\n        }, addClass: function (e) {\n            var t, n, r, i, o, a = 0, s = this.length, l = "string" == typeof e && e;\n            if (x.isFunction(e))\n                return this.each(function (t) {\n                    x(this).addClass(e.call(this, t, this.className))\n                });\n            if (l)\n                for (t = (e || "").match(T) || []; s > a; a++)\n                    if (n = this[a], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(U, " ") : " ")) {\n                        o = 0;\n                        while (i = t[o++])\n                            0 > r.indexOf(" " + i + " ") && (r += i + " ");\n                        n.className = x.trim(r)\n                    }\n            return this\n        }, removeClass: function (e) {\n            var t, n, r, i, o, a = 0, s = this.length, l = 0 === arguments.length || "string" == typeof e && e;\n            if (x.isFunction(e))\n                return this.each(function (t) {\n                    x(this).removeClass(e.call(this, t, this.className))\n                });\n            if (l)\n                for (t = (e || "").match(T) || []; s > a; a++)\n                    if (n = this[a], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(U, " ") : "")) {\n                        o = 0;\n                        while (i = t[o++])\n                            while (r.indexOf(" " + i + " ") >= 0)\n                                r = r.replace(" " + i + " ", " ");\n                        n.className = e ? x.trim(r) : ""\n                    }\n            return this\n        }, toggleClass: function (e, t) {\n            var n = typeof e;\n            return"boolean" == typeof t && "string" === n ? t ? this.addClass(e) : this.removeClass(e) : x.isFunction(e) ? this.each(function (n) {\n                x(this).toggleClass(e.call(this, n, this.className, t), t)\n            }) : this.each(function () {\n                if ("string" === n) {\n                    var t, r = 0, o = x(this), a = e.match(T) || [];\n                    while (t = a[r++])\n                        o.hasClass(t) ? o.removeClass(t) : o.addClass(t)\n                } else\n                    (n === i || "boolean" === n) && (this.className && x._data(this, "__className__", this.className), this.className = this.className || e === !1 ? "" : x._data(this, "__className__") || "")\n            })\n        }, hasClass: function (e) {\n            var t = " " + e + " ", n = 0, r = this.length;\n            for (; r > n; n++)\n                if (1 === this[n].nodeType && (" " + this[n].className + " ").replace(U, " ").indexOf(t) >= 0)\n                    return!0;\n            return!1\n        }, val: function (e) {\n            var n, r, i, o = this[0];\n            {\n                if (arguments.length)\n                    return i = x.isFunction(e), this.each(function (n) {\n                        var o;\n                        1 === this.nodeType && (o = i ? e.call(this, n, x(this).val()) : e, null == o ? o = "" : "number" == typeof o ? o += "" : x.isArray(o) && (o = x.map(o, function (e) {\n                            return null == e ? "" : e + ""\n                        })), r = x.valHooks[this.type] || x.valHooks[this.nodeName.toLowerCase()], r && "set"in r && r.set(this, o, "value") !== t || (this.value = o))\n                    });\n                if (o)\n                    return r = x.valHooks[o.type] || x.valHooks[o.nodeName.toLowerCase()], r && "get"in r && (n = r.get(o, "value")) !== t ? n : (n = o.value, "string" == typeof n ? n.replace(V, "") : null == n ? "" : n)\n            }\n        }}), x.extend({valHooks: {option: {get: function (e) {\n                    var t = x.find.attr(e, "value");\n                    return null != t ? t : e.text\n                }}, select: {get: function (e) {\n                    var t, n, r = e.options, i = e.selectedIndex, o = "select-one" === e.type || 0 > i, a = o ? null : [], s = o ? i + 1 : r.length, l = 0 > i ? s : o ? i : 0;\n                    for (; s > l; l++)\n                        if (n = r[l], !(!n.selected && l !== i || (x.support.optDisabled ? n.disabled : null !== n.getAttribute("disabled")) || n.parentNode.disabled && x.nodeName(n.parentNode, "optgroup"))) {\n                            if (t = x(n).val(), o)\n                                return t;\n                            a.push(t)\n                        }\n                    return a\n                }, set: function (e, t) {\n                    var n, r, i = e.options, o = x.makeArray(t), a = i.length;\n                    while (a--)\n                        r = i[a], (r.selected = x.inArray(x(r).val(), o) >= 0) && (n = !0);\n                    return n || (e.selectedIndex = -1), o\n                }}}, attr: function (e, n, r) {\n            var o, a, s = e.nodeType;\n            if (e && 3 !== s && 8 !== s && 2 !== s)\n                return typeof e.getAttribute === i ? x.prop(e, n, r) : (1 === s && x.isXMLDoc(e) || (n = n.toLowerCase(), o = x.attrHooks[n] || (x.expr.match.bool.test(n) ? X : z)), r === t ? o && "get"in o && null !== (a = o.get(e, n)) ? a : (a = x.find.attr(e, n), null == a ? t : a) : null !== r ? o && "set"in o && (a = o.set(e, r, n)) !== t ? a : (e.setAttribute(n, r + ""), r) : (x.removeAttr(e, n), t))\n        }, removeAttr: function (e, t) {\n            var n, r, i = 0, o = t && t.match(T);\n            if (o && 1 === e.nodeType)\n                while (n = o[i++])\n                    r = x.propFix[n] || n, x.expr.match.bool.test(n) ? K && Q || !G.test(n) ? e[r] = !1 : e[x.camelCase("default-" + n)] = e[r] = !1 : x.attr(e, n, ""), e.removeAttribute(Q ? n : r)\n        }, attrHooks: {type: {set: function (e, t) {\n                    if (!x.support.radioValue && "radio" === t && x.nodeName(e, "input")) {\n                        var n = e.value;\n                        return e.setAttribute("type", t), n && (e.value = n), t\n                    }\n                }}}, propFix: {"for": "htmlFor", "class": "className"}, prop: function (e, n, r) {\n            var i, o, a, s = e.nodeType;\n            if (e && 3 !== s && 8 !== s && 2 !== s)\n                return a = 1 !== s || !x.isXMLDoc(e), a && (n = x.propFix[n] || n, o = x.propHooks[n]), r !== t ? o && "set"in o && (i = o.set(e, r, n)) !== t ? i : e[n] = r : o && "get"in o && null !== (i = o.get(e, n)) ? i : e[n]\n        }, propHooks: {tabIndex: {get: function (e) {\n                    var t = x.find.attr(e, "tabindex");\n                    return t ? parseInt(t, 10) : Y.test(e.nodeName) || J.test(e.nodeName) && e.href ? 0 : -1\n                }}}}), X = {set: function (e, t, n) {\n            return t === !1 ? x.removeAttr(e, n) : K && Q || !G.test(n) ? e.setAttribute(!Q && x.propFix[n] || n, n) : e[x.camelCase("default-" + n)] = e[n] = !0, n\n        }}, x.each(x.expr.match.bool.source.match(/\\w+/g), function (e, n) {\n        var r = x.expr.attrHandle[n] || x.find.attr;\n        x.expr.attrHandle[n] = K && Q || !G.test(n) ? function (e, n, i) {\n            var o = x.expr.attrHandle[n], a = i ? t : (x.expr.attrHandle[n] = t) != r(e, n, i) ? n.toLowerCase() : null;\n            return x.expr.attrHandle[n] = o, a\n        } : function (e, n, r) {\n            return r ? t : e[x.camelCase("default-" + n)] ? n.toLowerCase() : null\n        }\n    }), K && Q || (x.attrHooks.value = {set: function (e, n, r) {\n            return x.nodeName(e, "input") ? (e.defaultValue = n, t) : z && z.set(e, n, r)\n        }}), Q || (z = {set: function (e, n, r) {\n            var i = e.getAttributeNode(r);\n            return i || e.setAttributeNode(i = e.ownerDocument.createAttribute(r)), i.value = n += "", "value" === r || n === e.getAttribute(r) ? n : t\n        }}, x.expr.attrHandle.id = x.expr.attrHandle.name = x.expr.attrHandle.coords = function (e, n, r) {\n        var i;\n        return r ? t : (i = e.getAttributeNode(n)) && "" !== i.value ? i.value : null\n    }, x.valHooks.button = {get: function (e, n) {\n            var r = e.getAttributeNode(n);\n            return r && r.specified ? r.value : t\n        }, set: z.set}, x.attrHooks.contenteditable = {set: function (e, t, n) {\n            z.set(e, "" === t ? !1 : t, n)\n        }}, x.each(["width", "height"], function (e, n) {\n        x.attrHooks[n] = {set: function (e, r) {\n                return"" === r ? (e.setAttribute(n, "auto"), r) : t\n            }}\n    })), x.support.hrefNormalized || x.each(["href", "src"], function (e, t) {\n        x.propHooks[t] = {get: function (e) {\n                return e.getAttribute(t, 4)\n            }}\n    }), x.support.style || (x.attrHooks.style = {get: function (e) {\n            return e.style.cssText || t\n        }, set: function (e, t) {\n            return e.style.cssText = t + ""\n        }}), x.support.optSelected || (x.propHooks.selected = {get: function (e) {\n            var t = e.parentNode;\n            return t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex), null\n        }}), x.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {\n        x.propFix[this.toLowerCase()] = this\n    }), x.support.enctype || (x.propFix.enctype = "encoding"), x.each(["radio", "checkbox"], function () {\n        x.valHooks[this] = {set: function (e, n) {\n                return x.isArray(n) ? e.checked = x.inArray(x(e).val(), n) >= 0 : t\n            }}, x.support.checkOn || (x.valHooks[this].get = function (e) {\n            return null === e.getAttribute("value") ? "on" : e.value\n        })\n    });\n    var Z = /^(?:input|select|textarea)$/i, et = /^key/, tt = /^(?:mouse|contextmenu)|click/, nt = /^(?:focusinfocus|focusoutblur)$/, rt = /^([^.]*)(?:\\.(.+)|)$/;\n    function it() {\n        return!0\n    }\n    function ot() {\n        return!1\n    }\n    function at() {\n        try {\n            return a.activeElement\n        } catch (e) {\n        }\n    }\n    x.event = {global: {}, add: function (e, n, r, o, a) {\n            var s, l, u, c, p, f, d, h, g, m, y, v = x._data(e);\n            if (v) {\n                r.handler && (c = r, r = c.handler, a = c.selector), r.guid || (r.guid = x.guid++), (l = v.events) || (l = v.events = {}), (f = v.handle) || (f = v.handle = function (e) {\n                    return typeof x === i || e && x.event.triggered === e.type ? t : x.event.dispatch.apply(f.elem, arguments)\n                }, f.elem = e), n = (n || "").match(T) || [""], u = n.length;\n                while (u--)\n                    s = rt.exec(n[u]) || [], g = y = s[1], m = (s[2] || "").split(".").sort(), g && (p = x.event.special[g] || {}, g = (a ? p.delegateType : p.bindType) || g, p = x.event.special[g] || {}, d = x.extend({type: g, origType: y, data: o, handler: r, guid: r.guid, selector: a, needsContext: a && x.expr.match.needsContext.test(a), namespace: m.join(".")}, c), (h = l[g]) || (h = l[g] = [], h.delegateCount = 0, p.setup && p.setup.call(e, o, m, f) !== !1 || (e.addEventListener ? e.addEventListener(g, f, !1) : e.attachEvent && e.attachEvent("on" + g, f))), p.add && (p.add.call(e, d), d.handler.guid || (d.handler.guid = r.guid)), a ? h.splice(h.delegateCount++, 0, d) : h.push(d), x.event.global[g] = !0);\n                e = null\n            }\n        }, remove: function (e, t, n, r, i) {\n            var o, a, s, l, u, c, p, f, d, h, g, m = x.hasData(e) && x._data(e);\n            if (m && (c = m.events)) {\n                t = (t || "").match(T) || [""], u = t.length;\n                while (u--)\n                    if (s = rt.exec(t[u]) || [], d = g = s[1], h = (s[2] || "").split(".").sort(), d) {\n                        p = x.event.special[d] || {}, d = (r ? p.delegateType : p.bindType) || d, f = c[d] || [], s = s[2] && RegExp("(^|\\\\.)" + h.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)"), l = o = f.length;\n                        while (o--)\n                            a = f[o], !i && g !== a.origType || n && n.guid !== a.guid || s && !s.test(a.namespace) || r && r !== a.selector && ("**" !== r || !a.selector) || (f.splice(o, 1), a.selector && f.delegateCount--, p.remove && p.remove.call(e, a));\n                        l && !f.length && (p.teardown && p.teardown.call(e, h, m.handle) !== !1 || x.removeEvent(e, d, m.handle), delete c[d])\n                    } else\n                        for (d in c)\n                            x.event.remove(e, d + t[u], n, r, !0);\n                x.isEmptyObject(c) && (delete m.handle, x._removeData(e, "events"))\n            }\n        }, trigger: function (n, r, i, o) {\n            var s, l, u, c, p, f, d, h = [i || a], g = v.call(n, "type") ? n.type : n, m = v.call(n, "namespace") ? n.namespace.split(".") : [];\n            if (u = f = i = i || a, 3 !== i.nodeType && 8 !== i.nodeType && !nt.test(g + x.event.triggered) && (g.indexOf(".") >= 0 && (m = g.split("."), g = m.shift(), m.sort()), l = 0 > g.indexOf(":") && "on" + g, n = n[x.expando] ? n : new x.Event(g, "object" == typeof n && n), n.isTrigger = o ? 2 : 3, n.namespace = m.join("."), n.namespace_re = n.namespace ? RegExp("(^|\\\\.)" + m.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)") : null, n.result = t, n.target || (n.target = i), r = null == r ? [n] : x.makeArray(r, [n]), p = x.event.special[g] || {}, o || !p.trigger || p.trigger.apply(i, r) !== !1)) {\n                if (!o && !p.noBubble && !x.isWindow(i)) {\n                    for (c = p.delegateType || g, nt.test(c + g) || (u = u.parentNode); u; u = u.parentNode)\n                        h.push(u), f = u;\n                    f === (i.ownerDocument || a) && h.push(f.defaultView || f.parentWindow || e)\n                }\n                d = 0;\n                while ((u = h[d++]) && !n.isPropagationStopped())\n                    n.type = d > 1 ? c : p.bindType || g, s = (x._data(u, "events") || {})[n.type] && x._data(u, "handle"), s && s.apply(u, r), s = l && u[l], s && x.acceptData(u) && s.apply && s.apply(u, r) === !1 && n.preventDefault();\n                if (n.type = g, !o && !n.isDefaultPrevented() && (!p._default || p._default.apply(h.pop(), r) === !1) && x.acceptData(i) && l && i[g] && !x.isWindow(i)) {\n                    f = i[l], f && (i[l] = null), x.event.triggered = g;\n                    try {\n                        i[g]()\n                    } catch (y) {\n                    }\n                    x.event.triggered = t, f && (i[l] = f)\n                }\n                return n.result\n            }\n        }, dispatch: function (e) {\n            e = x.event.fix(e);\n            var n, r, i, o, a, s = [], l = g.call(arguments), u = (x._data(this, "events") || {})[e.type] || [], c = x.event.special[e.type] || {};\n            if (l[0] = e, e.delegateTarget = this, !c.preDispatch || c.preDispatch.call(this, e) !== !1) {\n                s = x.event.handlers.call(this, e, u), n = 0;\n                while ((o = s[n++]) && !e.isPropagationStopped()) {\n                    e.currentTarget = o.elem, a = 0;\n                    while ((i = o.handlers[a++]) && !e.isImmediatePropagationStopped())\n                        (!e.namespace_re || e.namespace_re.test(i.namespace)) && (e.handleObj = i, e.data = i.data, r = ((x.event.special[i.origType] || {}).handle || i.handler).apply(o.elem, l), r !== t && (e.result = r) === !1 && (e.preventDefault(), e.stopPropagation()))\n                }\n                return c.postDispatch && c.postDispatch.call(this, e), e.result\n            }\n        }, handlers: function (e, n) {\n            var r, i, o, a, s = [], l = n.delegateCount, u = e.target;\n            if (l && u.nodeType && (!e.button || "click" !== e.type))\n                for (; u != this; u = u.parentNode || this)\n                    if (1 === u.nodeType && (u.disabled !== !0 || "click" !== e.type)) {\n                        for (o = [], a = 0; l > a; a++)\n                            i = n[a], r = i.selector + " ", o[r] === t && (o[r] = i.needsContext ? x(r, this).index(u) >= 0 : x.find(r, this, null, [u]).length), o[r] && o.push(i);\n                        o.length && s.push({elem: u, handlers: o})\n                    }\n            return n.length > l && s.push({elem: this, handlers: n.slice(l)}), s\n        }, fix: function (e) {\n            if (e[x.expando])\n                return e;\n            var t, n, r, i = e.type, o = e, s = this.fixHooks[i];\n            s || (this.fixHooks[i] = s = tt.test(i) ? this.mouseHooks : et.test(i) ? this.keyHooks : {}), r = s.props ? this.props.concat(s.props) : this.props, e = new x.Event(o), t = r.length;\n            while (t--)\n                n = r[t], e[n] = o[n];\n            return e.target || (e.target = o.srcElement || a), 3 === e.target.nodeType && (e.target = e.target.parentNode), e.metaKey = !!e.metaKey, s.filter ? s.filter(e, o) : e\n        }, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: {props: "char charCode key keyCode".split(" "), filter: function (e, t) {\n                return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), e\n            }}, mouseHooks: {props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function (e, n) {\n                var r, i, o, s = n.button, l = n.fromElement;\n                return null == e.pageX && null != n.clientX && (i = e.target.ownerDocument || a, o = i.documentElement, r = i.body, e.pageX = n.clientX + (o && o.scrollLeft || r && r.scrollLeft || 0) - (o && o.clientLeft || r && r.clientLeft || 0), e.pageY = n.clientY + (o && o.scrollTop || r && r.scrollTop || 0) - (o && o.clientTop || r && r.clientTop || 0)), !e.relatedTarget && l && (e.relatedTarget = l === e.target ? n.toElement : l), e.which || s === t || (e.which = 1 & s ? 1 : 2 & s ? 3 : 4 & s ? 2 : 0), e\n            }}, special: {load: {noBubble: !0}, focus: {trigger: function () {\n                    if (this !== at() && this.focus)\n                        try {\n                            return this.focus(), !1\n                        } catch (e) {\n                        }\n                }, delegateType: "focusin"}, blur: {trigger: function () {\n                    return this === at() && this.blur ? (this.blur(), !1) : t\n                }, delegateType: "focusout"}, click: {trigger: function () {\n                    return x.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : t\n                }, _default: function (e) {\n                    return x.nodeName(e.target, "a")\n                }}, beforeunload: {postDispatch: function (e) {\n                    e.result !== t && (e.originalEvent.returnValue = e.result)\n                }}}, simulate: function (e, t, n, r) {\n            var i = x.extend(new x.Event, n, {type: e, isSimulated: !0, originalEvent: {}});\n            r ? x.event.trigger(i, null, t) : x.event.dispatch.call(t, i), i.isDefaultPrevented() && n.preventDefault()\n        }}, x.removeEvent = a.removeEventListener ? function (e, t, n) {\n        e.removeEventListener && e.removeEventListener(t, n, !1)\n    } : function (e, t, n) {\n        var r = "on" + t;\n        e.detachEvent && (typeof e[r] === i && (e[r] = null), e.detachEvent(r, n))\n    }, x.Event = function (e, n) {\n        return this instanceof x.Event ? (e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || e.returnValue === !1 || e.getPreventDefault && e.getPreventDefault() ? it : ot) : this.type = e, n && x.extend(this, n), this.timeStamp = e && e.timeStamp || x.now(), this[x.expando] = !0, t) : new x.Event(e, n)\n    }, x.Event.prototype = {isDefaultPrevented: ot, isPropagationStopped: ot, isImmediatePropagationStopped: ot, preventDefault: function () {\n            var e = this.originalEvent;\n            this.isDefaultPrevented = it, e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1)\n        }, stopPropagation: function () {\n            var e = this.originalEvent;\n            this.isPropagationStopped = it, e && (e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0)\n        }, stopImmediatePropagation: function () {\n            this.isImmediatePropagationStopped = it, this.stopPropagation()\n        }}, x.each({mouseenter: "mouseover", mouseleave: "mouseout"}, function (e, t) {\n        x.event.special[e] = {delegateType: t, bindType: t, handle: function (e) {\n                var n, r = this, i = e.relatedTarget, o = e.handleObj;\n                return(!i || i !== r && !x.contains(r, i)) && (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n\n            }}\n    }), x.support.submitBubbles || (x.event.special.submit = {setup: function () {\n            return x.nodeName(this, "form") ? !1 : (x.event.add(this, "click._submit keypress._submit", function (e) {\n                var n = e.target, r = x.nodeName(n, "input") || x.nodeName(n, "button") ? n.form : t;\n                r && !x._data(r, "submitBubbles") && (x.event.add(r, "submit._submit", function (e) {\n                    e._submit_bubble = !0\n                }), x._data(r, "submitBubbles", !0))\n            }), t)\n        }, postDispatch: function (e) {\n            e._submit_bubble && (delete e._submit_bubble, this.parentNode && !e.isTrigger && x.event.simulate("submit", this.parentNode, e, !0))\n        }, teardown: function () {\n            return x.nodeName(this, "form") ? !1 : (x.event.remove(this, "._submit"), t)\n        }}), x.support.changeBubbles || (x.event.special.change = {setup: function () {\n            return Z.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (x.event.add(this, "propertychange._change", function (e) {\n                "checked" === e.originalEvent.propertyName && (this._just_changed = !0)\n            }), x.event.add(this, "click._change", function (e) {\n                this._just_changed && !e.isTrigger && (this._just_changed = !1), x.event.simulate("change", this, e, !0)\n            })), !1) : (x.event.add(this, "beforeactivate._change", function (e) {\n                var t = e.target;\n                Z.test(t.nodeName) && !x._data(t, "changeBubbles") && (x.event.add(t, "change._change", function (e) {\n                    !this.parentNode || e.isSimulated || e.isTrigger || x.event.simulate("change", this.parentNode, e, !0)\n                }), x._data(t, "changeBubbles", !0))\n            }), t)\n        }, handle: function (e) {\n            var n = e.target;\n            return this !== n || e.isSimulated || e.isTrigger || "radio" !== n.type && "checkbox" !== n.type ? e.handleObj.handler.apply(this, arguments) : t\n        }, teardown: function () {\n            return x.event.remove(this, "._change"), !Z.test(this.nodeName)\n        }}), x.support.focusinBubbles || x.each({focus: "focusin", blur: "focusout"}, function (e, t) {\n        var n = 0, r = function (e) {\n            x.event.simulate(t, e.target, x.event.fix(e), !0)\n        };\n        x.event.special[t] = {setup: function () {\n                0 === n++ && a.addEventListener(e, r, !0)\n            }, teardown: function () {\n                0 === --n && a.removeEventListener(e, r, !0)\n            }}\n    }), x.fn.extend({on: function (e, n, r, i, o) {\n            var a, s;\n            if ("object" == typeof e) {\n                "string" != typeof n && (r = r || n, n = t);\n                for (a in e)\n                    this.on(a, n, r, e[a], o);\n                return this\n            }\n            if (null == r && null == i ? (i = n, r = n = t) : null == i && ("string" == typeof n ? (i = r, r = t) : (i = r, r = n, n = t)), i === !1)\n                i = ot;\n            else if (!i)\n                return this;\n            return 1 === o && (s = i, i = function (e) {\n                return x().off(e), s.apply(this, arguments)\n            }, i.guid = s.guid || (s.guid = x.guid++)), this.each(function () {\n                x.event.add(this, e, i, r, n)\n            })\n        }, one: function (e, t, n, r) {\n            return this.on(e, t, n, r, 1)\n        }, off: function (e, n, r) {\n            var i, o;\n            if (e && e.preventDefault && e.handleObj)\n                return i = e.handleObj, x(e.delegateTarget).off(i.namespace ? i.origType + "." + i.namespace : i.origType, i.selector, i.handler), this;\n            if ("object" == typeof e) {\n                for (o in e)\n                    this.off(o, n, e[o]);\n                return this\n            }\n            return(n === !1 || "function" == typeof n) && (r = n, n = t), r === !1 && (r = ot), this.each(function () {\n                x.event.remove(this, e, r, n)\n            })\n        }, trigger: function (e, t) {\n            return this.each(function () {\n                x.event.trigger(e, t, this)\n            })\n        }, triggerHandler: function (e, n) {\n            var r = this[0];\n            return r ? x.event.trigger(e, n, r, !0) : t\n        }});\n    var st = /^.[^:#\\[\\.,]*$/, lt = /^(?:parents|prev(?:Until|All))/, ut = x.expr.match.needsContext, ct = {children: !0, contents: !0, next: !0, prev: !0};\n    x.fn.extend({find: function (e) {\n            var t, n = [], r = this, i = r.length;\n            if ("string" != typeof e)\n                return this.pushStack(x(e).filter(function () {\n                    for (t = 0; i > t; t++)\n                        if (x.contains(r[t], this))\n                            return!0\n                }));\n            for (t = 0; i > t; t++)\n                x.find(e, r[t], n);\n            return n = this.pushStack(i > 1 ? x.unique(n) : n), n.selector = this.selector ? this.selector + " " + e : e, n\n        }, has: function (e) {\n            var t, n = x(e, this), r = n.length;\n            return this.filter(function () {\n                for (t = 0; r > t; t++)\n                    if (x.contains(this, n[t]))\n                        return!0\n            })\n        }, not: function (e) {\n            return this.pushStack(ft(this, e || [], !0))\n        }, filter: function (e) {\n            return this.pushStack(ft(this, e || [], !1))\n        }, is: function (e) {\n            return!!ft(this, "string" == typeof e && ut.test(e) ? x(e) : e || [], !1).length\n        }, closest: function (e, t) {\n            var n, r = 0, i = this.length, o = [], a = ut.test(e) || "string" != typeof e ? x(e, t || this.context) : 0;\n            for (; i > r; r++)\n                for (n = this[r]; n && n !== t; n = n.parentNode)\n                    if (11 > n.nodeType && (a ? a.index(n) > -1 : 1 === n.nodeType && x.find.matchesSelector(n, e))) {\n                        n = o.push(n);\n                        break\n                    }\n            return this.pushStack(o.length > 1 ? x.unique(o) : o)\n        }, index: function (e) {\n            return e ? "string" == typeof e ? x.inArray(this[0], x(e)) : x.inArray(e.jquery ? e[0] : e, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1\n        }, add: function (e, t) {\n            var n = "string" == typeof e ? x(e, t) : x.makeArray(e && e.nodeType ? [e] : e), r = x.merge(this.get(), n);\n            return this.pushStack(x.unique(r))\n        }, addBack: function (e) {\n            return this.add(null == e ? this.prevObject : this.prevObject.filter(e))\n        }});\n    function pt(e, t) {\n        do\n            e = e[t];\n        while (e && 1 !== e.nodeType);\n        return e\n    }\n    x.each({parent: function (e) {\n            var t = e.parentNode;\n            return t && 11 !== t.nodeType ? t : null\n        }, parents: function (e) {\n            return x.dir(e, "parentNode")\n        }, parentsUntil: function (e, t, n) {\n            return x.dir(e, "parentNode", n)\n        }, next: function (e) {\n            return pt(e, "nextSibling")\n        }, prev: function (e) {\n            return pt(e, "previousSibling")\n        }, nextAll: function (e) {\n            return x.dir(e, "nextSibling")\n        }, prevAll: function (e) {\n            return x.dir(e, "previousSibling")\n        }, nextUntil: function (e, t, n) {\n            return x.dir(e, "nextSibling", n)\n        }, prevUntil: function (e, t, n) {\n            return x.dir(e, "previousSibling", n)\n        }, siblings: function (e) {\n            return x.sibling((e.parentNode || {}).firstChild, e)\n        }, children: function (e) {\n            return x.sibling(e.firstChild)\n        }, contents: function (e) {\n            return x.nodeName(e, "iframe") ? e.contentDocument || e.contentWindow.document : x.merge([], e.childNodes)\n        }}, function (e, t) {\n        x.fn[e] = function (n, r) {\n            var i = x.map(this, t, n);\n            return"Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = x.filter(r, i)), this.length > 1 && (ct[e] || (i = x.unique(i)), lt.test(e) && (i = i.reverse())), this.pushStack(i)\n        }\n    }), x.extend({filter: function (e, t, n) {\n            var r = t[0];\n            return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? x.find.matchesSelector(r, e) ? [r] : [] : x.find.matches(e, x.grep(t, function (e) {\n                return 1 === e.nodeType\n            }))\n        }, dir: function (e, n, r) {\n            var i = [], o = e[n];\n            while (o && 9 !== o.nodeType && (r === t || 1 !== o.nodeType || !x(o).is(r)))\n                1 === o.nodeType && i.push(o), o = o[n];\n            return i\n        }, sibling: function (e, t) {\n            var n = [];\n            for (; e; e = e.nextSibling)\n                1 === e.nodeType && e !== t && n.push(e);\n            return n\n        }});\n    function ft(e, t, n) {\n        if (x.isFunction(t))\n            return x.grep(e, function (e, r) {\n                return!!t.call(e, r, e) !== n\n            });\n        if (t.nodeType)\n            return x.grep(e, function (e) {\n                return e === t !== n\n            });\n        if ("string" == typeof t) {\n            if (st.test(t))\n                return x.filter(t, e, n);\n            t = x.filter(t, e)\n        }\n        return x.grep(e, function (e) {\n            return x.inArray(e, t) >= 0 !== n\n        })\n    }\n    function dt(e) {\n        var t = ht.split("|"), n = e.createDocumentFragment();\n        if (n.createElement)\n            while (t.length)\n                n.createElement(t.pop());\n        return n\n    }\n    var ht = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", gt = / jQuery\\d+="(?:null|\\d+)"/g, mt = RegExp("<(?:" + ht + ")[\\\\s/>]", "i"), yt = /^\\s+/, vt = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi, bt = /<([\\w:]+)/, xt = /<tbody/i, wt = /<|&#?\\w+;/, Tt = /<(?:script|style|link)/i, Ct = /^(?:checkbox|radio)$/i, Nt = /checked\\s*(?:[^=]|=\\s*.checked.)/i, kt = /^$|\\/(?:java|ecma)script/i, Et = /^true\\/(.*)/, St = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g, At = {option: [1, "<select multiple=\'multiple\'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: x.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]}, jt = dt(a), Dt = jt.appendChild(a.createElement("div"));\n    At.optgroup = At.option, At.tbody = At.tfoot = At.colgroup = At.caption = At.thead, At.th = At.td, x.fn.extend({text: function (e) {\n            return x.access(this, function (e) {\n                return e === t ? x.text(this) : this.empty().append((this[0] && this[0].ownerDocument || a).createTextNode(e))\n            }, null, e, arguments.length)\n        }, append: function () {\n            return this.domManip(arguments, function (e) {\n                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n                    var t = Lt(this, e);\n                    t.appendChild(e)\n                }\n            })\n        }, prepend: function () {\n            return this.domManip(arguments, function (e) {\n                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n                    var t = Lt(this, e);\n                    t.insertBefore(e, t.firstChild)\n                }\n            })\n        }, before: function () {\n            return this.domManip(arguments, function (e) {\n                this.parentNode && this.parentNode.insertBefore(e, this)\n            })\n        }, after: function () {\n            return this.domManip(arguments, function (e) {\n                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)\n            })\n        }, remove: function (e, t) {\n            var n, r = e ? x.filter(e, this) : this, i = 0;\n            for (; null != (n = r[i]); i++)\n                t || 1 !== n.nodeType || x.cleanData(Ft(n)), n.parentNode && (t && x.contains(n.ownerDocument, n) && _t(Ft(n, "script")), n.parentNode.removeChild(n));\n            return this\n        }, empty: function () {\n            var e, t = 0;\n            for (; null != (e = this[t]); t++) {\n                1 === e.nodeType && x.cleanData(Ft(e, !1));\n                while (e.firstChild)\n                    e.removeChild(e.firstChild);\n                e.options && x.nodeName(e, "select") && (e.options.length = 0)\n            }\n            return this\n        }, clone: function (e, t) {\n            return e = null == e ? !1 : e, t = null == t ? e : t, this.map(function () {\n                return x.clone(this, e, t)\n            })\n        }, html: function (e) {\n            return x.access(this, function (e) {\n                var n = this[0] || {}, r = 0, i = this.length;\n                if (e === t)\n                    return 1 === n.nodeType ? n.innerHTML.replace(gt, "") : t;\n                if (!("string" != typeof e || Tt.test(e) || !x.support.htmlSerialize && mt.test(e) || !x.support.leadingWhitespace && yt.test(e) || At[(bt.exec(e) || ["", ""])[1].toLowerCase()])) {\n                    e = e.replace(vt, "<$1></$2>");\n                    try {\n                        for (; i > r; r++)\n                            n = this[r] || {}, 1 === n.nodeType && (x.cleanData(Ft(n, !1)), n.innerHTML = e);\n                        n = 0\n                    } catch (o) {\n                    }\n                }\n                n && this.empty().append(e)\n            }, null, e, arguments.length)\n        }, replaceWith: function () {\n            var e = x.map(this, function (e) {\n                return[e.nextSibling, e.parentNode]\n            }), t = 0;\n            return this.domManip(arguments, function (n) {\n                var r = e[t++], i = e[t++];\n                i && (r && r.parentNode !== i && (r = this.nextSibling), x(this).remove(), i.insertBefore(n, r))\n            }, !0), t ? this : this.remove()\n        }, detach: function (e) {\n            return this.remove(e, !0)\n        }, domManip: function (e, t, n) {\n            e = d.apply([], e);\n            var r, i, o, a, s, l, u = 0, c = this.length, p = this, f = c - 1, h = e[0], g = x.isFunction(h);\n            if (g || !(1 >= c || "string" != typeof h || x.support.checkClone) && Nt.test(h))\n                return this.each(function (r) {\n                    var i = p.eq(r);\n                    g && (e[0] = h.call(this, r, i.html())), i.domManip(e, t, n)\n                });\n            if (c && (l = x.buildFragment(e, this[0].ownerDocument, !1, !n && this), r = l.firstChild, 1 === l.childNodes.length && (l = r), r)) {\n                for (a = x.map(Ft(l, "script"), Ht), o = a.length; c > u; u++)\n                    i = l, u !== f && (i = x.clone(i, !0, !0), o && x.merge(a, Ft(i, "script"))), t.call(this[u], i, u);\n                if (o)\n                    for (s = a[a.length - 1].ownerDocument, x.map(a, qt), u = 0; o > u; u++)\n                        i = a[u], kt.test(i.type || "") && !x._data(i, "globalEval") && x.contains(s, i) && (i.src ? x._evalUrl(i.src) : x.globalEval((i.text || i.textContent || i.innerHTML || "").replace(St, "")));\n                l = r = null\n            }\n            return this\n        }});\n    function Lt(e, t) {\n        return x.nodeName(e, "table") && x.nodeName(1 === t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e\n    }\n    function Ht(e) {\n        return e.type = (null !== x.find.attr(e, "type")) + "/" + e.type, e\n    }\n    function qt(e) {\n        var t = Et.exec(e.type);\n        return t ? e.type = t[1] : e.removeAttribute("type"), e\n    }\n    function _t(e, t) {\n        var n, r = 0;\n        for (; null != (n = e[r]); r++)\n            x._data(n, "globalEval", !t || x._data(t[r], "globalEval"))\n    }\n    function Mt(e, t) {\n        if (1 === t.nodeType && x.hasData(e)) {\n            var n, r, i, o = x._data(e), a = x._data(t, o), s = o.events;\n            if (s) {\n                delete a.handle, a.events = {};\n                for (n in s)\n                    for (r = 0, i = s[n].length; i > r; r++)\n                        x.event.add(t, n, s[n][r])\n            }\n            a.data && (a.data = x.extend({}, a.data))\n        }\n    }\n    function Ot(e, t) {\n        var n, r, i;\n        if (1 === t.nodeType) {\n            if (n = t.nodeName.toLowerCase(), !x.support.noCloneEvent && t[x.expando]) {\n                i = x._data(t);\n                for (r in i.events)\n                    x.removeEvent(t, r, i.handle);\n                t.removeAttribute(x.expando)\n            }\n            "script" === n && t.text !== e.text ? (Ht(t).text = e.text, qt(t)) : "object" === n ? (t.parentNode && (t.outerHTML = e.outerHTML), x.support.html5Clone && e.innerHTML && !x.trim(t.innerHTML) && (t.innerHTML = e.innerHTML)) : "input" === n && Ct.test(e.type) ? (t.defaultChecked = t.checked = e.checked, t.value !== e.value && (t.value = e.value)) : "option" === n ? t.defaultSelected = t.selected = e.defaultSelected : ("input" === n || "textarea" === n) && (t.defaultValue = e.defaultValue)\n        }\n    }\n    x.each({appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith"}, function (e, t) {\n        x.fn[e] = function (e) {\n            var n, r = 0, i = [], o = x(e), a = o.length - 1;\n            for (; a >= r; r++)\n                n = r === a ? this : this.clone(!0), x(o[r])[t](n), h.apply(i, n.get());\n            return this.pushStack(i)\n        }\n    });\n    function Ft(e, n) {\n        var r, o, a = 0, s = typeof e.getElementsByTagName !== i ? e.getElementsByTagName(n || "*") : typeof e.querySelectorAll !== i ? e.querySelectorAll(n || "*") : t;\n        if (!s)\n            for (s = [], r = e.childNodes || e; null != (o = r[a]); a++)\n                !n || x.nodeName(o, n) ? s.push(o) : x.merge(s, Ft(o, n));\n        return n === t || n && x.nodeName(e, n) ? x.merge([e], s) : s\n    }\n    function Bt(e) {\n        Ct.test(e.type) && (e.defaultChecked = e.checked)\n    }\n    x.extend({clone: function (e, t, n) {\n            var r, i, o, a, s, l = x.contains(e.ownerDocument, e);\n            if (x.support.html5Clone || x.isXMLDoc(e) || !mt.test("<" + e.nodeName + ">") ? o = e.cloneNode(!0) : (Dt.innerHTML = e.outerHTML, Dt.removeChild(o = Dt.firstChild)), !(x.support.noCloneEvent && x.support.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || x.isXMLDoc(e)))\n                for (r = Ft(o), s = Ft(e), a = 0; null != (i = s[a]); ++a)\n                    r[a] && Ot(i, r[a]);\n            if (t)\n                if (n)\n                    for (s = s || Ft(e), r = r || Ft(o), a = 0; null != (i = s[a]); a++)\n                        Mt(i, r[a]);\n                else\n                    Mt(e, o);\n            return r = Ft(o, "script"), r.length > 0 && _t(r, !l && Ft(e, "script")), r = s = i = null, o\n        }, buildFragment: function (e, t, n, r) {\n            var i, o, a, s, l, u, c, p = e.length, f = dt(t), d = [], h = 0;\n            for (; p > h; h++)\n                if (o = e[h], o || 0 === o)\n                    if ("object" === x.type(o))\n                        x.merge(d, o.nodeType ? [o] : o);\n                    else if (wt.test(o)) {\n                        s = s || f.appendChild(t.createElement("div")), l = (bt.exec(o) || ["", ""])[1].toLowerCase(), c = At[l] || At._default, s.innerHTML = c[1] + o.replace(vt, "<$1></$2>") + c[2], i = c[0];\n                        while (i--)\n                            s = s.lastChild;\n                        if (!x.support.leadingWhitespace && yt.test(o) && d.push(t.createTextNode(yt.exec(o)[0])), !x.support.tbody) {\n                            o = "table" !== l || xt.test(o) ? "<table>" !== c[1] || xt.test(o) ? 0 : s : s.firstChild, i = o && o.childNodes.length;\n                            while (i--)\n                                x.nodeName(u = o.childNodes[i], "tbody") && !u.childNodes.length && o.removeChild(u)\n                        }\n                        x.merge(d, s.childNodes), s.textContent = "";\n                        while (s.firstChild)\n                            s.removeChild(s.firstChild);\n                        s = f.lastChild\n                    } else\n                        d.push(t.createTextNode(o));\n            s && f.removeChild(s), x.support.appendChecked || x.grep(Ft(d, "input"), Bt), h = 0;\n            while (o = d[h++])\n                if ((!r || -1 === x.inArray(o, r)) && (a = x.contains(o.ownerDocument, o), s = Ft(f.appendChild(o), "script"), a && _t(s), n)) {\n                    i = 0;\n                    while (o = s[i++])\n                        kt.test(o.type || "") && n.push(o)\n                }\n            return s = null, f\n        }, cleanData: function (e, t) {\n            var n, r, o, a, s = 0, l = x.expando, u = x.cache, c = x.support.deleteExpando, f = x.event.special;\n            for (; null != (n = e[s]); s++)\n                if ((t || x.acceptData(n)) && (o = n[l], a = o && u[o])) {\n                    if (a.events)\n                        for (r in a.events)\n                            f[r] ? x.event.remove(n, r) : x.removeEvent(n, r, a.handle);\n                    u[o] && (delete u[o], c ? delete n[l] : typeof n.removeAttribute !== i ? n.removeAttribute(l) : n[l] = null, p.push(o))\n                }\n        }, _evalUrl: function (e) {\n            return x.ajax({url: e, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0})\n        }}), x.fn.extend({wrapAll: function (e) {\n            if (x.isFunction(e))\n                return this.each(function (t) {\n                    x(this).wrapAll(e.call(this, t))\n                });\n            if (this[0]) {\n                var t = x(e, this[0].ownerDocument).eq(0).clone(!0);\n                this[0].parentNode && t.insertBefore(this[0]), t.map(function () {\n                    var e = this;\n                    while (e.firstChild && 1 === e.firstChild.nodeType)\n                        e = e.firstChild;\n                    return e\n                }).append(this)\n            }\n            return this\n        }, wrapInner: function (e) {\n            return x.isFunction(e) ? this.each(function (t) {\n                x(this).wrapInner(e.call(this, t))\n            }) : this.each(function () {\n                var t = x(this), n = t.contents();\n                n.length ? n.wrapAll(e) : t.append(e)\n            })\n        }, wrap: function (e) {\n            var t = x.isFunction(e);\n            return this.each(function (n) {\n                x(this).wrapAll(t ? e.call(this, n) : e)\n            })\n        }, unwrap: function () {\n            return this.parent().each(function () {\n                x.nodeName(this, "body") || x(this).replaceWith(this.childNodes)\n            }).end()\n        }});\n    var Pt, Rt, Wt, $t = /alpha\\([^)]*\\)/i, It = /opacity\\s*=\\s*([^)]*)/, zt = /^(top|right|bottom|left)$/, Xt = /^(none|table(?!-c[ea]).+)/, Ut = /^margin/, Vt = RegExp("^(" + w + ")(.*)$", "i"), Yt = RegExp("^(" + w + ")(?!px)[a-z%]+$", "i"), Jt = RegExp("^([+-])=(" + w + ")", "i"), Gt = {BODY: "block"}, Qt = {position: "absolute", visibility: "hidden", display: "block"}, Kt = {letterSpacing: 0, fontWeight: 400}, Zt = ["Top", "Right", "Bottom", "Left"], en = ["Webkit", "O", "Moz", "ms"];\n    function tn(e, t) {\n        if (t in e)\n            return t;\n        var n = t.charAt(0).toUpperCase() + t.slice(1), r = t, i = en.length;\n        while (i--)\n            if (t = en[i] + n, t in e)\n                return t;\n        return r\n    }\n    function nn(e, t) {\n        return e = t || e, "none" === x.css(e, "display") || !x.contains(e.ownerDocument, e)\n    }\n    function rn(e, t) {\n        var n, r, i, o = [], a = 0, s = e.length;\n        for (; s > a; a++)\n            r = e[a], r.style && (o[a] = x._data(r, "olddisplay"), n = r.style.display, t ? (o[a] || "none" !== n || (r.style.display = ""), "" === r.style.display && nn(r) && (o[a] = x._data(r, "olddisplay", ln(r.nodeName)))) : o[a] || (i = nn(r), (n && "none" !== n || !i) && x._data(r, "olddisplay", i ? n : x.css(r, "display"))));\n        for (a = 0; s > a; a++)\n            r = e[a], r.style && (t && "none" !== r.style.display && "" !== r.style.display || (r.style.display = t ? o[a] || "" : "none"));\n        return e\n    }\n    x.fn.extend({css: function (e, n) {\n            return x.access(this, function (e, n, r) {\n                var i, o, a = {}, s = 0;\n                if (x.isArray(n)) {\n                    for (o = Rt(e), i = n.length; i > s; s++)\n                        a[n[s]] = x.css(e, n[s], !1, o);\n                    return a\n                }\n                return r !== t ? x.style(e, n, r) : x.css(e, n)\n            }, e, n, arguments.length > 1)\n        }, show: function () {\n            return rn(this, !0)\n        }, hide: function () {\n            return rn(this)\n        }, toggle: function (e) {\n            return"boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function () {\n                nn(this) ? x(this).show() : x(this).hide()\n            })\n        }}), x.extend({cssHooks: {opacity: {get: function (e, t) {\n                    if (t) {\n                        var n = Wt(e, "opacity");\n                        return"" === n ? "1" : n\n                    }\n                }}}, cssNumber: {columnCount: !0, fillOpacity: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0}, cssProps: {"float": x.support.cssFloat ? "cssFloat" : "styleFloat"}, style: function (e, n, r, i) {\n            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {\n                var o, a, s, l = x.camelCase(n), u = e.style;\n                if (n = x.cssProps[l] || (x.cssProps[l] = tn(u, l)), s = x.cssHooks[n] || x.cssHooks[l], r === t)\n                    return s && "get"in s && (o = s.get(e, !1, i)) !== t ? o : u[n];\n                if (a = typeof r, "string" === a && (o = Jt.exec(r)) && (r = (o[1] + 1) * o[2] + parseFloat(x.css(e, n)), a = "number"), !(null == r || "number" === a && isNaN(r) || ("number" !== a || x.cssNumber[l] || (r += "px"), x.support.clearCloneStyle || "" !== r || 0 !== n.indexOf("background") || (u[n] = "inherit"), s && "set"in s && (r = s.set(e, r, i)) === t)))\n                    try {\n                        u[n] = r\n                    } catch (c) {\n                    }\n            }\n        }, css: function (e, n, r, i) {\n            var o, a, s, l = x.camelCase(n);\n            return n = x.cssProps[l] || (x.cssProps[l] = tn(e.style, l)), s = x.cssHooks[n] || x.cssHooks[l], s && "get"in s && (a = s.get(e, !0, r)), a === t && (a = Wt(e, n, i)), "normal" === a && n in Kt && (a = Kt[n]), "" === r || r ? (o = parseFloat(a), r === !0 || x.isNumeric(o) ? o || 0 : a) : a\n        }}), e.getComputedStyle ? (Rt = function (t) {\n        return e.getComputedStyle(t, null)\n    }, Wt = function (e, n, r) {\n        var i, o, a, s = r || Rt(e), l = s ? s.getPropertyValue(n) || s[n] : t, u = e.style;\n        return s && ("" !== l || x.contains(e.ownerDocument, e) || (l = x.style(e, n)), Yt.test(l) && Ut.test(n) && (i = u.width, o = u.minWidth, a = u.maxWidth, u.minWidth = u.maxWidth = u.width = l, l = s.width, u.width = i, u.minWidth = o, u.maxWidth = a)), l\n    }) : a.documentElement.currentStyle && (Rt = function (e) {\n        return e.currentStyle\n    }, Wt = function (e, n, r) {\n        var i, o, a, s = r || Rt(e), l = s ? s[n] : t, u = e.style;\n        return null == l && u && u[n] && (l = u[n]), Yt.test(l) && !zt.test(n) && (i = u.left, o = e.runtimeStyle, a = o && o.left, a && (o.left = e.currentStyle.left), u.left = "fontSize" === n ? "1em" : l, l = u.pixelLeft + "px", u.left = i, a && (o.left = a)), "" === l ? "auto" : l\n    });\n    function on(e, t, n) {\n        var r = Vt.exec(t);\n        return r ? Math.max(0, r[1] - (n || 0)) + (r[2] || "px") : t\n    }\n    function an(e, t, n, r, i) {\n        var o = n === (r ? "border" : "content") ? 4 : "width" === t ? 1 : 0, a = 0;\n        for (; 4 > o; o += 2)\n            "margin" === n && (a += x.css(e, n + Zt[o], !0, i)), r ? ("content" === n && (a -= x.css(e, "padding" + Zt[o], !0, i)), "margin" !== n && (a -= x.css(e, "border" + Zt[o] + "Width", !0, i))) : (a += x.css(e, "padding" + Zt[o], !0, i), "padding" !== n && (a += x.css(e, "border" + Zt[o] + "Width", !0, i)));\n        return a\n    }\n    function sn(e, t, n) {\n        var r = !0, i = "width" === t ? e.offsetWidth : e.offsetHeight, o = Rt(e), a = x.support.boxSizing && "border-box" === x.css(e, "boxSizing", !1, o);\n        if (0 >= i || null == i) {\n            if (i = Wt(e, t, o), (0 > i || null == i) && (i = e.style[t]), Yt.test(i))\n                return i;\n            r = a && (x.support.boxSizingReliable || i === e.style[t]), i = parseFloat(i) || 0\n        }\n        return i + an(e, t, n || (a ? "border" : "content"), r, o) + "px"\n    }\n    function ln(e) {\n        var t = a, n = Gt[e];\n        return n || (n = un(e, t), "none" !== n && n || (Pt = (Pt || x("<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>").css("cssText", "display:block !important")).appendTo(t.documentElement), t = (Pt[0].contentWindow || Pt[0].contentDocument).document, t.write("<!doctype html><html><body>"), t.close(), n = un(e, t), Pt.detach()), Gt[e] = n), n\n    }\n    function un(e, t) {\n        var n = x(t.createElement(e)).appendTo(t.body), r = x.css(n[0], "display");\n        return n.remove(), r\n    }\n    x.each(["height", "width"], function (e, n) {\n        x.cssHooks[n] = {get: function (e, r, i) {\n                return r ? 0 === e.offsetWidth && Xt.test(x.css(e, "display")) ? x.swap(e, Qt, function () {\n                    return sn(e, n, i)\n                }) : sn(e, n, i) : t\n            }, set: function (e, t, r) {\n                var i = r && Rt(e);\n                return on(e, t, r ? an(e, n, r, x.support.boxSizing && "border-box" === x.css(e, "boxSizing", !1, i), i) : 0)\n            }}\n    }), x.support.opacity || (x.cssHooks.opacity = {get: function (e, t) {\n            return It.test((t && e.currentStyle ? e.currentStyle.filter : e.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : t ? "1" : ""\n        }, set: function (e, t) {\n            var n = e.style, r = e.currentStyle, i = x.isNumeric(t) ? "alpha(opacity=" + 100 * t + ")" : "", o = r && r.filter || n.filter || "";\n            n.zoom = 1, (t >= 1 || "" === t) && "" === x.trim(o.replace($t, "")) && n.removeAttribute && (n.removeAttribute("filter"), "" === t || r && !r.filter) || (n.filter = $t.test(o) ? o.replace($t, i) : o + " " + i)\n        }}), x(function () {\n        x.support.reliableMarginRight || (x.cssHooks.marginRight = {get: function (e, n) {\n                return n ? x.swap(e, {display: "inline-block"}, Wt, [e, "marginRight"]) : t\n            }}), !x.support.pixelPosition && x.fn.position && x.each(["top", "left"], function (e, n) {\n            x.cssHooks[n] = {get: function (e, r) {\n                    return r ? (r = Wt(e, n), Yt.test(r) ? x(e).position()[n] + "px" : r) : t\n                }}\n        })\n    }), x.expr && x.expr.filters && (x.expr.filters.hidden = function (e) {\n        return 0 >= e.offsetWidth && 0 >= e.offsetHeight || !x.support.reliableHiddenOffsets && "none" === (e.style && e.style.display || x.css(e, "display"))\n    }, x.expr.filters.visible = function (e) {\n        return!x.expr.filters.hidden(e)\n    }), x.each({margin: "", padding: "", border: "Width"}, function (e, t) {\n        x.cssHooks[e + t] = {expand: function (n) {\n                var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n];\n                for (; 4 > r; r++)\n                    i[e + Zt[r] + t] = o[r] || o[r - 2] || o[0];\n                return i\n            }}, Ut.test(e) || (x.cssHooks[e + t].set = on)\n    });\n    var cn = /%20/g, pn = /\\[\\]$/, fn = /\\r?\\n/g, dn = /^(?:submit|button|image|reset|file)$/i, hn = /^(?:input|select|textarea|keygen)/i;\n    x.fn.extend({serialize: function () {\n            return x.param(this.serializeArray())\n        }, serializeArray: function () {\n            return this.map(function () {\n                var e = x.prop(this, "elements");\n                return e ? x.makeArray(e) : this\n            }).filter(function () {\n                var e = this.type;\n                return this.name && !x(this).is(":disabled") && hn.test(this.nodeName) && !dn.test(e) && (this.checked || !Ct.test(e))\n            }).map(function (e, t) {\n                var n = x(this).val();\n                return null == n ? null : x.isArray(n) ? x.map(n, function (e) {\n                    return{name: t.name, value: e.replace(fn, "\\r\\n")}\n                }) : {name: t.name, value: n.replace(fn, "\\r\\n")}\n            }).get()\n        }}), x.param = function (e, n) {\n        var r, i = [], o = function (e, t) {\n            t = x.isFunction(t) ? t() : null == t ? "" : t, i[i.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t)\n        };\n        if (n === t && (n = x.ajaxSettings && x.ajaxSettings.traditional), x.isArray(e) || e.jquery && !x.isPlainObject(e))\n            x.each(e, function () {\n                o(this.name, this.value)\n            });\n        else\n            for (r in e)\n                gn(r, e[r], n, o);\n        return i.join("&").replace(cn, "+")\n    };\n    function gn(e, t, n, r) {\n        var i;\n        if (x.isArray(t))\n            x.each(t, function (t, i) {\n                n || pn.test(e) ? r(e, i) : gn(e + "[" + ("object" == typeof i ? t : "") + "]", i, n, r)\n            });\n        else if (n || "object" !== x.type(t))\n            r(e, t);\n        else\n            for (i in t)\n                gn(e + "[" + i + "]", t[i], n, r)\n    }\n    x.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (e, t) {\n        x.fn[t] = function (e, n) {\n            return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t)\n        }\n    }), x.fn.extend({hover: function (e, t) {\n            return this.mouseenter(e).mouseleave(t || e)\n        }, bind: function (e, t, n) {\n            return this.on(e, null, t, n)\n        }, unbind: function (e, t) {\n            return this.off(e, null, t)\n        }, delegate: function (e, t, n, r) {\n            return this.on(t, e, n, r)\n        }, undelegate: function (e, t, n) {\n            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n)\n        }});\n    var mn, yn, vn = x.now(), bn = /\\?/, xn = /#.*$/, wn = /([?&])_=[^&]*/, Tn = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm, Cn = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Nn = /^(?:GET|HEAD)$/, kn = /^\\/\\//, En = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/, Sn = x.fn.load, An = {}, jn = {}, Dn = "*/".concat("*");\n    try {\n        yn = o.href\n    } catch (Ln) {\n        yn = a.createElement("a"), yn.href = "", yn = yn.href\n    }\n    mn = En.exec(yn.toLowerCase()) || [];\n    function Hn(e) {\n        return function (t, n) {\n            "string" != typeof t && (n = t, t = "*");\n            var r, i = 0, o = t.toLowerCase().match(T) || [];\n            if (x.isFunction(n))\n                while (r = o[i++])\n                    "+" === r[0] ? (r = r.slice(1) || "*", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n)\n        }\n    }\n    function qn(e, n, r, i) {\n        var o = {}, a = e === jn;\n        function s(l) {\n            var u;\n            return o[l] = !0, x.each(e[l] || [], function (e, l) {\n                var c = l(n, r, i);\n                return"string" != typeof c || a || o[c] ? a ? !(u = c) : t : (n.dataTypes.unshift(c), s(c), !1)\n            }), u\n        }\n        return s(n.dataTypes[0]) || !o["*"] && s("*")\n    }\n    function _n(e, n) {\n        var r, i, o = x.ajaxSettings.flatOptions || {};\n        for (i in n)\n            n[i] !== t && ((o[i] ? e : r || (r = {}))[i] = n[i]);\n        return r && x.extend(!0, e, r), e\n    }\n    x.fn.load = function (e, n, r) {\n        if ("string" != typeof e && Sn)\n            return Sn.apply(this, arguments);\n        var i, o, a, s = this, l = e.indexOf(" ");\n        return l >= 0 && (i = e.slice(l, e.length), e = e.slice(0, l)), x.isFunction(n) ? (r = n, n = t) : n && "object" == typeof n && (a = "POST"), s.length > 0 && x.ajax({url: e, type: a, dataType: "html", data: n}).done(function (e) {\n            o = arguments, s.html(i ? x("<div>").append(x.parseHTML(e)).find(i) : e)\n        }).complete(r && function (e, t) {\n            s.each(r, o || [e.responseText, t, e])\n        }), this\n    }, x.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) {\n        x.fn[t] = function (e) {\n            return this.on(t, e)\n        }\n    }), x.extend({active: 0, lastModified: {}, etag: {}, ajaxSettings: {url: yn, type: "GET", isLocal: Cn.test(mn[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: {"*": Dn, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript"}, contents: {xml: /xml/, html: /html/, json: /json/}, responseFields: {xml: "responseXML", text: "responseText", json: "responseJSON"}, converters: {"* text": String, "text html": !0, "text json": x.parseJSON, "text xml": x.parseXML}, flatOptions: {url: !0, context: !0}}, ajaxSetup: function (e, t) {\n            return t ? _n(_n(e, x.ajaxSettings), t) : _n(x.ajaxSettings, e)\n        }, ajaxPrefilter: Hn(An), ajaxTransport: Hn(jn), ajax: function (e, n) {\n            "object" == typeof e && (n = e, e = t), n = n || {};\n            var r, i, o, a, s, l, u, c, p = x.ajaxSetup({}, n), f = p.context || p, d = p.context && (f.nodeType || f.jquery) ? x(f) : x.event, h = x.Deferred(), g = x.Callbacks("once memory"), m = p.statusCode || {}, y = {}, v = {}, b = 0, w = "canceled", C = {readyState: 0, getResponseHeader: function (e) {\n                    var t;\n                    if (2 === b) {\n                        if (!c) {\n                            c = {};\n                            while (t = Tn.exec(a))\n                                c[t[1].toLowerCase()] = t[2]\n                        }\n                        t = c[e.toLowerCase()]\n                    }\n                    return null == t ? null : t\n                }, getAllResponseHeaders: function () {\n                    return 2 === b ? a : null\n                }, setRequestHeader: function (e, t) {\n                    var n = e.toLowerCase();\n                    return b || (e = v[n] = v[n] || e, y[e] = t), this\n                }, overrideMimeType: function (e) {\n                    return b || (p.mimeType = e), this\n                }, statusCode: function (e) {\n                    var t;\n                    if (e)\n                        if (2 > b)\n                            for (t in e)\n                                m[t] = [m[t], e[t]];\n                        else\n                            C.always(e[C.status]);\n                    return this\n                }, abort: function (e) {\n                    var t = e || w;\n                    return u && u.abort(t), k(0, t), this\n                }};\n            if (h.promise(C).complete = g.add, C.success = C.done, C.error = C.fail, p.url = ((e || p.url || yn) + "").replace(xn, "").replace(kn, mn[1] + "//"), p.type = n.method || n.type || p.method || p.type, p.dataTypes = x.trim(p.dataType || "*").toLowerCase().match(T) || [""], null == p.crossDomain && (r = En.exec(p.url.toLowerCase()), p.crossDomain = !(!r || r[1] === mn[1] && r[2] === mn[2] && (r[3] || ("http:" === r[1] ? "80" : "443")) === (mn[3] || ("http:" === mn[1] ? "80" : "443")))), p.data && p.processData && "string" != typeof p.data && (p.data = x.param(p.data, p.traditional)), qn(An, p, n, C), 2 === b)\n                return C;\n            l = p.global, l && 0 === x.active++ && x.event.trigger("ajaxStart"), p.type = p.type.toUpperCase(), p.hasContent = !Nn.test(p.type), o = p.url, p.hasContent || (p.data && (o = p.url += (bn.test(o) ? "&" : "?") + p.data, delete p.data), p.cache === !1 && (p.url = wn.test(o) ? o.replace(wn, "$1_=" + vn++) : o + (bn.test(o) ? "&" : "?") + "_=" + vn++)), p.ifModified && (x.lastModified[o] && C.setRequestHeader("If-Modified-Since", x.lastModified[o]), x.etag[o] && C.setRequestHeader("If-None-Match", x.etag[o])), (p.data && p.hasContent && p.contentType !== !1 || n.contentType) && C.setRequestHeader("Content-Type", p.contentType), C.setRequestHeader("Accept", p.dataTypes[0] && p.accepts[p.dataTypes[0]] ? p.accepts[p.dataTypes[0]] + ("*" !== p.dataTypes[0] ? ", " + Dn + "; q=0.01" : "") : p.accepts["*"]);\n            for (i in p.headers)\n                C.setRequestHeader(i, p.headers[i]);\n            if (p.beforeSend && (p.beforeSend.call(f, C, p) === !1 || 2 === b))\n                return C.abort();\n            w = "abort";\n            for (i in{success:1, error:1, complete:1})\n                C[i](p[i]);\n            if (u = qn(jn, p, n, C)) {\n                C.readyState = 1, l && d.trigger("ajaxSend", [C, p]), p.async && p.timeout > 0 && (s = setTimeout(function () {\n                    C.abort("timeout")\n                }, p.timeout));\n                try {\n                    b = 1, u.send(y, k)\n                } catch (N) {\n                    if (!(2 > b))\n                        throw N;\n                    k(-1, N)\n                }\n            } else\n                k(-1, "No Transport");\n            function k(e, n, r, i) {\n                var c, y, v, w, T, N = n;\n                2 !== b && (b = 2, s && clearTimeout(s), u = t, a = i || "", C.readyState = e > 0 ? 4 : 0, c = e >= 200 && 300 > e || 304 === e, r && (w = Mn(p, C, r)), w = On(p, w, C, c), c ? (p.ifModified && (T = C.getResponseHeader("Last-Modified"), T && (x.lastModified[o] = T), T = C.getResponseHeader("etag"), T && (x.etag[o] = T)), 204 === e || "HEAD" === p.type ? N = "nocontent" : 304 === e ? N = "notmodified" : (N = w.state, y = w.data, v = w.error, c = !v)) : (v = N, (e || !N) && (N = "error", 0 > e && (e = 0))), C.status = e, C.statusText = (n || N) + "", c ? h.resolveWith(f, [y, N, C]) : h.rejectWith(f, [C, N, v]), C.statusCode(m), m = t, l && d.trigger(c ? "ajaxSuccess" : "ajaxError", [C, p, c ? y : v]), g.fireWith(f, [C, N]), l && (d.trigger("ajaxComplete", [C, p]), --x.active || x.event.trigger("ajaxStop")))\n            }\n            return C\n        }, getJSON: function (e, t, n) {\n            return x.get(e, t, n, "json")\n        }, getScript: function (e, n) {\n            return x.get(e, t, n, "script")\n        }}), x.each(["get", "post"], function (e, n) {\n        x[n] = function (e, r, i, o) {\n            return x.isFunction(r) && (o = o || i, i = r, r = t), x.ajax({url: e, type: n, dataType: o, data: r, success: i})\n        }\n    });\n    function Mn(e, n, r) {\n        var i, o, a, s, l = e.contents, u = e.dataTypes;\n        while ("*" === u[0])\n            u.shift(), o === t && (o = e.mimeType || n.getResponseHeader("Content-Type"));\n        if (o)\n            for (s in l)\n                if (l[s] && l[s].test(o)) {\n                    u.unshift(s);\n                    break\n                }\n        if (u[0]in r)\n            a = u[0];\n        else {\n            for (s in r) {\n                if (!u[0] || e.converters[s + " " + u[0]]) {\n                    a = s;\n                    break\n                }\n                i || (i = s)\n            }\n            a = a || i\n        }\n        return a ? (a !== u[0] && u.unshift(a), r[a]) : t\n    }\n    function On(e, t, n, r) {\n        var i, o, a, s, l, u = {}, c = e.dataTypes.slice();\n        if (c[1])\n            for (a in e.converters)\n                u[a.toLowerCase()] = e.converters[a];\n        o = c.shift();\n        while (o)\n            if (e.responseFields[o] && (n[e.responseFields[o]] = t), !l && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), l = o, o = c.shift())\n                if ("*" === o)\n                    o = l;\n                else if ("*" !== l && l !== o) {\n                    if (a = u[l + " " + o] || u["* " + o], !a)\n                        for (i in u)\n                            if (s = i.split(" "), s[1] === o && (a = u[l + " " + s[0]] || u["* " + s[0]])) {\n                                a === !0 ? a = u[i] : u[i] !== !0 && (o = s[0], c.unshift(s[1]));\n                                break\n                            }\n                    if (a !== !0)\n                        if (a && e["throws"])\n                            t = a(t);\n                        else\n                            try {\n                                t = a(t)\n                            } catch (p) {\n                                return{state: "parsererror", error: a ? p : "No conversion from " + l + " to " + o}\n                            }\n                }\n        return{state: "success", data: t}\n    }\n    x.ajaxSetup({accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"}, contents: {script: /(?:java|ecma)script/}, converters: {"text script": function (e) {\n                return x.globalEval(e), e\n            }}}), x.ajaxPrefilter("script", function (e) {\n        e.cache === t && (e.cache = !1), e.crossDomain && (e.type = "GET", e.global = !1)\n    }), x.ajaxTransport("script", function (e) {\n        if (e.crossDomain) {\n            var n, r = a.head || x("head")[0] || a.documentElement;\n            return{send: function (t, i) {\n                    n = a.createElement("script"), n.async = !0, e.scriptCharset && (n.charset = e.scriptCharset), n.src = e.url, n.onload = n.onreadystatechange = function (e, t) {\n                        (t || !n.readyState || /loaded|complete/.test(n.readyState)) && (n.onload = n.onreadystatechange = null, n.parentNode && n.parentNode.removeChild(n), n = null, t || i(200, "success"))\n                    }, r.insertBefore(n, r.firstChild)\n                }, abort: function () {\n                    n && n.onload(t, !0)\n                }}\n        }\n    });\n    var Fn = [], Bn = /(=)\\?(?=&|$)|\\?\\?/;\n    x.ajaxSetup({jsonp: "callback", jsonpCallback: function () {\n            var e = Fn.pop() || x.expando + "_" + vn++;\n            return this[e] = !0, e\n        }}), x.ajaxPrefilter("json jsonp", function (n, r, i) {\n        var o, a, s, l = n.jsonp !== !1 && (Bn.test(n.url) ? "url" : "string" == typeof n.data && !(n.contentType || "").indexOf("application/x-www-form-urlencoded") && Bn.test(n.data) && "data");\n        return l || "jsonp" === n.dataTypes[0] ? (o = n.jsonpCallback = x.isFunction(n.jsonpCallback) ? n.jsonpCallback() : n.jsonpCallback, l ? n[l] = n[l].replace(Bn, "$1" + o) : n.jsonp !== !1 && (n.url += (bn.test(n.url) ? "&" : "?") + n.jsonp + "=" + o), n.converters["script json"] = function () {\n            return s || x.error(o + " was not called"), s[0]\n        }, n.dataTypes[0] = "json", a = e[o], e[o] = function () {\n            s = arguments\n        }, i.always(function () {\n            e[o] = a, n[o] && (n.jsonpCallback = r.jsonpCallback, Fn.push(o)), s && x.isFunction(a) && a(s[0]), s = a = t\n        }), "script") : t\n    });\n    var Pn, Rn, Wn = 0, $n = e.ActiveXObject && function () {\n        var e;\n        for (e in Pn)\n            Pn[e](t, !0)\n    };\n    function In() {\n        try {\n            return new e.XMLHttpRequest\n        } catch (t) {\n        }\n    }\n    function zn() {\n        try {\n            return new e.ActiveXObject("Microsoft.XMLHTTP")\n        } catch (t) {\n        }\n    }\n    x.ajaxSettings.xhr = e.ActiveXObject ? function () {\n        return!this.isLocal && In() || zn()\n    } : In, Rn = x.ajaxSettings.xhr(), x.support.cors = !!Rn && "withCredentials"in Rn, Rn = x.support.ajax = !!Rn, Rn && x.ajaxTransport(function (n) {\n        if (!n.crossDomain || x.support.cors) {\n            var r;\n            return{send: function (i, o) {\n                    var a, s, l = n.xhr();\n                    if (n.username ? l.open(n.type, n.url, n.async, n.username, n.password) : l.open(n.type, n.url, n.async), n.xhrFields)\n                        for (s in n.xhrFields)\n                            l[s] = n.xhrFields[s];\n                    n.mimeType && l.overrideMimeType && l.overrideMimeType(n.mimeType), n.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest");\n                    try {\n                        for (s in i)\n                            l.setRequestHeader(s, i[s])\n                    } catch (u) {\n                    }\n                    l.send(n.hasContent && n.data || null), r = function (e, i) {\n                        var s, u, c, p;\n                        try {\n                            if (r && (i || 4 === l.readyState))\n                                if (r = t, a && (l.onreadystatechange = x.noop, $n && delete Pn[a]), i)\n                                    4 !== l.readyState && l.abort();\n                                else {\n                                    p = {}, s = l.status, u = l.getAllResponseHeaders(), "string" == typeof l.responseText && (p.text = l.responseText);\n                                    try {\n                                        c = l.statusText\n                                    } catch (f) {\n                                        c = ""\n                                    }\n                                    s || !n.isLocal || n.crossDomain ? 1223 === s && (s = 204) : s = p.text ? 200 : 404\n                                }\n                        } catch (d) {\n                            i || o(-1, d)\n                        }\n                        p && o(s, c, p, u)\n                    }, n.async ? 4 === l.readyState ? setTimeout(r) : (a = ++Wn, $n && (Pn || (Pn = {}, x(e).unload($n)), Pn[a] = r), l.onreadystatechange = r) : r()\n                }, abort: function () {\n                    r && r(t, !0)\n                }}\n        }\n    });\n    var Xn, Un, Vn = /^(?:toggle|show|hide)$/, Yn = RegExp("^(?:([+-])=|)(" + w + ")([a-z%]*)$", "i"), Jn = /queueHooks$/, Gn = [nr], Qn = {"*": [function (e, t) {\n                var n = this.createTween(e, t), r = n.cur(), i = Yn.exec(t), o = i && i[3] || (x.cssNumber[e] ? "" : "px"), a = (x.cssNumber[e] || "px" !== o && +r) && Yn.exec(x.css(n.elem, e)), s = 1, l = 20;\n                if (a && a[3] !== o) {\n                    o = o || a[3], i = i || [], a = +r || 1;\n                    do\n                        s = s || ".5", a /= s, x.style(n.elem, e, a + o);\n                    while (s !== (s = n.cur() / r) && 1 !== s && --l)\n                }\n                return i && (a = n.start = +a || +r || 0, n.unit = o, n.end = i[1] ? a + (i[1] + 1) * i[2] : +i[2]), n\n            }]};\n    function Kn() {\n        return setTimeout(function () {\n            Xn = t\n        }), Xn = x.now()\n    }\n    function Zn(e, t, n) {\n        var r, i = (Qn[t] || []).concat(Qn["*"]), o = 0, a = i.length;\n        for (; a > o; o++)\n            if (r = i[o].call(n, t, e))\n                return r\n    }\n    function er(e, t, n) {\n        var r, i, o = 0, a = Gn.length, s = x.Deferred().always(function () {\n            delete l.elem\n        }), l = function () {\n            if (i)\n                return!1;\n            var t = Xn || Kn(), n = Math.max(0, u.startTime + u.duration - t), r = n / u.duration || 0, o = 1 - r, a = 0, l = u.tweens.length;\n            for (; l > a; a++)\n                u.tweens[a].run(o);\n            return s.notifyWith(e, [u, o, n]), 1 > o && l ? n : (s.resolveWith(e, [u]), !1)\n        }, u = s.promise({elem: e, props: x.extend({}, t), opts: x.extend(!0, {specialEasing: {}}, n), originalProperties: t, originalOptions: n, startTime: Xn || Kn(), duration: n.duration, tweens: [], createTween: function (t, n) {\n                var r = x.Tween(e, u.opts, t, n, u.opts.specialEasing[t] || u.opts.easing);\n                return u.tweens.push(r), r\n            }, stop: function (t) {\n                var n = 0, r = t ? u.tweens.length : 0;\n                if (i)\n                    return this;\n                for (i = !0; r > n; n++)\n                    u.tweens[n].run(1);\n                return t ? s.resolveWith(e, [u, t]) : s.rejectWith(e, [u, t]), this\n            }}), c = u.props;\n        for (tr(c, u.opts.specialEasing); a > o; o++)\n            if (r = Gn[o].call(u, e, c, u.opts))\n                return r;\n        return x.map(c, Zn, u), x.isFunction(u.opts.start) && u.opts.start.call(e, u), x.fx.timer(x.extend(l, {elem: e, anim: u, queue: u.opts.queue})), u.progress(u.opts.progress).done(u.opts.done, u.opts.complete).fail(u.opts.fail).always(u.opts.always)\n    }\n    function tr(e, t) {\n        var n, r, i, o, a;\n        for (n in e)\n            if (r = x.camelCase(n), i = t[r], o = e[n], x.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), a = x.cssHooks[r], a && "expand"in a) {\n                o = a.expand(o), delete e[r];\n                for (n in o)\n                    n in e || (e[n] = o[n], t[n] = i)\n            } else\n                t[r] = i\n    }\n    x.Animation = x.extend(er, {tweener: function (e, t) {\n            x.isFunction(e) ? (t = e, e = ["*"]) : e = e.split(" ");\n            var n, r = 0, i = e.length;\n            for (; i > r; r++)\n                n = e[r], Qn[n] = Qn[n] || [], Qn[n].unshift(t)\n        }, prefilter: function (e, t) {\n            t ? Gn.unshift(e) : Gn.push(e)\n        }});\n    function nr(e, t, n) {\n        var r, i, o, a, s, l, u = this, c = {}, p = e.style, f = e.nodeType && nn(e), d = x._data(e, "fxshow");\n        n.queue || (s = x._queueHooks(e, "fx"), null == s.unqueued && (s.unqueued = 0, l = s.empty.fire, s.empty.fire = function () {\n            s.unqueued || l()\n        }), s.unqueued++, u.always(function () {\n            u.always(function () {\n                s.unqueued--, x.queue(e, "fx").length || s.empty.fire()\n            })\n        })), 1 === e.nodeType && ("height"in t || "width"in t) && (n.overflow = [p.overflow, p.overflowX, p.overflowY], "inline" === x.css(e, "display") && "none" === x.css(e, "float") && (x.support.inlineBlockNeedsLayout && "inline" !== ln(e.nodeName) ? p.zoom = 1 : p.display = "inline-block")), n.overflow && (p.overflow = "hidden", x.support.shrinkWrapBlocks || u.always(function () {\n            p.overflow = n.overflow[0], p.overflowX = n.overflow[1], p.overflowY = n.overflow[2]\n        }));\n        for (r in t)\n            if (i = t[r], Vn.exec(i)) {\n                if (delete t[r], o = o || "toggle" === i, i === (f ? "hide" : "show"))\n                    continue;\n                c[r] = d && d[r] || x.style(e, r)\n            }\n        if (!x.isEmptyObject(c)) {\n            d ? "hidden"in d && (f = d.hidden) : d = x._data(e, "fxshow", {}), o && (d.hidden = !f), f ? x(e).show() : u.done(function () {\n                x(e).hide()\n            }), u.done(function () {\n                var t;\n                x._removeData(e, "fxshow");\n                for (t in c)\n                    x.style(e, t, c[t])\n            });\n            for (r in c)\n                a = Zn(f ? d[r] : 0, r, u), r in d || (d[r] = a.start, f && (a.end = a.start, a.start = "width" === r || "height" === r ? 1 : 0))\n        }\n    }\n    function rr(e, t, n, r, i) {\n        return new rr.prototype.init(e, t, n, r, i)\n    }\n    x.Tween = rr, rr.prototype = {constructor: rr, init: function (e, t, n, r, i, o) {\n            this.elem = e, this.prop = n, this.easing = i || "swing", this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (x.cssNumber[n] ? "" : "px")\n        }, cur: function () {\n            var e = rr.propHooks[this.prop];\n            return e && e.get ? e.get(this) : rr.propHooks._default.get(this)\n        }, run: function (e) {\n            var t, n = rr.propHooks[this.prop];\n            return this.pos = t = this.options.duration ? x.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : rr.propHooks._default.set(this), this\n        }}, rr.prototype.init.prototype = rr.prototype, rr.propHooks = {_default: {get: function (e) {\n                var t;\n                return null == e.elem[e.prop] || e.elem.style && null != e.elem.style[e.prop] ? (t = x.css(e.elem, e.prop, ""), t && "auto" !== t ? t : 0) : e.elem[e.prop]\n            }, set: function (e) {\n                x.fx.step[e.prop] ? x.fx.step[e.prop](e) : e.elem.style && (null != e.elem.style[x.cssProps[e.prop]] || x.cssHooks[e.prop]) ? x.style(e.elem, e.prop, e.now + e.unit) : e.elem[e.prop] = e.now\n            }}}, rr.propHooks.scrollTop = rr.propHooks.scrollLeft = {set: function (e) {\n            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)\n        }}, x.each(["toggle", "show", "hide"], function (e, t) {\n        var n = x.fn[t];\n        x.fn[t] = function (e, r, i) {\n            return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(ir(t, !0), e, r, i)\n        }\n    }), x.fn.extend({fadeTo: function (e, t, n, r) {\n            return this.filter(nn).css("opacity", 0).show().end().animate({opacity: t}, e, n, r)\n        }, animate: function (e, t, n, r) {\n            var i = x.isEmptyObject(e), o = x.speed(t, n, r), a = function () {\n                var t = er(this, x.extend({}, e), o);\n                (i || x._data(this, "finish")) && t.stop(!0)\n            };\n            return a.finish = a, i || o.queue === !1 ? this.each(a) : this.queue(o.queue, a)\n        }, stop: function (e, n, r) {\n            var i = function (e) {\n                var t = e.stop;\n                delete e.stop, t(r)\n            };\n            return"string" != typeof e && (r = n, n = e, e = t), n && e !== !1 && this.queue(e || "fx", []), this.each(function () {\n                var t = !0, n = null != e && e + "queueHooks", o = x.timers, a = x._data(this);\n                if (n)\n                    a[n] && a[n].stop && i(a[n]);\n                else\n                    for (n in a)\n                        a[n] && a[n].stop && Jn.test(n) && i(a[n]);\n                for (n = o.length; n--; )\n                    o[n].elem !== this || null != e && o[n].queue !== e || (o[n].anim.stop(r), t = !1, o.splice(n, 1));\n                (t || !r) && x.dequeue(this, e)\n            })\n        }, finish: function (e) {\n            return e !== !1 && (e = e || "fx"), this.each(function () {\n                var t, n = x._data(this), r = n[e + "queue"], i = n[e + "queueHooks"], o = x.timers, a = r ? r.length : 0;\n                for (n.finish = !0, x.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--; )\n                    o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));\n                for (t = 0; a > t; t++)\n                    r[t] && r[t].finish && r[t].finish.call(this);\n                delete n.finish\n            })\n        }});\n    function ir(e, t) {\n        var n, r = {height: e}, i = 0;\n        for (t = t?1:0; 4 > i; i += 2 - t)\n            n = Zt[i], r["margin" + n] = r["padding" + n] = e;\n        return t && (r.opacity = r.width = e), r\n    }\n    x.each({slideDown: ir("show"), slideUp: ir("hide"), slideToggle: ir("toggle"), fadeIn: {opacity: "show"}, fadeOut: {opacity: "hide"}, fadeToggle: {opacity: "toggle"}}, function (e, t) {\n        x.fn[e] = function (e, n, r) {\n            return this.animate(t, e, n, r)\n        }\n    }), x.speed = function (e, t, n) {\n        var r = e && "object" == typeof e ? x.extend({}, e) : {complete: n || !n && t || x.isFunction(e) && e, duration: e, easing: n && t || t && !x.isFunction(t) && t};\n        return r.duration = x.fx.off ? 0 : "number" == typeof r.duration ? r.duration : r.duration in x.fx.speeds ? x.fx.speeds[r.duration] : x.fx.speeds._default, (null == r.queue || r.queue === !0) && (r.queue = "fx"), r.old = r.complete, r.complete = function () {\n            x.isFunction(r.old) && r.old.call(this), r.queue && x.dequeue(this, r.queue)\n        }, r\n    }, x.easing = {linear: function (e) {\n            return e\n        }, swing: function (e) {\n            return.5 - Math.cos(e * Math.PI) / 2\n        }}, x.timers = [], x.fx = rr.prototype.init, x.fx.tick = function () {\n        var e, n = x.timers, r = 0;\n        for (Xn = x.now(); n.length > r; r++)\n            e = n[r], e() || n[r] !== e || n.splice(r--, 1);\n        n.length || x.fx.stop(), Xn = t\n    }, x.fx.timer = function (e) {\n        e() && x.timers.push(e) && x.fx.start()\n    }, x.fx.interval = 13, x.fx.start = function () {\n        Un || (Un = setInterval(x.fx.tick, x.fx.interval))\n    }, x.fx.stop = function () {\n        clearInterval(Un), Un = null\n    }, x.fx.speeds = {slow: 600, fast: 200, _default: 400}, x.fx.step = {}, x.expr && x.expr.filters && (x.expr.filters.animated = function (e) {\n        return x.grep(x.timers, function (t) {\n            return e === t.elem\n        }).length\n    }), x.fn.offset = function (e) {\n        if (arguments.length)\n            return e === t ? this : this.each(function (t) {\n                x.offset.setOffset(this, e, t)\n            });\n        var n, r, o = {top: 0, left: 0}, a = this[0], s = a && a.ownerDocument;\n        if (s)\n            return n = s.documentElement, x.contains(n, a) ? (typeof a.getBoundingClientRect !== i && (o = a.getBoundingClientRect()), r = or(s), {top: o.top + (r.pageYOffset || n.scrollTop) - (n.clientTop || 0), left: o.left + (r.pageXOffset || n.scrollLeft) - (n.clientLeft || 0)}) : o\n    }, x.offset = {setOffset: function (e, t, n) {\n            var r = x.css(e, "position");\n            "static" === r && (e.style.position = "relative");\n            var i = x(e), o = i.offset(), a = x.css(e, "top"), s = x.css(e, "left"), l = ("absolute" === r || "fixed" === r) && x.inArray("auto", [a, s]) > -1, u = {}, c = {}, p, f;\n            l ? (c = i.position(), p = c.top, f = c.left) : (p = parseFloat(a) || 0, f = parseFloat(s) || 0), x.isFunction(t) && (t = t.call(e, n, o)), null != t.top && (u.top = t.top - o.top + p), null != t.left && (u.left = t.left - o.left + f), "using"in t ? t.using.call(e, u) : i.css(u)\n        }}, x.fn.extend({position: function () {\n            if (this[0]) {\n                var e, t, n = {top: 0, left: 0}, r = this[0];\n                return"fixed" === x.css(r, "position") ? t = r.getBoundingClientRect() : (e = this.offsetParent(), t = this.offset(), x.nodeName(e[0], "html") || (n = e.offset()), n.top += x.css(e[0], "borderTopWidth", !0), n.left += x.css(e[0], "borderLeftWidth", !0)), {top: t.top - n.top - x.css(r, "marginTop", !0), left: t.left - n.left - x.css(r, "marginLeft", !0)}\n            }\n        }, offsetParent: function () {\n            return this.map(function () {\n                var e = this.offsetParent || s;\n                while (e && !x.nodeName(e, "html") && "static" === x.css(e, "position"))\n                    e = e.offsetParent;\n                return e || s\n            })\n        }}), x.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function (e, n) {\n        var r = /Y/.test(n);\n        x.fn[e] = function (i) {\n            return x.access(this, function (e, i, o) {\n                var a = or(e);\n                return o === t ? a ? n in a ? a[n] : a.document.documentElement[i] : e[i] : (a ? a.scrollTo(r ? x(a).scrollLeft() : o, r ? o : x(a).scrollTop()) : e[i] = o, t)\n            }, e, i, arguments.length, null)\n        }\n    });\n    function or(e) {\n        return x.isWindow(e) ? e : 9 === e.nodeType ? e.defaultView || e.parentWindow : !1\n    }\n    x.each({Height: "height", Width: "width"}, function (e, n) {\n        x.each({padding: "inner" + e, content: n, "": "outer" + e}, function (r, i) {\n            x.fn[i] = function (i, o) {\n                var a = arguments.length && (r || "boolean" != typeof i), s = r || (i === !0 || o === !0 ? "margin" : "border");\n                return x.access(this, function (n, r, i) {\n                    var o;\n                    return x.isWindow(n) ? n.document.documentElement["client" + e] : 9 === n.nodeType ? (o = n.documentElement, Math.max(n.body["scroll" + e], o["scroll" + e], n.body["offset" + e], o["offset" + e], o["client" + e])) : i === t ? x.css(n, r, s) : x.style(n, r, i, s)\n                }, n, a ? i : t, a, null)\n            }\n        })\n    }), x.fn.size = function () {\n        return this.length\n    }, x.fn.andSelf = x.fn.addBack, "object" == typeof module && module && "object" == typeof module.exports ? module.exports = x : (e.jQuery = e.$ = x, "function" == "function" && __webpack_require__(4) && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n        return x\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)))\n})(window);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.6.0\n//     http://underscorejs.org\n//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function () {\n\n    // Baseline setup\n    // --------------\n\n    // Establish the root object, `window` in the browser, or `exports` on the server.\n    var root = this;\n\n    // Save the previous value of the `_` variable.\n    var previousUnderscore = root._;\n\n    // Establish the object that gets returned to break out of a loop iteration.\n    var breaker = {};\n\n    // Save bytes in the minified (but not gzipped) version:\n    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n    // Create quick reference variables for speed access to core prototypes.\n    var\n        push = ArrayProto.push,\n        slice = ArrayProto.slice,\n        concat = ArrayProto.concat,\n        toString = ObjProto.toString,\n        hasOwnProperty = ObjProto.hasOwnProperty;\n\n    // All **ECMAScript 5** native function implementations that we hope to use\n    // are declared here.\n    var\n        nativeForEach = ArrayProto.forEach,\n        nativeMap = ArrayProto.map,\n        nativeReduce = ArrayProto.reduce,\n        nativeReduceRight = ArrayProto.reduceRight,\n        nativeFilter = ArrayProto.filter,\n        nativeEvery = ArrayProto.every,\n        nativeSome = ArrayProto.some,\n        nativeIndexOf = ArrayProto.indexOf,\n        nativeLastIndexOf = ArrayProto.lastIndexOf,\n        nativeIsArray = Array.isArray,\n        nativeKeys = Object.keys,\n        nativeBind = FuncProto.bind;\n\n    // Create a safe reference to the Underscore object for use below.\n    var _ = function (obj) {\n        if (obj instanceof _)\n            return obj;\n        if (!(this instanceof _))\n            return new _(obj);\n        this._wrapped = obj;\n    };\n\n    // Export the Underscore object for **Node.js**, with\n    // backwards-compatibility for the old `require()` API. If we're in\n    // the browser, add `_` as a global object via a string identifier,\n    // for Closure Compiler \"advanced\" mode.\n    if (true) {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = _;\n        }\n        exports._ = _;\n    } else {\n        root._ = _;\n    }\n\n    // Current version.\n    _.VERSION = '1.6.0';\n\n    // Collection Functions\n    // --------------------\n\n    // The cornerstone, an `each` implementation, aka `forEach`.\n    // Handles objects with the built-in `forEach`, arrays, and raw objects.\n    // Delegates to **ECMAScript 5**'s native `forEach` if available.\n    var each = _.each = _.forEach = function (obj, iterator, context) {\n        if (obj == null)\n            return obj;\n        if (nativeForEach && obj.forEach === nativeForEach) {\n            obj.forEach(iterator, context);\n        } else if (obj.length === +obj.length) {\n            for (var i = 0, length = obj.length; i < length; i++) {\n                if (iterator.call(context, obj[i], i, obj) === breaker)\n                    return;\n            }\n        } else {\n            var keys = _.keys(obj);\n            for (var i = 0, length = keys.length; i < length; i++) {\n                if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)\n                    return;\n            }\n        }\n        return obj;\n    };\n\n    // Return the results of applying the iterator to each element.\n    // Delegates to **ECMAScript 5**'s native `map` if available.\n    _.map = _.collect = function (obj, iterator, context) {\n        var results = [];\n        if (obj == null)\n            return results;\n        if (nativeMap && obj.map === nativeMap)\n            return obj.map(iterator, context);\n        each(obj, function (value, index, list) {\n            results.push(iterator.call(context, value, index, list));\n        });\n        return results;\n    };\n\n    var reduceError = 'Reduce of empty array with no initial value';\n\n    // **Reduce** builds up a single result from a list of values, aka `inject`,\n    // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n    _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {\n        var initial = arguments.length > 2;\n        if (obj == null)\n            obj = [];\n        if (nativeReduce && obj.reduce === nativeReduce) {\n            if (context)\n                iterator = _.bind(iterator, context);\n            return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n        }\n        each(obj, function (value, index, list) {\n            if (!initial) {\n                memo = value;\n                initial = true;\n            } else {\n                memo = iterator.call(context, memo, value, index, list);\n            }\n        });\n        if (!initial)\n            throw new TypeError(reduceError);\n        return memo;\n    };\n\n    // The right-associative version of reduce, also known as `foldr`.\n    // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n    _.reduceRight = _.foldr = function (obj, iterator, memo, context) {\n        var initial = arguments.length > 2;\n        if (obj == null)\n            obj = [];\n        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n            if (context)\n                iterator = _.bind(iterator, context);\n            return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n        }\n        var length = obj.length;\n        if (length !== +length) {\n            var keys = _.keys(obj);\n            length = keys.length;\n        }\n        each(obj, function (value, index, list) {\n            index = keys ? keys[--length] : --length;\n            if (!initial) {\n                memo = obj[index];\n                initial = true;\n            } else {\n                memo = iterator.call(context, memo, obj[index], index, list);\n            }\n        });\n        if (!initial)\n            throw new TypeError(reduceError);\n        return memo;\n    };\n\n    // Return the first value which passes a truth test. Aliased as `detect`.\n    _.find = _.detect = function (obj, predicate, context) {\n        var result;\n        any(obj, function (value, index, list) {\n            if (predicate.call(context, value, index, list)) {\n                result = value;\n                return true;\n            }\n        });\n        return result;\n    };\n\n    // Return all the elements that pass a truth test.\n    // Delegates to **ECMAScript 5**'s native `filter` if available.\n    // Aliased as `select`.\n    _.filter = _.select = function (obj, predicate, context) {\n        var results = [];\n        if (obj == null)\n            return results;\n        if (nativeFilter && obj.filter === nativeFilter)\n            return obj.filter(predicate, context);\n        each(obj, function (value, index, list) {\n            if (predicate.call(context, value, index, list))\n                results.push(value);\n        });\n        return results;\n    };\n\n    // Return all the elements for which a truth test fails.\n    _.reject = function (obj, predicate, context) {\n        return _.filter(obj, function (value, index, list) {\n            return !predicate.call(context, value, index, list);\n        }, context);\n    };\n\n    // Determine whether all of the elements match a truth test.\n    // Delegates to **ECMAScript 5**'s native `every` if available.\n    // Aliased as `all`.\n    _.every = _.all = function (obj, predicate, context) {\n        predicate || (predicate = _.identity);\n        var result = true;\n        if (obj == null)\n            return result;\n        if (nativeEvery && obj.every === nativeEvery)\n            return obj.every(predicate, context);\n        each(obj, function (value, index, list) {\n            if (!(result = result && predicate.call(context, value, index, list)))\n                return breaker;\n        });\n        return !!result;\n    };\n\n    // Determine if at least one element in the object matches a truth test.\n    // Delegates to **ECMAScript 5**'s native `some` if available.\n    // Aliased as `any`.\n    var any = _.some = _.any = function (obj, predicate, context) {\n        predicate || (predicate = _.identity);\n        var result = false;\n        if (obj == null)\n            return result;\n        if (nativeSome && obj.some === nativeSome)\n            return obj.some(predicate, context);\n        each(obj, function (value, index, list) {\n            if (result || (result = predicate.call(context, value, index, list)))\n                return breaker;\n        });\n        return !!result;\n    };\n\n    // Determine if the array or object contains a given value (using `===`).\n    // Aliased as `include`.\n    _.contains = _.include = function (obj, target) {\n        if (obj == null)\n            return false;\n        if (nativeIndexOf && obj.indexOf === nativeIndexOf)\n            return obj.indexOf(target) != -1;\n        return any(obj, function (value) {\n            return value === target;\n        });\n    };\n\n    // Invoke a method (with arguments) on every item in a collection.\n    _.invoke = function (obj, method) {\n        var args = slice.call(arguments, 2);\n        var isFunc = _.isFunction(method);\n        return _.map(obj, function (value) {\n            return (isFunc ? method : value[method]).apply(value, args);\n        });\n    };\n\n    // Convenience version of a common use case of `map`: fetching a property.\n    _.pluck = function (obj, key) {\n        return _.map(obj, _.property(key));\n    };\n\n    // Convenience version of a common use case of `filter`: selecting only objects\n    // containing specific `key:value` pairs.\n    _.where = function (obj, attrs) {\n        return _.filter(obj, _.matches(attrs));\n    };\n\n    // Convenience version of a common use case of `find`: getting the first object\n    // containing specific `key:value` pairs.\n    _.findWhere = function (obj, attrs) {\n        return _.find(obj, _.matches(attrs));\n    };\n\n    // Return the maximum element or (element-based computation).\n    // Can't optimize arrays of integers longer than 65,535 elements.\n    // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)\n    _.max = function (obj, iterator, context) {\n        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n            return Math.max.apply(Math, obj);\n        }\n        var result = -Infinity, lastComputed = -Infinity;\n        each(obj, function (value, index, list) {\n            var computed = iterator ? iterator.call(context, value, index, list) : value;\n            if (computed > lastComputed) {\n                result = value;\n                lastComputed = computed;\n            }\n        });\n        return result;\n    };\n\n    // Return the minimum element (or element-based computation).\n    _.min = function (obj, iterator, context) {\n        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {\n            return Math.min.apply(Math, obj);\n        }\n        var result = Infinity, lastComputed = Infinity;\n        each(obj, function (value, index, list) {\n            var computed = iterator ? iterator.call(context, value, index, list) : value;\n            if (computed < lastComputed) {\n                result = value;\n                lastComputed = computed;\n            }\n        });\n        return result;\n    };\n\n    // Shuffle an array, using the modern version of the\n    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n    _.shuffle = function (obj) {\n        var rand;\n        var index = 0;\n        var shuffled = [];\n        each(obj, function (value) {\n            rand = _.random(index++);\n            shuffled[index - 1] = shuffled[rand];\n            shuffled[rand] = value;\n        });\n        return shuffled;\n    };\n\n    // Sample **n** random values from a collection.\n    // If **n** is not specified, returns a single random element.\n    // The internal `guard` argument allows it to work with `map`.\n    _.sample = function (obj, n, guard) {\n        if (n == null || guard) {\n            if (obj.length !== +obj.length)\n                obj = _.values(obj);\n            return obj[_.random(obj.length - 1)];\n        }\n        return _.shuffle(obj).slice(0, Math.max(0, n));\n    };\n\n    // An internal function to generate lookup iterators.\n    var lookupIterator = function (value) {\n        if (value == null)\n            return _.identity;\n        if (_.isFunction(value))\n            return value;\n        return _.property(value);\n    };\n\n    // Sort the object's values by a criterion produced by an iterator.\n    _.sortBy = function (obj, iterator, context) {\n        iterator = lookupIterator(iterator);\n        return _.pluck(_.map(obj, function (value, index, list) {\n            return {\n                value: value,\n                index: index,\n                criteria: iterator.call(context, value, index, list)\n            };\n        }).sort(function (left, right) {\n            var a = left.criteria;\n            var b = right.criteria;\n            if (a !== b) {\n                if (a > b || a === void 0)\n                    return 1;\n                if (a < b || b === void 0)\n                    return -1;\n            }\n            return left.index - right.index;\n        }), 'value');\n    };\n\n    // An internal function used for aggregate \"group by\" operations.\n    var group = function (behavior) {\n        return function (obj, iterator, context) {\n            var result = {};\n            iterator = lookupIterator(iterator);\n            each(obj, function (value, index) {\n                var key = iterator.call(context, value, index, obj);\n                behavior(result, key, value);\n            });\n            return result;\n        };\n    };\n\n    // Groups the object's values by a criterion. Pass either a string attribute\n    // to group by, or a function that returns the criterion.\n    _.groupBy = group(function (result, key, value) {\n        _.has(result, key) ? result[key].push(value) : result[key] = [value];\n    });\n\n    // Indexes the object's values by a criterion, similar to `groupBy`, but for\n    // when you know that your index values will be unique.\n    _.indexBy = group(function (result, key, value) {\n        result[key] = value;\n    });\n\n    // Counts instances of an object that group by a certain criterion. Pass\n    // either a string attribute to count by, or a function that returns the\n    // criterion.\n    _.countBy = group(function (result, key) {\n        _.has(result, key) ? result[key]++ : result[key] = 1;\n    });\n\n    // Use a comparator function to figure out the smallest index at which\n    // an object should be inserted so as to maintain order. Uses binary search.\n    _.sortedIndex = function (array, obj, iterator, context) {\n        iterator = lookupIterator(iterator);\n        var value = iterator.call(context, obj);\n        var low = 0, high = array.length;\n        while (low < high) {\n            var mid = (low + high) >>> 1;\n            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;\n        }\n        return low;\n    };\n\n    // Safely create a real, live array from anything iterable.\n    _.toArray = function (obj) {\n        if (!obj)\n            return [];\n        if (_.isArray(obj))\n            return slice.call(obj);\n        if (obj.length === +obj.length)\n            return _.map(obj, _.identity);\n        return _.values(obj);\n    };\n\n    // Return the number of elements in an object.\n    _.size = function (obj) {\n        if (obj == null)\n            return 0;\n        return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;\n    };\n\n    // Array Functions\n    // ---------------\n\n    // Get the first element of an array. Passing **n** will return the first N\n    // values in the array. Aliased as `head` and `take`. The **guard** check\n    // allows it to work with `_.map`.\n    _.first = _.head = _.take = function (array, n, guard) {\n        if (array == null)\n            return void 0;\n        if ((n == null) || guard)\n            return array[0];\n        if (n < 0)\n            return [];\n        return slice.call(array, 0, n);\n    };\n\n    // Returns everything but the last entry of the array. Especially useful on\n    // the arguments object. Passing **n** will return all the values in\n    // the array, excluding the last N. The **guard** check allows it to work with\n    // `_.map`.\n    _.initial = function (array, n, guard) {\n        return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n    };\n\n    // Get the last element of an array. Passing **n** will return the last N\n    // values in the array. The **guard** check allows it to work with `_.map`.\n    _.last = function (array, n, guard) {\n        if (array == null)\n            return void 0;\n        if ((n == null) || guard)\n            return array[array.length - 1];\n        return slice.call(array, Math.max(array.length - n, 0));\n    };\n\n    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n    // Especially useful on the arguments object. Passing an **n** will return\n    // the rest N values in the array. The **guard**\n    // check allows it to work with `_.map`.\n    _.rest = _.tail = _.drop = function (array, n, guard) {\n        return slice.call(array, (n == null) || guard ? 1 : n);\n    };\n\n    // Trim out all falsy values from an array.\n    _.compact = function (array) {\n        return _.filter(array, _.identity);\n    };\n\n    // Internal implementation of a recursive `flatten` function.\n    var flatten = function (input, shallow, output) {\n        if (shallow && _.every(input, _.isArray)) {\n            return concat.apply(output, input);\n        }\n        each(input, function (value) {\n            if (_.isArray(value) || _.isArguments(value)) {\n                shallow ? push.apply(output, value) : flatten(value, shallow, output);\n            } else {\n                output.push(value);\n            }\n        });\n        return output;\n    };\n\n    // Flatten out an array, either recursively (by default), or just one level.\n    _.flatten = function (array, shallow) {\n        return flatten(array, shallow, []);\n    };\n\n    // Return a version of the array that does not contain the specified value(s).\n    _.without = function (array) {\n        return _.difference(array, slice.call(arguments, 1));\n    };\n\n    // Split an array into two arrays: one whose elements all satisfy the given\n    // predicate, and one whose elements all do not satisfy the predicate.\n    _.partition = function (array, predicate) {\n        var pass = [], fail = [];\n        each(array, function (elem) {\n            (predicate(elem) ? pass : fail).push(elem);\n        });\n        return [pass, fail];\n    };\n\n    // Produce a duplicate-free version of the array. If the array has already\n    // been sorted, you have the option of using a faster algorithm.\n    // Aliased as `unique`.\n    _.uniq = _.unique = function (array, isSorted, iterator, context) {\n        if (_.isFunction(isSorted)) {\n            context = iterator;\n            iterator = isSorted;\n            isSorted = false;\n        }\n        var initial = iterator ? _.map(array, iterator, context) : array;\n        var results = [];\n        var seen = [];\n        each(initial, function (value, index) {\n            if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {\n                seen.push(value);\n                results.push(array[index]);\n            }\n        });\n        return results;\n    };\n\n    // Produce an array that contains the union: each distinct element from all of\n    // the passed-in arrays.\n    _.union = function () {\n        return _.uniq(_.flatten(arguments, true));\n    };\n\n    // Produce an array that contains every item shared between all the\n    // passed-in arrays.\n    _.intersection = function (array) {\n        var rest = slice.call(arguments, 1);\n        return _.filter(_.uniq(array), function (item) {\n            return _.every(rest, function (other) {\n                return _.contains(other, item);\n            });\n        });\n    };\n\n    // Take the difference between one array and a number of other arrays.\n    // Only the elements present in just the first array will remain.\n    _.difference = function (array) {\n        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));\n        return _.filter(array, function (value) {\n            return !_.contains(rest, value);\n        });\n    };\n\n    // Zip together multiple lists into a single array -- elements that share\n    // an index go together.\n    _.zip = function () {\n        var length = _.max(_.pluck(arguments, 'length').concat(0));\n        var results = new Array(length);\n        for (var i = 0; i < length; i++) {\n            results[i] = _.pluck(arguments, '' + i);\n        }\n        return results;\n    };\n\n    // Converts lists into objects. Pass either a single array of `[key, value]`\n    // pairs, or two parallel arrays of the same length -- one of keys, and one of\n    // the corresponding values.\n    _.object = function (list, values) {\n        if (list == null)\n            return {};\n        var result = {};\n        for (var i = 0, length = list.length; i < length; i++) {\n            if (values) {\n                result[list[i]] = values[i];\n            } else {\n                result[list[i][0]] = list[i][1];\n            }\n        }\n        return result;\n    };\n\n    // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n    // we need this function. Return the position of the first occurrence of an\n    // item in an array, or -1 if the item is not included in the array.\n    // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n    // If the array is large and already in sort order, pass `true`\n    // for **isSorted** to use binary search.\n    _.indexOf = function (array, item, isSorted) {\n        if (array == null)\n            return -1;\n        var i = 0, length = array.length;\n        if (isSorted) {\n            if (typeof isSorted == 'number') {\n                i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);\n            } else {\n                i = _.sortedIndex(array, item);\n                return array[i] === item ? i : -1;\n            }\n        }\n        if (nativeIndexOf && array.indexOf === nativeIndexOf)\n            return array.indexOf(item, isSorted);\n        for (; i < length; i++)\n            if (array[i] === item)\n                return i;\n        return -1;\n    };\n\n    // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n    _.lastIndexOf = function (array, item, from) {\n        if (array == null)\n            return -1;\n        var hasIndex = from != null;\n        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {\n            return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);\n        }\n        var i = (hasIndex ? from : array.length);\n        while (i--)\n            if (array[i] === item)\n                return i;\n        return -1;\n    };\n\n    // Generate an integer Array containing an arithmetic progression. A port of\n    // the native Python `range()` function. See\n    // [the Python documentation](http://docs.python.org/library/functions.html#range).\n    _.range = function (start, stop, step) {\n        if (arguments.length <= 1) {\n            stop = start || 0;\n            start = 0;\n        }\n        step = arguments[2] || 1;\n\n        var length = Math.max(Math.ceil((stop - start) / step), 0);\n        var idx = 0;\n        var range = new Array(length);\n\n        while (idx < length) {\n            range[idx++] = start;\n            start += step;\n        }\n\n        return range;\n    };\n\n    // Function (ahem) Functions\n    // ------------------\n\n    // Reusable constructor function for prototype setting.\n    var ctor = function () {\n    };\n\n    // Create a function bound to a given object (assigning `this`, and arguments,\n    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n    // available.\n    _.bind = function (func, context) {\n        var args, bound;\n        if (nativeBind && func.bind === nativeBind)\n            return nativeBind.apply(func, slice.call(arguments, 1));\n        if (!_.isFunction(func))\n            throw new TypeError;\n        args = slice.call(arguments, 2);\n        return bound = function () {\n            if (!(this instanceof bound))\n                return func.apply(context, args.concat(slice.call(arguments)));\n            ctor.prototype = func.prototype;\n            var self = new ctor;\n            ctor.prototype = null;\n            var result = func.apply(self, args.concat(slice.call(arguments)));\n            if (Object(result) === result)\n                return result;\n            return self;\n        };\n    };\n\n    // Partially apply a function by creating a version that has had some of its\n    // arguments pre-filled, without changing its dynamic `this` context. _ acts\n    // as a placeholder, allowing any combination of arguments to be pre-filled.\n    _.partial = function (func) {\n        var boundArgs = slice.call(arguments, 1);\n        return function () {\n            var position = 0;\n            var args = boundArgs.slice();\n            for (var i = 0, length = args.length; i < length; i++) {\n                if (args[i] === _)\n                    args[i] = arguments[position++];\n            }\n            while (position < arguments.length)\n                args.push(arguments[position++]);\n            return func.apply(this, args);\n        };\n    };\n\n    // Bind a number of an object's methods to that object. Remaining arguments\n    // are the method names to be bound. Useful for ensuring that all callbacks\n    // defined on an object belong to it.\n    _.bindAll = function (obj) {\n        var funcs = slice.call(arguments, 1);\n        if (funcs.length === 0)\n            throw new Error('bindAll must be passed function names');\n        each(funcs, function (f) {\n            obj[f] = _.bind(obj[f], obj);\n        });\n        return obj;\n    };\n\n    // Memoize an expensive function by storing its results.\n    _.memoize = function (func, hasher) {\n        var memo = {};\n        hasher || (hasher = _.identity);\n        return function () {\n            var key = hasher.apply(this, arguments);\n            return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n        };\n    };\n\n    // Delays a function for the given number of milliseconds, and then calls\n    // it with the arguments supplied.\n    _.delay = function (func, wait) {\n        var args = slice.call(arguments, 2);\n        return setTimeout(function () {\n            return func.apply(null, args);\n        }, wait);\n    };\n\n    // Defers a function, scheduling it to run after the current call stack has\n    // cleared.\n    _.defer = function (func) {\n        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n    };\n\n    // Returns a function, that, when invoked, will only be triggered at most once\n    // during a given window of time. Normally, the throttled function will run\n    // as much as it can, without ever going more than once per `wait` duration;\n    // but if you'd like to disable the execution on the leading edge, pass\n    // `{leading: false}`. To disable execution on the trailing edge, ditto.\n    _.throttle = function (func, wait, options) {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        options || (options = {});\n        var later = function () {\n            previous = options.leading === false ? 0 : _.now();\n            timeout = null;\n            result = func.apply(context, args);\n            context = args = null;\n        };\n        return function () {\n            var now = _.now();\n            if (!previous && options.leading === false)\n                previous = now;\n            var remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0) {\n                clearTimeout(timeout);\n                timeout = null;\n                previous = now;\n                result = func.apply(context, args);\n                context = args = null;\n            } else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n    };\n\n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    _.debounce = function (func, wait, immediate) {\n        var timeout, args, context, timestamp, result;\n\n        var later = function () {\n            var last = _.now() - timestamp;\n            if (last < wait) {\n                timeout = setTimeout(later, wait - last);\n            } else {\n                timeout = null;\n                if (!immediate) {\n                    result = func.apply(context, args);\n                    context = args = null;\n                }\n            }\n        };\n\n        return function () {\n            context = this;\n            args = arguments;\n            timestamp = _.now();\n            var callNow = immediate && !timeout;\n            if (!timeout) {\n                timeout = setTimeout(later, wait);\n            }\n            if (callNow) {\n                result = func.apply(context, args);\n                context = args = null;\n            }\n\n            return result;\n        };\n    };\n\n    // Returns a function that will be executed at most one time, no matter how\n    // often you call it. Useful for lazy initialization.\n    _.once = function (func) {\n        var ran = false, memo;\n        return function () {\n            if (ran)\n                return memo;\n            ran = true;\n            memo = func.apply(this, arguments);\n            func = null;\n            return memo;\n        };\n    };\n\n    // Returns the first function passed as an argument to the second,\n    // allowing you to adjust arguments, run code before and after, and\n    // conditionally execute the original function.\n    _.wrap = function (func, wrapper) {\n        return _.partial(wrapper, func);\n    };\n\n    // Returns a function that is the composition of a list of functions, each\n    // consuming the return value of the function that follows.\n    _.compose = function () {\n        var funcs = arguments;\n        return function () {\n            var args = arguments;\n            for (var i = funcs.length - 1; i >= 0; i--) {\n                args = [funcs[i].apply(this, args)];\n            }\n            return args[0];\n        };\n    };\n\n    // Returns a function that will only be executed after being called N times.\n    _.after = function (times, func) {\n        return function () {\n            if (--times < 1) {\n                return func.apply(this, arguments);\n            }\n        };\n    };\n\n    // Object Functions\n    // ----------------\n\n    // Retrieve the names of an object's properties.\n    // Delegates to **ECMAScript 5**'s native `Object.keys`\n    _.keys = function (obj) {\n        if (!_.isObject(obj))\n            return [];\n        if (nativeKeys)\n            return nativeKeys(obj);\n        var keys = [];\n        for (var key in obj)\n            if (_.has(obj, key))\n                keys.push(key);\n        return keys;\n    };\n\n    // Retrieve the values of an object's properties.\n    _.values = function (obj) {\n        var keys = _.keys(obj);\n        var length = keys.length;\n        var values = new Array(length);\n        for (var i = 0; i < length; i++) {\n            values[i] = obj[keys[i]];\n        }\n        return values;\n    };\n\n    // Convert an object into a list of `[key, value]` pairs.\n    _.pairs = function (obj) {\n        var keys = _.keys(obj);\n        var length = keys.length;\n        var pairs = new Array(length);\n        for (var i = 0; i < length; i++) {\n            pairs[i] = [keys[i], obj[keys[i]]];\n        }\n        return pairs;\n    };\n\n    // Invert the keys and values of an object. The values must be serializable.\n    _.invert = function (obj) {\n        var result = {};\n        var keys = _.keys(obj);\n        for (var i = 0, length = keys.length; i < length; i++) {\n            result[obj[keys[i]]] = keys[i];\n        }\n        return result;\n    };\n\n    // Return a sorted list of the function names available on the object.\n    // Aliased as `methods`\n    _.functions = _.methods = function (obj) {\n        var names = [];\n        for (var key in obj) {\n            if (_.isFunction(obj[key]))\n                names.push(key);\n        }\n        return names.sort();\n    };\n\n    // Extend a given object with all the properties in passed-in object(s).\n    _.extend = function (obj) {\n        each(slice.call(arguments, 1), function (source) {\n            if (source) {\n                for (var prop in source) {\n                    obj[prop] = source[prop];\n                }\n            }\n        });\n        return obj;\n    };\n\n    // Return a copy of the object only containing the whitelisted properties.\n    _.pick = function (obj) {\n        var copy = {};\n        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n        each(keys, function (key) {\n            if (key in obj)\n                copy[key] = obj[key];\n        });\n        return copy;\n    };\n\n    // Return a copy of the object without the blacklisted properties.\n    _.omit = function (obj) {\n        var copy = {};\n        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));\n        for (var key in obj) {\n            if (!_.contains(keys, key))\n                copy[key] = obj[key];\n        }\n        return copy;\n    };\n\n    // Fill in a given object with default properties.\n    _.defaults = function (obj) {\n        each(slice.call(arguments, 1), function (source) {\n            if (source) {\n                for (var prop in source) {\n                    if (obj[prop] === void 0)\n                        obj[prop] = source[prop];\n                }\n            }\n        });\n        return obj;\n    };\n\n    // Create a (shallow-cloned) duplicate of an object.\n    _.clone = function (obj) {\n        if (!_.isObject(obj))\n            return obj;\n        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n    };\n\n    // Invokes interceptor with the obj, and then returns obj.\n    // The primary purpose of this method is to \"tap into\" a method chain, in\n    // order to perform operations on intermediate results within the chain.\n    _.tap = function (obj, interceptor) {\n        interceptor(obj);\n        return obj;\n    };\n\n    // Internal recursive comparison function for `isEqual`.\n    var eq = function (a, b, aStack, bStack) {\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n        if (a === b)\n            return a !== 0 || 1 / a == 1 / b;\n        // A strict comparison is necessary because `null == undefined`.\n        if (a == null || b == null)\n            return a === b;\n        // Unwrap any wrapped objects.\n        if (a instanceof _)\n            a = a._wrapped;\n        if (b instanceof _)\n            b = b._wrapped;\n        // Compare `[[Class]]` names.\n        var className = toString.call(a);\n        if (className != toString.call(b))\n            return false;\n        switch (className) {\n            // Strings, numbers, dates, and booleans are compared by value.\n            case '[object String]':\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n                // equivalent to `new String(\"5\")`.\n                return a == String(b);\n            case '[object Number]':\n                // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n                // other numeric values.\n                return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n            case '[object Date]':\n            case '[object Boolean]':\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n                // millisecond representations. Note that invalid dates with millisecond representations\n                // of `NaN` are not equivalent.\n                return +a == +b;\n                // RegExps are compared by their source patterns and flags.\n            case '[object RegExp]':\n                return a.source == b.source &&\n                    a.global == b.global &&\n                    a.multiline == b.multiline &&\n                    a.ignoreCase == b.ignoreCase;\n        }\n        if (typeof a != 'object' || typeof b != 'object')\n            return false;\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n        var length = aStack.length;\n        while (length--) {\n            // Linear search. Performance is inversely proportional to the number of\n            // unique nested structures.\n            if (aStack[length] == a)\n                return bStack[length] == b;\n        }\n        // Objects with different constructors are not equivalent, but `Object`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&\n            _.isFunction(bCtor) && (bCtor instanceof bCtor))\n            && ('constructor' in a && 'constructor' in b)) {\n            return false;\n        }\n        // Add the first object to the stack of traversed objects.\n        aStack.push(a);\n        bStack.push(b);\n        var size = 0, result = true;\n        // Recursively compare objects and arrays.\n        if (className == '[object Array]') {\n            // Compare array lengths to determine if a deep comparison is necessary.\n            size = a.length;\n            result = size == b.length;\n            if (result) {\n                // Deep compare the contents, ignoring non-numeric properties.\n                while (size--) {\n                    if (!(result = eq(a[size], b[size], aStack, bStack)))\n                        break;\n                }\n            }\n        } else {\n            // Deep compare objects.\n            for (var key in a) {\n                if (_.has(a, key)) {\n                    // Count the expected number of properties.\n                    size++;\n                    // Deep compare each member.\n                    if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))\n                        break;\n                }\n            }\n            // Ensure that both objects contain the same number of properties.\n            if (result) {\n                for (key in b) {\n                    if (_.has(b, key) && !(size--))\n                        break;\n                }\n                result = !size;\n            }\n        }\n        // Remove the first object from the stack of traversed objects.\n        aStack.pop();\n        bStack.pop();\n        return result;\n    };\n\n    // Perform a deep comparison to check if two objects are equal.\n    _.isEqual = function (a, b) {\n        return eq(a, b, [], []);\n    };\n\n    // Is a given array, string, or object empty?\n    // An \"empty\" object has no enumerable own-properties.\n    _.isEmpty = function (obj) {\n        if (obj == null)\n            return true;\n        if (_.isArray(obj) || _.isString(obj))\n            return obj.length === 0;\n        for (var key in obj)\n            if (_.has(obj, key))\n                return false;\n        return true;\n    };\n\n    // Is a given value a DOM element?\n    _.isElement = function (obj) {\n        return !!(obj && obj.nodeType === 1);\n    };\n\n    // Is a given value an array?\n    // Delegates to ECMA5's native Array.isArray\n    _.isArray = nativeIsArray || function (obj) {\n        return toString.call(obj) == '[object Array]';\n    };\n\n    // Is a given variable an object?\n    _.isObject = function (obj) {\n        return obj === Object(obj);\n    };\n\n    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.\n    each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {\n        _['is' + name] = function (obj) {\n            return toString.call(obj) == '[object ' + name + ']';\n        };\n    });\n\n    // Define a fallback version of the method in browsers (ahem, IE), where\n    // there isn't any inspectable \"Arguments\" type.\n    if (!_.isArguments(arguments)) {\n        _.isArguments = function (obj) {\n            return !!(obj && _.has(obj, 'callee'));\n        };\n    }\n\n    // Optimize `isFunction` if appropriate.\n    if (true) {\n        _.isFunction = function (obj) {\n            return typeof obj === 'function';\n        };\n    }\n\n    // Is a given object a finite number?\n    _.isFinite = function (obj) {\n        return isFinite(obj) && !isNaN(parseFloat(obj));\n    };\n\n    // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n    _.isNaN = function (obj) {\n        return _.isNumber(obj) && obj != +obj;\n    };\n\n    // Is a given value a boolean?\n    _.isBoolean = function (obj) {\n        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n    };\n\n    // Is a given value equal to null?\n    _.isNull = function (obj) {\n        return obj === null;\n    };\n\n    // Is a given variable undefined?\n    _.isUndefined = function (obj) {\n        return obj === void 0;\n    };\n\n    // Shortcut function for checking if an object has a given property directly\n    // on itself (in other words, not on a prototype).\n    _.has = function (obj, key) {\n        return hasOwnProperty.call(obj, key);\n    };\n\n    // Utility Functions\n    // -----------------\n\n    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n    // previous owner. Returns a reference to the Underscore object.\n    _.noConflict = function () {\n        root._ = previousUnderscore;\n        return this;\n    };\n\n    // Keep the identity function around for default iterators.\n    _.identity = function (value) {\n        return value;\n    };\n\n    _.constant = function (value) {\n        return function () {\n            return value;\n        };\n    };\n\n    _.property = function (key) {\n        return function (obj) {\n            return obj[key];\n        };\n    };\n\n    // Returns a predicate for checking whether an object has a given set of `key:value` pairs.\n    _.matches = function (attrs) {\n        return function (obj) {\n            if (obj === attrs)\n                return true; //avoid comparing an object to itself.\n            for (var key in attrs) {\n                if (attrs[key] !== obj[key])\n                    return false;\n            }\n            return true;\n        }\n    };\n\n    // Run a function **n** times.\n    _.times = function (n, iterator, context) {\n        var accum = Array(Math.max(0, n));\n        for (var i = 0; i < n; i++)\n            accum[i] = iterator.call(context, i);\n        return accum;\n    };\n\n    // Return a random integer between min and max (inclusive).\n    _.random = function (min, max) {\n        if (max == null) {\n            max = min;\n            min = 0;\n        }\n        return min + Math.floor(Math.random() * (max - min + 1));\n    };\n\n    // A (possibly faster) way to get the current timestamp as an integer.\n    _.now = Date.now || function () {\n        return new Date().getTime();\n    };\n\n    // List of HTML entities for escaping.\n    var entityMap = {\n        escape: {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#x27;'\n        }\n    };\n    entityMap.unescape = _.invert(entityMap.escape);\n\n    // Regexes containing the keys and values listed immediately above.\n    var entityRegexes = {\n        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),\n        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')\n    };\n\n    // Functions for escaping and unescaping strings to/from HTML interpolation.\n    _.each(['escape', 'unescape'], function (method) {\n        _[method] = function (string) {\n            if (string == null)\n                return '';\n            return ('' + string).replace(entityRegexes[method], function (match) {\n                return entityMap[method][match];\n            });\n        };\n    });\n\n    // If the value of the named `property` is a function then invoke it with the\n    // `object` as context; otherwise, return it.\n    _.result = function (object, property) {\n        if (object == null)\n            return void 0;\n        var value = object[property];\n        return _.isFunction(value) ? value.call(object) : value;\n    };\n\n    // Add your own custom functions to the Underscore object.\n    _.mixin = function (obj) {\n        each(_.functions(obj), function (name) {\n            var func = _[name] = obj[name];\n            _.prototype[name] = function () {\n                var args = [this._wrapped];\n                push.apply(args, arguments);\n                return result.call(this, func.apply(_, args));\n            };\n        });\n    };\n\n    // Generate a unique integer id (unique within the entire client session).\n    // Useful for temporary DOM ids.\n    var idCounter = 0;\n    _.uniqueId = function (prefix) {\n        var id = ++idCounter + '';\n        return prefix ? prefix + id : id;\n    };\n\n    // By default, Underscore uses ERB-style template delimiters, change the\n    // following template settings to use alternative delimiters.\n    _.templateSettings = {\n        evaluate: /<%([\\s\\S]+?)%>/g,\n        interpolate: /<%=([\\s\\S]+?)%>/g,\n        escape: /<%-([\\s\\S]+?)%>/g\n    };\n\n    // When customizing `templateSettings`, if you don't want to define an\n    // interpolation, evaluation or escaping regex, we need one that is\n    // guaranteed not to match.\n    var noMatch = /(.)^/;\n\n    // Certain characters need to be escaped so that they can be put into a\n    // string literal.\n    var escapes = {\n        \"'\": \"'\",\n        '\\\\': '\\\\',\n        '\\r': 'r',\n        '\\n': 'n',\n        '\\t': 't',\n        '\\u2028': 'u2028',\n        '\\u2029': 'u2029'\n    };\n\n    var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n\n    // JavaScript micro-templating, similar to John Resig's implementation.\n    // Underscore templating handles arbitrary delimiters, preserves whitespace,\n    // and correctly escapes quotes within interpolated code.\n    _.template = function (text, data, settings) {\n        var render;\n        settings = _.defaults({}, settings, _.templateSettings);\n\n        // Combine delimiters into one regular expression via alternation.\n        var matcher = new RegExp([\n            (settings.escape || noMatch).source,\n            (settings.interpolate || noMatch).source,\n            (settings.evaluate || noMatch).source\n        ].join('|') + '|$', 'g');\n\n        // Compile the template source, escaping string literals appropriately.\n        var index = 0;\n        var source = \"__p+='\";\n        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {\n            source += text.slice(index, offset)\n                .replace(escaper, function (match) {\n                    return '\\\\' + escapes[match];\n                });\n\n            if (escape) {\n                source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n            }\n            if (interpolate) {\n                source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n            }\n            if (evaluate) {\n                source += \"';\\n\" + evaluate + \"\\n__p+='\";\n            }\n            index = offset + match.length;\n            return match;\n        });\n        source += \"';\\n\";\n\n        // If a variable is not specified, place data values in local scope.\n        if (!settings.variable)\n            source = 'with(obj||{}){\\n' + source + '}\\n';\n\n        source = \"var __t,__p='',__j=Array.prototype.join,\" +\n            \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n            source + \"return __p;\\n\";\n\n        try {\n            render = new Function(settings.variable || 'obj', '_', source);\n        } catch (e) {\n            e.source = source;\n            throw e;\n        }\n\n        if (data)\n            return render(data, _);\n        var template = function (data) {\n            return render.call(this, data, _);\n        };\n\n        // Provide the compiled function source as a convenience for precompilation.\n        template.source = 'function(' + (settings.variable || 'obj') + '){\\n' + source + '}';\n\n        return template;\n    };\n\n    // Add a \"chain\" function, which will delegate to the wrapper.\n    _.chain = function (obj) {\n        return _(obj).chain();\n    };\n\n    // OOP\n    // ---------------\n    // If Underscore is called as a function, it returns a wrapped object that\n    // can be used OO-style. This wrapper holds altered versions of all the\n    // underscore functions. Wrapped objects may be chained.\n\n    // Helper function to continue chaining intermediate results.\n    var result = function (obj) {\n        return this._chain ? _(obj).chain() : obj;\n    };\n\n    // Add all of the Underscore functions to the wrapper object.\n    _.mixin(_);\n\n    // Add all mutator Array functions to the wrapper.\n    each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n        var method = ArrayProto[name];\n        _.prototype[name] = function () {\n            var obj = this._wrapped;\n            method.apply(obj, arguments);\n            if ((name == 'shift' || name == 'splice') && obj.length === 0)\n                delete obj[0];\n            return result.call(this, obj);\n        };\n    });\n\n    // Add all accessor Array functions to the wrapper.\n    each(['concat', 'join', 'slice'], function (name) {\n        var method = ArrayProto[name];\n        _.prototype[name] = function () {\n            return result.call(this, method.apply(this._wrapped, arguments));\n        };\n    });\n\n    _.extend(_.prototype, {\n        // Start chaining a wrapped Underscore object.\n        chain: function () {\n            this._chain = true;\n            return this;\n        },\n        // Extracts the result from a wrapped and chained object.\n        value: function () {\n            return this._wrapped;\n        }\n\n    });\n\n    // AMD registration happens at the end for compatibility with AMD loaders\n    // that may not enforce next-turn semantics on modules. Even though general\n    // practice for AMD registration is to be anonymous, underscore registers\n    // as a named module because, like jQuery, it is a base library that is\n    // popular enough to be bundled in a third party lib, but not be part of\n    // an AMD load request. Those cases could generate an error when an\n    // anonymous define() is called outside of a loader request.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return _;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n}).call(this);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports){eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vfi93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzPzE3YTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9+L3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDJcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vfi93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/NjY4ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9+L3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qc1xuICoqIG1vZHVsZSBpZCA9IDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMlxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.1.2\n\n//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function (root, factory) {\n\n    // Set up Backbone appropriately for the environment. Start with AMD.\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(1), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, $, exports) {\n            // Export global even in AMD case in case this script is loaded with\n            // others that may still expect a global Backbone.\n            root.Backbone = factory(root, exports, _, $);\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n        // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n    } else if (typeof exports !== 'undefined') {\n        var _ = require('underscore');\n        factory(root, exports, _);\n\n        // Finally, as a browser global.\n    } else {\n        root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n    }\n\n}(this, function (root, Backbone, _, $) {\n\n    // Initial Setup\n    // -------------\n\n    // Save the previous value of the `Backbone` variable, so that it can be\n    // restored later on, if `noConflict` is used.\n    var previousBackbone = root.Backbone;\n\n    // Create local references to array methods we'll want to use later.\n    var array = [];\n    var push = array.push;\n    var slice = array.slice;\n    var splice = array.splice;\n\n    // Current version of the library. Keep in sync with `package.json`.\n    Backbone.VERSION = '1.1.2';\n\n    // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n    // the `$` variable.\n    Backbone.$ = $;\n\n    // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n    // to its previous owner. Returns a reference to this Backbone object.\n    Backbone.noConflict = function () {\n        root.Backbone = previousBackbone;\n        return this;\n    };\n\n    // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n    // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n    // set a `X-Http-Method-Override` header.\n    Backbone.emulateHTTP = false;\n\n    // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n    // `application/json` requests ... will encode the body as\n    // `application/x-www-form-urlencoded` instead and will send the model in a\n    // form param named `model`.\n    Backbone.emulateJSON = false;\n\n    // Backbone.Events\n    // ---------------\n\n    // A module that can be mixed in to *any object* in order to provide it with\n    // custom events. You may bind with `on` or remove with `off` callback\n    // functions to an event; `trigger`-ing an event fires all callbacks in\n    // succession.\n    //\n    //     var object = {};\n    //     _.extend(object, Backbone.Events);\n    //     object.on('expand', function(){ alert('expanded'); });\n    //     object.trigger('expand');\n    //\n    var Events = Backbone.Events = {\n        // Bind an event to a `callback` function. Passing `\"all\"` will bind\n        // the callback to all events fired.\n        on: function (name, callback, context) {\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback)\n                return this;\n            this._events || (this._events = {});\n            var events = this._events[name] || (this._events[name] = []);\n            events.push({callback: callback, context: context, ctx: context || this});\n            return this;\n        },\n        // Bind an event to only be triggered a single time. After the first time\n        // the callback is invoked, it will be removed.\n        once: function (name, callback, context) {\n            if (!eventsApi(this, 'once', name, [callback, context]) || !callback)\n                return this;\n            var self = this;\n            var once = _.once(function () {\n                self.off(name, once);\n                callback.apply(this, arguments);\n            });\n            once._callback = callback;\n            return this.on(name, once, context);\n        },\n        // Remove one or many callbacks. If `context` is null, removes all\n        // callbacks with that function. If `callback` is null, removes all\n        // callbacks for the event. If `name` is null, removes all bound\n        // callbacks for all events.\n        off: function (name, callback, context) {\n            var retain, ev, events, names, i, l, j, k;\n            if (!this._events || !eventsApi(this, 'off', name, [callback, context]))\n                return this;\n            if (!name && !callback && !context) {\n                this._events = void 0;\n                return this;\n            }\n            names = name ? [name] : _.keys(this._events);\n            for (i = 0, l = names.length; i < l; i++) {\n                name = names[i];\n                if (events = this._events[name]) {\n                    this._events[name] = retain = [];\n                    if (callback || context) {\n                        for (j = 0, k = events.length; j < k; j++) {\n                            ev = events[j];\n                            if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                                (context && context !== ev.context)) {\n                                retain.push(ev);\n                            }\n                        }\n                    }\n                    if (!retain.length)\n                        delete this._events[name];\n                }\n            }\n\n            return this;\n        },\n        // Trigger one or many events, firing all bound callbacks. Callbacks are\n        // passed the same arguments as `trigger` is, apart from the event name\n        // (unless you're listening on `\"all\"`, which will cause your callback to\n        // receive the true name of the event as the first argument).\n        trigger: function (name) {\n            if (!this._events)\n                return this;\n            var args = slice.call(arguments, 1);\n            if (!eventsApi(this, 'trigger', name, args))\n                return this;\n            var events = this._events[name];\n            var allEvents = this._events.all;\n            if (events)\n                triggerEvents(events, args);\n            if (allEvents)\n                triggerEvents(allEvents, arguments);\n            return this;\n        },\n        // Tell this object to stop listening to either specific events ... or\n        // to every object it's currently listening to.\n        stopListening: function (obj, name, callback) {\n            var listeningTo = this._listeningTo;\n            if (!listeningTo)\n                return this;\n            var remove = !name && !callback;\n            if (!callback && typeof name === 'object')\n                callback = this;\n            if (obj)\n                (listeningTo = {})[obj._listenId] = obj;\n            for (var id in listeningTo) {\n                obj = listeningTo[id];\n                obj.off(name, callback, this);\n                if (remove || _.isEmpty(obj._events))\n                    delete this._listeningTo[id];\n            }\n            return this;\n        }\n\n    };\n\n    // Regular expression used to split event strings.\n    var eventSplitter = /\\s+/;\n\n    // Implement fancy features of the Events API such as multiple event\n    // names `\"change blur\"` and jQuery-style event maps `{change: action}`\n    // in terms of the existing API.\n    var eventsApi = function (obj, action, name, rest) {\n        if (!name)\n            return true;\n\n        // Handle event maps.\n        if (typeof name === 'object') {\n            for (var key in name) {\n                obj[action].apply(obj, [key, name[key]].concat(rest));\n            }\n            return false;\n        }\n\n        // Handle space separated event names.\n        if (eventSplitter.test(name)) {\n            var names = name.split(eventSplitter);\n            for (var i = 0, l = names.length; i < l; i++) {\n                obj[action].apply(obj, [names[i]].concat(rest));\n            }\n            return false;\n        }\n\n        return true;\n    };\n\n    // A difficult-to-believe, but optimized internal dispatch function for\n    // triggering events. Tries to keep the usual cases speedy (most internal\n    // Backbone events have 3 arguments).\n    var triggerEvents = function (events, args) {\n        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n        switch (args.length) {\n            case 0:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx);\n                return;\n            case 1:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx, a1);\n                return;\n            case 2:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx, a1, a2);\n                return;\n            case 3:\n                while (++i < l)\n                    (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n                return;\n            default:\n                while (++i < l)\n                    (ev = events[i]).callback.apply(ev.ctx, args);\n                return;\n        }\n    };\n\n    var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n    // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n    // listen to an event in another object ... keeping track of what it's\n    // listening to.\n    _.each(listenMethods, function (implementation, method) {\n        Events[method] = function (obj, name, callback) {\n            var listeningTo = this._listeningTo || (this._listeningTo = {});\n            var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n            listeningTo[id] = obj;\n            if (!callback && typeof name === 'object')\n                callback = this;\n            obj[implementation](name, callback, this);\n            return this;\n        };\n    });\n\n    // Aliases for backwards compatibility.\n    Events.bind = Events.on;\n    Events.unbind = Events.off;\n\n    // Allow the `Backbone` object to serve as a global event bus, for folks who\n    // want global \"pubsub\" in a convenient place.\n    _.extend(Backbone, Events);\n\n    // Backbone.Model\n    // --------------\n\n    // Backbone **Models** are the basic data object in the framework --\n    // frequently representing a row in a table in a database on your server.\n    // A discrete chunk of data and a bunch of useful, related methods for\n    // performing computations and transformations on that data.\n\n    // Create a new model with the specified attributes. A client id (`cid`)\n    // is automatically generated and assigned for you.\n    var Model = Backbone.Model = function (attributes, options) {\n        var attrs = attributes || {};\n        options || (options = {});\n        this.cid = _.uniqueId('c');\n        this.attributes = {};\n        if (options.collection)\n            this.collection = options.collection;\n        if (options.parse)\n            attrs = this.parse(attrs, options) || {};\n        attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n        this.set(attrs, options);\n        this.changed = {};\n        this.initialize.apply(this, arguments);\n    };\n\n    // Attach all inheritable methods to the Model prototype.\n    _.extend(Model.prototype, Events, {\n        // A hash of attributes whose current and previous value differ.\n        changed: null,\n        // The value returned during the last failed validation.\n        validationError: null,\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n        // CouchDB users may want to set this to `\"_id\"`.\n        idAttribute: 'id',\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // Return a copy of the model's `attributes` object.\n        toJSON: function (options) {\n            return _.clone(this.attributes);\n        },\n        // Proxy `Backbone.sync` by default -- but override this if you need\n        // custom syncing semantics for *this* particular model.\n        sync: function () {\n            return Backbone.sync.apply(this, arguments);\n        },\n        // Get the value of an attribute.\n        get: function (attr) {\n            return this.attributes[attr];\n        },\n        // Get the HTML-escaped value of an attribute.\n        escape: function (attr) {\n            return _.escape(this.get(attr));\n        },\n        // Returns `true` if the attribute contains a value that is not null\n        // or undefined.\n        has: function (attr) {\n            return this.get(attr) != null;\n        },\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\n        // the core primitive operation of a model, updating the data and notifying\n        // anyone who needs to know about the change in state. The heart of the beast.\n        set: function (key, val, options) {\n            var attr, attrs, unset, changes, silent, changing, prev, current;\n            if (key == null)\n                return this;\n\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            if (typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n\n            options || (options = {});\n\n            // Run validation.\n            if (!this._validate(attrs, options))\n                return false;\n\n            // Extract attributes and options.\n            unset = options.unset;\n            silent = options.silent;\n            changes = [];\n            changing = this._changing;\n            this._changing = true;\n\n            if (!changing) {\n                this._previousAttributes = _.clone(this.attributes);\n                this.changed = {};\n            }\n            current = this.attributes, prev = this._previousAttributes;\n\n            // Check for changes of `id`.\n            if (this.idAttribute in attrs)\n                this.id = attrs[this.idAttribute];\n\n            // For each `set` attribute, update or delete the current value.\n            for (attr in attrs) {\n                val = attrs[attr];\n                if (!_.isEqual(current[attr], val))\n                    changes.push(attr);\n                if (!_.isEqual(prev[attr], val)) {\n                    this.changed[attr] = val;\n                } else {\n                    delete this.changed[attr];\n                }\n                unset ? delete current[attr] : current[attr] = val;\n            }\n\n            // Trigger all relevant attribute changes.\n            if (!silent) {\n                if (changes.length)\n                    this._pending = options;\n                for (var i = 0, l = changes.length; i < l; i++) {\n                    this.trigger('change:' + changes[i], this, current[changes[i]], options);\n                }\n            }\n\n            // You might be wondering why there's a `while` loop here. Changes can\n            // be recursively nested within `\"change\"` events.\n            if (changing)\n                return this;\n            if (!silent) {\n                while (this._pending) {\n                    options = this._pending;\n                    this._pending = false;\n                    this.trigger('change', this, options);\n                }\n            }\n            this._pending = false;\n            this._changing = false;\n            return this;\n        },\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n        // if the attribute doesn't exist.\n        unset: function (attr, options) {\n            return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n        },\n        // Clear all attributes on the model, firing `\"change\"`.\n        clear: function (options) {\n            var attrs = {};\n            for (var key in this.attributes)\n                attrs[key] = void 0;\n            return this.set(attrs, _.extend({}, options, {unset: true}));\n        },\n        // Determine if the model has changed since the last `\"change\"` event.\n        // If you specify an attribute name, determine if that attribute has changed.\n        hasChanged: function (attr) {\n            if (attr == null)\n                return !_.isEmpty(this.changed);\n            return _.has(this.changed, attr);\n        },\n        // Return an object containing all the attributes that have changed, or\n        // false if there are no changed attributes. Useful for determining what\n        // parts of a view need to be updated and/or what attributes need to be\n        // persisted to the server. Unset attributes will be set to undefined.\n        // You can also pass an attributes object to diff against the model,\n        // determining if there *would be* a change.\n        changedAttributes: function (diff) {\n            if (!diff)\n                return this.hasChanged() ? _.clone(this.changed) : false;\n            var val, changed = false;\n            var old = this._changing ? this._previousAttributes : this.attributes;\n            for (var attr in diff) {\n                if (_.isEqual(old[attr], (val = diff[attr])))\n                    continue;\n                (changed || (changed = {}))[attr] = val;\n            }\n            return changed;\n        },\n        // Get the previous value of an attribute, recorded at the time the last\n        // `\"change\"` event was fired.\n        previous: function (attr) {\n            if (attr == null || !this._previousAttributes)\n                return null;\n            return this._previousAttributes[attr];\n        },\n        // Get all of the attributes of the model at the time of the previous\n        // `\"change\"` event.\n        previousAttributes: function () {\n            return _.clone(this._previousAttributes);\n        },\n        // Fetch the model from the server. If the server's representation of the\n        // model differs from its current attributes, they will be overridden,\n        // triggering a `\"change\"` event.\n        fetch: function (options) {\n            options = options ? _.clone(options) : {};\n            if (options.parse === void 0)\n                options.parse = true;\n            var model = this;\n            var success = options.success;\n            options.success = function (resp) {\n                if (!model.set(model.parse(resp, options), options))\n                    return false;\n                if (success)\n                    success(model, resp, options);\n                model.trigger('sync', model, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync('read', this, options);\n        },\n        // Set a hash of model attributes, and sync the model to the server.\n        // If the server returns an attributes hash that differs, the model's\n        // state will be `set` again.\n        save: function (key, val, options) {\n            var attrs, method, xhr, attributes = this.attributes;\n\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\n            if (key == null || typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n\n            options = _.extend({validate: true}, options);\n\n            // If we're not waiting and attributes exist, save acts as\n            // `set(attr).save(null, opts)` with validation. Otherwise, check if\n            // the model will be valid when the attributes, if any, are set.\n            if (attrs && !options.wait) {\n                if (!this.set(attrs, options))\n                    return false;\n            } else {\n                if (!this._validate(attrs, options))\n                    return false;\n            }\n\n            // Set temporary attributes if `{wait: true}`.\n            if (attrs && options.wait) {\n                this.attributes = _.extend({}, attributes, attrs);\n            }\n\n            // After a successful server-side save, the client is (optionally)\n            // updated with the server-side state.\n            if (options.parse === void 0)\n                options.parse = true;\n            var model = this;\n            var success = options.success;\n            options.success = function (resp) {\n                // Ensure attributes are restored during synchronous saves.\n                model.attributes = attributes;\n                var serverAttrs = model.parse(resp, options);\n                if (options.wait)\n                    serverAttrs = _.extend(attrs || {}, serverAttrs);\n                if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n                    return false;\n                }\n                if (success)\n                    success(model, resp, options);\n                model.trigger('sync', model, resp, options);\n            };\n            wrapError(this, options);\n\n            method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n            if (method === 'patch')\n                options.attrs = attrs;\n            xhr = this.sync(method, this, options);\n\n            // Restore attributes.\n            if (attrs && options.wait)\n                this.attributes = attributes;\n\n            return xhr;\n        },\n        // Destroy this model on the server if it was already persisted.\n        // Optimistically removes the model from its collection, if it has one.\n        // If `wait: true` is passed, waits for the server to respond before removal.\n        destroy: function (options) {\n            options = options ? _.clone(options) : {};\n            var model = this;\n            var success = options.success;\n\n            var destroy = function () {\n                model.trigger('destroy', model, model.collection, options);\n            };\n\n            options.success = function (resp) {\n                if (options.wait || model.isNew())\n                    destroy();\n                if (success)\n                    success(model, resp, options);\n                if (!model.isNew())\n                    model.trigger('sync', model, resp, options);\n            };\n\n            if (this.isNew()) {\n                options.success();\n                return false;\n            }\n            wrapError(this, options);\n\n            var xhr = this.sync('delete', this, options);\n            if (!options.wait)\n                destroy();\n            return xhr;\n        },\n        // Default URL for the model's representation on the server -- if you're\n        // using Backbone's restful methods, override this to change the endpoint\n        // that will be called.\n        url: function () {\n            var base =\n                _.result(this, 'urlRoot') ||\n                _.result(this.collection, 'url') ||\n                urlError();\n            if (this.isNew())\n                return base;\n            return base.replace(/([^\\/])$/, '$1/') + encodeURIComponent(this.id);\n        },\n        // **parse** converts a response into the hash of attributes to be `set` on\n        // the model. The default implementation is just to pass the response along.\n        parse: function (resp, options) {\n            return resp;\n        },\n        // Create a new model with identical attributes to this one.\n        clone: function () {\n            return new this.constructor(this.attributes);\n        },\n        // A model is new if it has never been saved to the server, and lacks an id.\n        isNew: function () {\n            return !this.has(this.idAttribute);\n        },\n        // Check if the model is currently in a valid state.\n        isValid: function (options) {\n            return this._validate({}, _.extend(options || {}, {validate: true}));\n        },\n        // Run validation against the next complete set of model attributes,\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n        _validate: function (attrs, options) {\n            if (!options.validate || !this.validate)\n                return true;\n            attrs = _.extend({}, this.attributes, attrs);\n            var error = this.validationError = this.validate(attrs, options) || null;\n            if (!error)\n                return true;\n            this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n            return false;\n        }\n\n    });\n\n    // Underscore methods that we want to implement on the Model.\n    var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\n\n    // Mix in each Underscore method as a proxy to `Model#attributes`.\n    _.each(modelMethods, function (method) {\n        Model.prototype[method] = function () {\n            var args = slice.call(arguments);\n            args.unshift(this.attributes);\n            return _[method].apply(_, args);\n        };\n    });\n\n    // Backbone.Collection\n    // -------------------\n\n    // If models tend to represent a single row of data, a Backbone Collection is\n    // more analagous to a table full of data ... or a small slice or page of that\n    // table, or a collection of rows that belong together for a particular reason\n    // -- all of the messages in this particular folder, all of the documents\n    // belonging to this particular author, and so on. Collections maintain\n    // indexes of their models, both in order, and for lookup by `id`.\n\n    // Create a new **Collection**, perhaps to contain a specific type of `model`.\n    // If a `comparator` is specified, the Collection will maintain\n    // its models in sort order, as they're added and removed.\n    var Collection = Backbone.Collection = function (models, options) {\n        options || (options = {});\n        if (options.model)\n            this.model = options.model;\n        if (options.comparator !== void 0)\n            this.comparator = options.comparator;\n        this._reset();\n        this.initialize.apply(this, arguments);\n        if (models)\n            this.reset(models, _.extend({silent: true}, options));\n    };\n\n    // Default options for `Collection#set`.\n    var setOptions = {add: true, remove: true, merge: true};\n    var addOptions = {add: true, remove: false};\n\n    // Define the Collection's inheritable methods.\n    _.extend(Collection.prototype, Events, {\n        // The default model for a collection is just a **Backbone.Model**.\n        // This should be overridden in most cases.\n        model: Model,\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // The JSON representation of a Collection is an array of the\n        // models' attributes.\n        toJSON: function (options) {\n            return this.map(function (model) {\n                return model.toJSON(options);\n            });\n        },\n        // Proxy `Backbone.sync` by default.\n        sync: function () {\n            return Backbone.sync.apply(this, arguments);\n        },\n        // Add a model, or list of models to the set.\n        add: function (models, options) {\n            return this.set(models, _.extend({merge: false}, options, addOptions));\n        },\n        // Remove a model, or a list of models from the set.\n        remove: function (models, options) {\n            var singular = !_.isArray(models);\n            models = singular ? [models] : _.clone(models);\n            options || (options = {});\n            var i, l, index, model;\n            for (i = 0, l = models.length; i < l; i++) {\n                model = models[i] = this.get(models[i]);\n                if (!model)\n                    continue;\n                delete this._byId[model.id];\n                delete this._byId[model.cid];\n                index = this.indexOf(model);\n                this.models.splice(index, 1);\n                this.length--;\n                if (!options.silent) {\n                    options.index = index;\n                    model.trigger('remove', model, this, options);\n                }\n                this._removeReference(model, options);\n            }\n            return singular ? models[0] : models;\n        },\n        // Update a collection by `set`-ing a new list of models, adding new ones,\n        // removing models that are no longer present, and merging models that\n        // already exist in the collection, as necessary. Similar to **Model#set**,\n        // the core operation for updating the data contained by the collection.\n        set: function (models, options) {\n            options = _.defaults({}, options, setOptions);\n            if (options.parse)\n                models = this.parse(models, options);\n            var singular = !_.isArray(models);\n            models = singular ? (models ? [models] : []) : _.clone(models);\n            var i, l, id, model, attrs, existing, sort;\n            var at = options.at;\n            var targetModel = this.model;\n            var sortable = this.comparator && (at == null) && options.sort !== false;\n            var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n            var toAdd = [], toRemove = [], modelMap = {};\n            var add = options.add, merge = options.merge, remove = options.remove;\n            var order = !sortable && add && remove ? [] : false;\n\n            // Turn bare objects into model references, and prevent invalid models\n            // from being added.\n            for (i = 0, l = models.length; i < l; i++) {\n                attrs = models[i] || {};\n                if (attrs instanceof Model) {\n                    id = model = attrs;\n                } else {\n                    id = attrs[targetModel.prototype.idAttribute || 'id'];\n                }\n\n                // If a duplicate is found, prevent it from being added and\n                // optionally merge it into the existing model.\n                if (existing = this.get(id)) {\n                    if (remove)\n                        modelMap[existing.cid] = true;\n                    if (merge) {\n                        attrs = attrs === model ? model.attributes : attrs;\n                        if (options.parse)\n                            attrs = existing.parse(attrs, options);\n                        existing.set(attrs, options);\n                        if (sortable && !sort && existing.hasChanged(sortAttr))\n                            sort = true;\n                    }\n                    models[i] = existing;\n\n                    // If this is a new, valid model, push it to the `toAdd` list.\n                } else if (add) {\n                    model = models[i] = this._prepareModel(attrs, options);\n                    if (!model)\n                        continue;\n                    toAdd.push(model);\n                    this._addReference(model, options);\n                }\n\n                // Do not add multiple models with the same `id`.\n                model = existing || model;\n                if (order && (model.isNew() || !modelMap[model.id]))\n                    order.push(model);\n                modelMap[model.id] = true;\n            }\n\n            // Remove nonexistent models if appropriate.\n            if (remove) {\n                for (i = 0, l = this.length; i < l; ++i) {\n                    if (!modelMap[(model = this.models[i]).cid])\n                        toRemove.push(model);\n                }\n                if (toRemove.length)\n                    this.remove(toRemove, options);\n            }\n\n            // See if sorting is needed, update `length` and splice in new models.\n            if (toAdd.length || (order && order.length)) {\n                if (sortable)\n                    sort = true;\n                this.length += toAdd.length;\n                if (at != null) {\n                    for (i = 0, l = toAdd.length; i < l; i++) {\n                        this.models.splice(at + i, 0, toAdd[i]);\n                    }\n                } else {\n                    if (order)\n                        this.models.length = 0;\n                    var orderedModels = order || toAdd;\n                    for (i = 0, l = orderedModels.length; i < l; i++) {\n                        this.models.push(orderedModels[i]);\n                    }\n                }\n            }\n\n            // Silently sort the collection if appropriate.\n            if (sort)\n                this.sort({silent: true});\n\n            // Unless silenced, it's time to fire all appropriate add/sort events.\n            if (!options.silent) {\n                for (i = 0, l = toAdd.length; i < l; i++) {\n                    (model = toAdd[i]).trigger('add', model, this, options);\n                }\n                if (sort || (order && order.length))\n                    this.trigger('sort', this, options);\n            }\n\n            // Return the added (or merged) model (or models).\n            return singular ? models[0] : models;\n        },\n        // When you have more items than you want to add or remove individually,\n        // you can reset the entire set with a new list of models, without firing\n        // any granular `add` or `remove` events. Fires `reset` when finished.\n        // Useful for bulk operations and optimizations.\n        reset: function (models, options) {\n            options || (options = {});\n            for (var i = 0, l = this.models.length; i < l; i++) {\n                this._removeReference(this.models[i], options);\n            }\n            options.previousModels = this.models;\n            this._reset();\n            models = this.add(models, _.extend({silent: true}, options));\n            if (!options.silent)\n                this.trigger('reset', this, options);\n            return models;\n        },\n        // Add a model to the end of the collection.\n        push: function (model, options) {\n            return this.add(model, _.extend({at: this.length}, options));\n        },\n        // Remove a model from the end of the collection.\n        pop: function (options) {\n            var model = this.at(this.length - 1);\n            this.remove(model, options);\n            return model;\n        },\n        // Add a model to the beginning of the collection.\n        unshift: function (model, options) {\n            return this.add(model, _.extend({at: 0}, options));\n        },\n        // Remove a model from the beginning of the collection.\n        shift: function (options) {\n            var model = this.at(0);\n            this.remove(model, options);\n            return model;\n        },\n        // Slice out a sub-array of models from the collection.\n        slice: function () {\n            return slice.apply(this.models, arguments);\n        },\n        // Get a model from the set by id.\n        get: function (obj) {\n            if (obj == null)\n                return void 0;\n            return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];\n        },\n        // Get the model at the given index.\n        at: function (index) {\n            return this.models[index];\n        },\n        // Return models with matching attributes. Useful for simple cases of\n        // `filter`.\n        where: function (attrs, first) {\n            if (_.isEmpty(attrs))\n                return first ? void 0 : [];\n            return this[first ? 'find' : 'filter'](function (model) {\n                for (var key in attrs) {\n                    if (attrs[key] !== model.get(key))\n                        return false;\n                }\n                return true;\n            });\n        },\n        // Return the first model with matching attributes. Useful for simple cases\n        // of `find`.\n        findWhere: function (attrs) {\n            return this.where(attrs, true);\n        },\n        // Force the collection to re-sort itself. You don't need to call this under\n        // normal circumstances, as the set will maintain sort order as each item\n        // is added.\n        sort: function (options) {\n            if (!this.comparator)\n                throw new Error('Cannot sort a set without a comparator');\n            options || (options = {});\n\n            // Run sort based on type of `comparator`.\n            if (_.isString(this.comparator) || this.comparator.length === 1) {\n                this.models = this.sortBy(this.comparator, this);\n            } else {\n                this.models.sort(_.bind(this.comparator, this));\n            }\n\n            if (!options.silent)\n                this.trigger('sort', this, options);\n            return this;\n        },\n        // Pluck an attribute from each model in the collection.\n        pluck: function (attr) {\n            return _.invoke(this.models, 'get', attr);\n        },\n        // Fetch the default set of models for this collection, resetting the\n        // collection when they arrive. If `reset: true` is passed, the response\n        // data will be passed through the `reset` method instead of `set`.\n        fetch: function (options) {\n            options = options ? _.clone(options) : {};\n            if (options.parse === void 0)\n                options.parse = true;\n            var success = options.success;\n            var collection = this;\n            options.success = function (resp) {\n                var method = options.reset ? 'reset' : 'set';\n                collection[method](resp, options);\n                if (success)\n                    success(collection, resp, options);\n                collection.trigger('sync', collection, resp, options);\n            };\n            wrapError(this, options);\n            return this.sync('read', this, options);\n        },\n        // Create a new instance of a model in this collection. Add the model to the\n        // collection immediately, unless `wait: true` is passed, in which case we\n        // wait for the server to agree.\n        create: function (model, options) {\n            options = options ? _.clone(options) : {};\n            if (!(model = this._prepareModel(model, options)))\n                return false;\n            if (!options.wait)\n                this.add(model, options);\n            var collection = this;\n            var success = options.success;\n            options.success = function (model, resp) {\n                if (options.wait)\n                    collection.add(model, options);\n                if (success)\n                    success(model, resp, options);\n            };\n            model.save(null, options);\n            return model;\n        },\n        // **parse** converts a response into a list of models to be added to the\n        // collection. The default implementation is just to pass it through.\n        parse: function (resp, options) {\n            return resp;\n        },\n        // Create a new collection with an identical list of models as this one.\n        clone: function () {\n            return new this.constructor(this.models);\n        },\n        // Private method to reset all internal state. Called when the collection\n        // is first initialized or reset.\n        _reset: function () {\n            this.length = 0;\n            this.models = [];\n            this._byId = {};\n        },\n        // Prepare a hash of attributes (or other model) to be added to this\n        // collection.\n        _prepareModel: function (attrs, options) {\n            if (attrs instanceof Model)\n                return attrs;\n            options = options ? _.clone(options) : {};\n            options.collection = this;\n            var model = new this.model(attrs, options);\n            if (!model.validationError)\n                return model;\n            this.trigger('invalid', this, model.validationError, options);\n            return false;\n        },\n        // Internal method to create a model's ties to a collection.\n        _addReference: function (model, options) {\n            this._byId[model.cid] = model;\n            if (model.id != null)\n                this._byId[model.id] = model;\n            if (!model.collection)\n                model.collection = this;\n            model.on('all', this._onModelEvent, this);\n        },\n        // Internal method to sever a model's ties to a collection.\n        _removeReference: function (model, options) {\n            if (this === model.collection)\n                delete model.collection;\n            model.off('all', this._onModelEvent, this);\n        },\n        // Internal method called every time a model in the set fires an event.\n        // Sets need to update their indexes when models change ids. All other\n        // events simply proxy through. \"add\" and \"remove\" events that originate\n        // in other collections are ignored.\n        _onModelEvent: function (event, model, collection, options) {\n            if ((event === 'add' || event === 'remove') && collection !== this)\n                return;\n            if (event === 'destroy')\n                this.remove(model, options);\n            if (model && event === 'change:' + model.idAttribute) {\n                delete this._byId[model.previous(model.idAttribute)];\n                if (model.id != null)\n                    this._byId[model.id] = model;\n            }\n            this.trigger.apply(this, arguments);\n        }\n\n    });\n\n    // Underscore methods that we want to implement on the Collection.\n    // 90% of the core usefulness of Backbone Collections is actually implemented\n    // right here:\n    var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\n        'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\n        'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\n        'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\n        'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',\n        'lastIndexOf', 'isEmpty', 'chain', 'sample'];\n\n    // Mix in each Underscore method as a proxy to `Collection#models`.\n    _.each(methods, function (method) {\n        Collection.prototype[method] = function () {\n            var args = slice.call(arguments);\n            args.unshift(this.models);\n            return _[method].apply(_, args);\n        };\n    });\n\n    // Underscore methods that take a property name as an argument.\n    var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];\n\n    // Use attributes instead of properties.\n    _.each(attributeMethods, function (method) {\n        Collection.prototype[method] = function (value, context) {\n            var iterator = _.isFunction(value) ? value : function (model) {\n                return model.get(value);\n            };\n            return _[method](this.models, iterator, context);\n        };\n    });\n\n    // Backbone.View\n    // -------------\n\n    // Backbone Views are almost more convention than they are actual code. A View\n    // is simply a JavaScript object that represents a logical chunk of UI in the\n    // DOM. This might be a single item, an entire list, a sidebar or panel, or\n    // even the surrounding frame which wraps your whole app. Defining a chunk of\n    // UI as a **View** allows you to define your DOM events declaratively, without\n    // having to worry about render order ... and makes it easy for the view to\n    // react to specific changes in the state of your models.\n\n    // Creating a Backbone.View creates its initial element outside of the DOM,\n    // if an existing element is not provided...\n    var View = Backbone.View = function (options) {\n        this.cid = _.uniqueId('view');\n        options || (options = {});\n        _.extend(this, _.pick(options, viewOptions));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n        this.delegateEvents();\n    };\n\n    // Cached regex to split keys for `delegate`.\n    var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n    // List of view options to be merged as properties.\n    var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n    // Set up all inheritable **Backbone.View** properties and methods.\n    _.extend(View.prototype, Events, {\n        // The default `tagName` of a View's element is `\"div\"`.\n        tagName: 'div',\n        // jQuery delegate for element lookup, scoped to DOM elements within the\n        // current view. This should be preferred to global lookups where possible.\n        $: function (selector) {\n            return this.$el.find(selector);\n        },\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // **render** is the core function that your view should override, in order\n        // to populate its element (`this.el`), with the appropriate HTML. The\n        // convention is for **render** to always return `this`.\n        render: function () {\n            return this;\n        },\n        // Remove this view by taking the element out of the DOM, and removing any\n        // applicable Backbone.Events listeners.\n        remove: function () {\n            this.$el.remove();\n            this.stopListening();\n            return this;\n        },\n        // Change the view's element (`this.el` property), including event\n        // re-delegation.\n        setElement: function (element, delegate) {\n            if (this.$el)\n                this.undelegateEvents();\n            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n            this.el = this.$el[0];\n            if (delegate !== false)\n                this.delegateEvents();\n            return this;\n        },\n        // Set callbacks, where `this.events` is a hash of\n        //\n        // *{\"event selector\": \"callback\"}*\n        //\n        //     {\n        //       'mousedown .title':  'edit',\n        //       'click .button':     'save',\n        //       'click .open':       function(e) { ... }\n        //     }\n        //\n        // pairs. Callbacks will be bound to the view, with `this` set properly.\n        // Uses event delegation for efficiency.\n        // Omitting the selector binds the event to `this.el`.\n        // This only works for delegate-able events: not `focus`, `blur`, and\n        // not `change`, `submit`, and `reset` in Internet Explorer.\n        delegateEvents: function (events) {\n            if (!(events || (events = _.result(this, 'events'))))\n                return this;\n            this.undelegateEvents();\n            for (var key in events) {\n                var method = events[key];\n                if (!_.isFunction(method))\n                    method = this[events[key]];\n                if (!method)\n                    continue;\n\n                var match = key.match(delegateEventSplitter);\n                var eventName = match[1], selector = match[2];\n                method = _.bind(method, this);\n                eventName += '.delegateEvents' + this.cid;\n                if (selector === '') {\n                    this.$el.on(eventName, method);\n                } else {\n                    this.$el.on(eventName, selector, method);\n                }\n            }\n            return this;\n        },\n        // Clears all callbacks previously bound to the view with `delegateEvents`.\n        // You usually don't need to use this, but may wish to if you have multiple\n        // Backbone views attached to the same DOM element.\n        undelegateEvents: function () {\n            this.$el.off('.delegateEvents' + this.cid);\n            return this;\n        },\n        // Ensure that the View has a DOM element to render into.\n        // If `this.el` is a string, pass it through `$()`, take the first\n        // matching element, and re-assign it to `el`. Otherwise, create\n        // an element from the `id`, `className` and `tagName` properties.\n        _ensureElement: function () {\n            if (!this.el) {\n                var attrs = _.extend({}, _.result(this, 'attributes'));\n                if (this.id)\n                    attrs.id = _.result(this, 'id');\n                if (this.className)\n                    attrs['class'] = _.result(this, 'className');\n                var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\n                this.setElement($el, false);\n            } else {\n                this.setElement(_.result(this, 'el'), false);\n            }\n        }\n\n    });\n\n    // Backbone.sync\n    // -------------\n\n    // Override this function to change the manner in which Backbone persists\n    // models to the server. You will be passed the type of request, and the\n    // model in question. By default, makes a RESTful Ajax request\n    // to the model's `url()`. Some possible customizations could be:\n    //\n    // * Use `setTimeout` to batch rapid-fire updates into a single request.\n    // * Send up the models as XML instead of JSON.\n    // * Persist models via WebSockets instead of Ajax.\n    //\n    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n    // as `POST`, with a `_method` parameter containing the true HTTP method,\n    // as well as all requests with the body as `application/x-www-form-urlencoded`\n    // instead of `application/json` with the model in a param named `model`.\n    // Useful when interfacing with server-side languages like **PHP** that make\n    // it difficult to read the body of `PUT` requests.\n    Backbone.sync = function (method, model, options) {\n        var type = methodMap[method];\n\n        // Default options, unless specified.\n        _.defaults(options || (options = {}), {\n            emulateHTTP: Backbone.emulateHTTP,\n            emulateJSON: Backbone.emulateJSON\n        });\n\n        // Default JSON-request options.\n        var params = {type: type, dataType: 'json'};\n\n        // Ensure that we have a URL.\n        if (!options.url) {\n            params.url = _.result(model, 'url') || urlError();\n        }\n\n        // Ensure that we have the appropriate request data.\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n            params.contentType = 'application/json';\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\n        }\n\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\n        if (options.emulateJSON) {\n            params.contentType = 'application/x-www-form-urlencoded';\n            params.data = params.data ? {model: params.data} : {};\n        }\n\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n        // And an `X-HTTP-Method-Override` header.\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n            params.type = 'POST';\n            if (options.emulateJSON)\n                params.data._method = type;\n            var beforeSend = options.beforeSend;\n            options.beforeSend = function (xhr) {\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\n                if (beforeSend)\n                    return beforeSend.apply(this, arguments);\n            };\n        }\n\n        // Don't process data on a non-GET request.\n        if (params.type !== 'GET' && !options.emulateJSON) {\n            params.processData = false;\n        }\n\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\n        // that still has ActiveX enabled by default, override jQuery to use that\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\n        if (params.type === 'PATCH' && noXhrPatch) {\n            params.xhr = function () {\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\n            };\n        }\n\n        // Make the request, allowing the user to override any Ajax options.\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n        model.trigger('request', model, xhr, options);\n        return xhr;\n    };\n\n    var noXhrPatch =\n        typeof window !== 'undefined' && !!window.ActiveXObject &&\n        !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n\n    // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n    var methodMap = {\n        'create': 'POST',\n        'update': 'PUT',\n        'patch': 'PATCH',\n        'delete': 'DELETE',\n        'read': 'GET'\n    };\n\n    // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n    // Override this if you'd like to use a different library.\n    Backbone.ajax = function () {\n        return Backbone.$.ajax.apply(Backbone.$, arguments);\n    };\n\n    // Backbone.Router\n    // ---------------\n\n    // Routers map faux-URLs to actions, and fire events when routes are\n    // matched. Creating a new one sets its `routes` hash, if not set statically.\n    var Router = Backbone.Router = function (options) {\n        options || (options = {});\n        if (options.routes)\n            this.routes = options.routes;\n        this._bindRoutes();\n        this.initialize.apply(this, arguments);\n    };\n\n    // Cached regular expressions for matching named param parts and splatted\n    // parts of route strings.\n    var optionalParam = /\\((.*?)\\)/g;\n    var namedParam = /(\\(\\?)?:\\w+/g;\n    var splatParam = /\\*\\w+/g;\n    var escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n    // Set up all inheritable **Backbone.Router** properties and methods.\n    _.extend(Router.prototype, Events, {\n        // Initialize is an empty function by default. Override it with your own\n        // initialization logic.\n        initialize: function () {\n        },\n        // Manually bind a single named route to a callback. For example:\n        //\n        //     this.route('search/:query/p:num', 'search', function(query, num) {\n        //       ...\n        //     });\n        //\n        route: function (route, name, callback) {\n            if (!_.isRegExp(route))\n                route = this._routeToRegExp(route);\n            if (_.isFunction(name)) {\n                callback = name;\n                name = '';\n            }\n            if (!callback)\n                callback = this[name];\n            var router = this;\n            Backbone.history.route(route, function (fragment) {\n                var args = router._extractParameters(route, fragment);\n                router.execute(callback, args);\n                router.trigger.apply(router, ['route:' + name].concat(args));\n                router.trigger('route', name, args);\n                Backbone.history.trigger('route', router, name, args);\n            });\n            return this;\n        },\n        // Execute a route handler with the provided parameters.  This is an\n        // excellent place to do pre-route setup or post-route cleanup.\n        execute: function (callback, args) {\n            if (callback)\n                callback.apply(this, args);\n        },\n        // Simple proxy to `Backbone.history` to save a fragment into the history.\n        navigate: function (fragment, options) {\n            Backbone.history.navigate(fragment, options);\n            return this;\n        },\n        // Bind all defined routes to `Backbone.history`. We have to reverse the\n        // order of the routes here to support behavior where the most general\n        // routes can be defined at the bottom of the route map.\n        _bindRoutes: function () {\n            if (!this.routes)\n                return;\n            this.routes = _.result(this, 'routes');\n            var route, routes = _.keys(this.routes);\n            while ((route = routes.pop()) != null) {\n                this.route(route, this.routes[route]);\n            }\n        },\n        // Convert a route string into a regular expression, suitable for matching\n        // against the current location hash.\n        _routeToRegExp: function (route) {\n            route = route.replace(escapeRegExp, '\\\\$&')\n                .replace(optionalParam, '(?:$1)?')\n                .replace(namedParam, function (match, optional) {\n                    return optional ? match : '([^/?]+)';\n                })\n                .replace(splatParam, '([^?]*?)');\n            return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n        },\n        // Given a route, and a URL fragment that it matches, return the array of\n        // extracted decoded parameters. Empty or unmatched parameters will be\n        // treated as `null` to normalize cross-browser behavior.\n        _extractParameters: function (route, fragment) {\n            var params = route.exec(fragment).slice(1);\n            return _.map(params, function (param, i) {\n                // Don't decode the search params.\n                if (i === params.length - 1)\n                    return param || null;\n                return param ? decodeURIComponent(param) : null;\n            });\n        }\n\n    });\n\n    // Backbone.History\n    // ----------------\n\n    // Handles cross-browser history management, based on either\n    // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n    // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n    // and URL fragments. If the browser supports neither (old IE, natch),\n    // falls back to polling.\n    var History = Backbone.History = function () {\n        this.handlers = [];\n        _.bindAll(this, 'checkUrl');\n\n        // Ensure that `History` can be used outside of the browser.\n        if (typeof window !== 'undefined') {\n            this.location = window.location;\n            this.history = window.history;\n        }\n    };\n\n    // Cached regex for stripping a leading hash/slash and trailing space.\n    var routeStripper = /^[#\\/]|\\s+$/g;\n\n    // Cached regex for stripping leading and trailing slashes.\n    var rootStripper = /^\\/+|\\/+$/g;\n\n    // Cached regex for detecting MSIE.\n    var isExplorer = /msie [\\w.]+/;\n\n    // Cached regex for removing a trailing slash.\n    var trailingSlash = /\\/$/;\n\n    // Cached regex for stripping urls of hash.\n    var pathStripper = /#.*$/;\n\n    // Has the history handling already been started?\n    History.started = false;\n\n    // Set up all inheritable **Backbone.History** properties and methods.\n    _.extend(History.prototype, Events, {\n        // The default interval to poll for hash changes, if necessary, is\n        // twenty times a second.\n        interval: 50,\n        // Are we at the app root?\n        atRoot: function () {\n            return this.location.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n        },\n        // Gets the true hash value. Cannot use location.hash directly due to bug\n        // in Firefox where location.hash will always be decoded.\n        getHash: function (window) {\n            var match = (window || this).location.href.match(/#(.*)$/);\n            return match ? match[1] : '';\n        },\n        // Get the cross-browser normalized URL fragment, either from the URL,\n        // the hash, or the override.\n        getFragment: function (fragment, forcePushState) {\n            if (fragment == null) {\n                if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n                    fragment = decodeURI(this.location.pathname + this.location.search);\n                    var root = this.root.replace(trailingSlash, '');\n                    if (!fragment.indexOf(root))\n                        fragment = fragment.slice(root.length);\n                } else {\n                    fragment = this.getHash();\n                }\n            }\n            return fragment.replace(routeStripper, '');\n        },\n        // Start the hash change handling, returning `true` if the current URL matches\n        // an existing route, and `false` otherwise.\n        start: function (options) {\n            if (History.started)\n                throw new Error(\"Backbone.history has already been started\");\n            History.started = true;\n\n            // Figure out the initial configuration. Do we need an iframe?\n            // Is pushState desired ... is it available?\n            this.options = _.extend({root: '/'}, this.options, options);\n            this.root = this.options.root;\n            this._wantsHashChange = this.options.hashChange !== false;\n            this._wantsPushState = !!this.options.pushState;\n            this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);\n            var fragment = this.getFragment();\n            var docMode = document.documentMode;\n            var oldIE = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n            // Normalize root to always include a leading and trailing slash.\n            this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n            if (oldIE && this._wantsHashChange) {\n                var frame = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\">');\n                this.iframe = frame.hide().appendTo('body')[0].contentWindow;\n                this.navigate(fragment);\n            }\n\n            // Depending on whether we're using pushState or hashes, and whether\n            // 'onhashchange' is supported, determine how we check the URL state.\n            if (this._hasPushState) {\n                Backbone.$(window).on('popstate', this.checkUrl);\n            } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n                Backbone.$(window).on('hashchange', this.checkUrl);\n            } else if (this._wantsHashChange) {\n                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n            }\n\n            // Determine if we need to change the base url, for a pushState link\n            // opened by a non-pushState browser.\n            this.fragment = fragment;\n            var loc = this.location;\n\n            // Transition from hashChange to pushState or vice versa if both are\n            // requested.\n            if (this._wantsHashChange && this._wantsPushState) {\n\n                // If we've started off with a route from a `pushState`-enabled\n                // browser, but we're currently in a browser that doesn't support it...\n                if (!this._hasPushState && !this.atRoot()) {\n                    this.fragment = this.getFragment(null, true);\n                    this.location.replace(this.root + '#' + this.fragment);\n                    // Return immediately as browser will do redirect to new url\n                    return true;\n\n                    // Or if we've started out with a hash-based route, but we're currently\n                    // in a browser where it could be `pushState`-based instead...\n                } else if (this._hasPushState && this.atRoot() && loc.hash) {\n                    this.fragment = this.getHash().replace(routeStripper, '');\n                    this.history.replaceState({}, document.title, this.root + this.fragment);\n                }\n\n            }\n\n            if (!this.options.silent)\n                return this.loadUrl();\n        },\n        // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n        // but possibly useful for unit testing Routers.\n        stop: function () {\n            Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\n            if (this._checkUrlInterval)\n                clearInterval(this._checkUrlInterval);\n            History.started = false;\n        },\n        // Add a route to be tested when the fragment changes. Routes added later\n        // may override previous routes.\n        route: function (route, callback) {\n            this.handlers.unshift({route: route, callback: callback});\n        },\n        // Checks the current URL to see if it has changed, and if it has,\n        // calls `loadUrl`, normalizing across the hidden iframe.\n        checkUrl: function (e) {\n            var current = this.getFragment();\n            if (current === this.fragment && this.iframe) {\n                current = this.getFragment(this.getHash(this.iframe));\n            }\n            if (current === this.fragment)\n                return false;\n            if (this.iframe)\n                this.navigate(current);\n            this.loadUrl();\n        },\n        // Attempt to load the current URL fragment. If a route succeeds with a\n        // match, returns `true`. If no defined routes matches the fragment,\n        // returns `false`.\n        loadUrl: function (fragment) {\n            fragment = this.fragment = this.getFragment(fragment);\n            return _.any(this.handlers, function (handler) {\n                if (handler.route.test(fragment)) {\n                    handler.callback(fragment);\n                    return true;\n                }\n            });\n        },\n        // Save a fragment into the hash history, or replace the URL state if the\n        // 'replace' option is passed. You are responsible for properly URL-encoding\n        // the fragment in advance.\n        //\n        // The options object can contain `trigger: true` if you wish to have the\n        // route callback be fired (not usually desirable), or `replace: true`, if\n        // you wish to modify the current URL without adding an entry to the history.\n        navigate: function (fragment, options) {\n            if (!History.started)\n                return false;\n            if (!options || options === true)\n                options = {trigger: !!options};\n\n            var url = this.root + (fragment = this.getFragment(fragment || ''));\n\n            // Strip the hash for matching.\n            fragment = fragment.replace(pathStripper, '');\n\n            if (this.fragment === fragment)\n                return;\n            this.fragment = fragment;\n\n            // Don't include a trailing slash on the root.\n            if (fragment === '' && url !== '/')\n                url = url.slice(0, -1);\n\n            // If pushState is available, we use it to set the fragment as a real URL.\n            if (this._hasPushState) {\n                this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n                // If hash changes haven't been explicitly disabled, update the hash\n                // fragment to store history.\n            } else if (this._wantsHashChange) {\n                this._updateHash(this.location, fragment, options.replace);\n                if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\n                    // Opening and closing the iframe tricks IE7 and earlier to push a\n                    // history entry on hash-tag change.  When replace is true, we don't\n                    // want this.\n                    if (!options.replace)\n                        this.iframe.document.open().close();\n                    this._updateHash(this.iframe.location, fragment, options.replace);\n                }\n\n                // If you've told us that you explicitly don't want fallback hashchange-\n                // based history, then `navigate` becomes a page refresh.\n            } else {\n                return this.location.assign(url);\n            }\n            if (options.trigger)\n                return this.loadUrl(fragment);\n        },\n        // Update the hash location, either replacing the current entry, or adding\n        // a new one to the browser history.\n        _updateHash: function (location, fragment, replace) {\n            if (replace) {\n                var href = location.href.replace(/(javascript:|#).*$/, '');\n                location.replace(href + '#' + fragment);\n            } else {\n                // Some browsers require that `hash` contains a leading #.\n                location.hash = '#' + fragment;\n            }\n        }\n\n    });\n\n    // Create the default Backbone.history.\n    Backbone.history = new History;\n\n    // Helpers\n    // -------\n\n    // Helper function to correctly set up the prototype chain, for subclasses.\n    // Similar to `goog.inherits`, but uses a hash of prototype properties and\n    // class properties to be extended.\n    var extend = function (protoProps, staticProps) {\n        var parent = this;\n        var child;\n\n        // The constructor function for the new subclass is either defined by you\n        // (the \"constructor\" property in your `extend` definition), or defaulted\n        // by us to simply call the parent's constructor.\n        if (protoProps && _.has(protoProps, 'constructor')) {\n            child = protoProps.constructor;\n        } else {\n            child = function () {\n                return parent.apply(this, arguments);\n            };\n        }\n\n        // Add static properties to the constructor function, if supplied.\n        _.extend(child, parent, staticProps);\n\n        // Set the prototype chain to inherit from `parent`, without calling\n        // `parent`'s constructor function.\n        var Surrogate = function () {\n            this.constructor = child;\n        };\n        Surrogate.prototype = parent.prototype;\n        child.prototype = new Surrogate;\n\n        // Add prototype properties (instance properties) to the subclass,\n        // if supplied.\n        if (protoProps)\n            _.extend(child.prototype, protoProps);\n\n        // Set a convenience property in case the parent's prototype is needed\n        // later.\n        child.__super__ = parent.prototype;\n\n        return child;\n    };\n\n    // Set up inheritance for the model, collection, router, view and history.\n    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n    // Throw an error when a URL is needed, and none is supplied.\n    var urlError = function () {\n        throw new Error('A \"url\" property or function must be specified');\n    };\n\n    // Wrap an optional error callback with a fallback error event.\n    var wrapError = function (model, options) {\n        var error = options.error;\n        options.error = function (resp) {\n            if (error)\n                error(model, resp, options);\n            model.trigger('error', model, resp, options);\n        };\n    };\n\n    return Backbone;\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},,,,function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($) {/*\n Highcharts JS v4.2.6 (2016-08-02)\n\n (c) 2009-2016 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function(D,ca){typeof module==="object"&&module.exports?module.exports=D.document?ca(D):ca:D.Highcharts=ca(D)})(typeof window!=="undefined"?window:this,function(D){function ca(a,b){var c="Highcharts error #"+a+": www.highcharts.com/errors/"+a;if(b)throw Error(c);D.console&&console.log(c)}function sb(a,b,c){this.options=b;this.elem=a;this.prop=c}function E(){var a,b=arguments,c,d={},e=function(a,b){var c,d;typeof a!=="object"&&(a={});for(d in b)b.hasOwnProperty(d)&&(c=b[d],a[d]=c&&typeof c==="object"&&\nObject.prototype.toString.call(c)!=="[object Array]"&&d!=="renderTo"&&typeof c.nodeType!=="number"?e(a[d]||{},c):b[d]);return a};b[0]===!0&&(d=b[1],b=Array.prototype.slice.call(b,2));c=b.length;for(a=0;a<c;a++)d=e(d,b[a]);return d}function B(a,b){return parseInt(a,b||10)}function ya(a){return typeof a==="string"}function Fa(a){return Object.prototype.toString.call(a)==="[object Array]"}function ra(a,b){for(var c=a.length;c--;)if(a[c]===b){a.splice(c,1);break}}function s(a){return a!==A&&a!==null}\nfunction P(a,b,c){var d,e;if(ya(b))s(c)?a.setAttribute(b,c):a&&a.getAttribute&&(e=a.getAttribute(b));else if(s(b)&&$(b))for(d in b)a.setAttribute(d,b[d]);return e}function ua(a){return Fa(a)?a:[a]}function Ra(a,b,c){if(b)return setTimeout(a,b,c);a.call(0,c)}function M(a,b){if(za&&!ga&&b&&b.opacity!==A)b.filter="alpha(opacity="+b.opacity*100+")";x(a.style,b)}function da(a,b,c,d,e){a=y.createElement(a);b&&x(a,b);e&&M(a,{padding:0,border:"none",margin:0});c&&M(a,c);d&&d.appendChild(a);return a}function sa(a,\nb){var c=function(){};c.prototype=new a;x(c.prototype,b);return c}function Ga(a,b,c){return Array((b||2)+1-String(a).length).join(c||0)+a}function $a(a){return(ab&&ab(a)||tb||0)*6E4}function Na(a,b){for(var c="{",d=!1,e,f,g,h,i,j=[];(c=a.indexOf(c))!==-1;){e=a.slice(0,c);if(d){f=e.split(":");g=f.shift().split(".");i=g.length;e=b;for(h=0;h<i;h++)e=e[g[h]];if(f.length)f=f.join(":"),g=/\\.([0-9])/,h=U.lang,i=void 0,/f$/.test(f)?(i=(i=f.match(g))?i[1]:-1,e!==null&&(e=u.numberFormat(e,i,h.decimalPoint,\nf.indexOf(",")>-1?h.thousandsSep:""))):e=Sa(f,e)}j.push(e);a=a.slice(c+1);c=(d=!d)?"}":"{"}j.push(a);return j.join("")}function ub(a){return Z.pow(10,V(Z.log(a)/Z.LN10))}function vb(a,b,c,d,e){var f,g=a,c=p(c,1);f=a/c;b||(b=[1,2,2.5,5,10],d===!1&&(c===1?b=[1,2,5,10]:c<=0.1&&(b=[1/c])));for(d=0;d<b.length;d++)if(g=b[d],e&&g*c>=a||!e&&f<=(b[d]+(b[d+1]||b[d]))/2)break;g*=c;return g}function jb(a,b){var c=a.length,d,e;for(e=0;e<c;e++)a[e].safeI=e;a.sort(function(a,c){d=b(a,c);return d===0?a.safeI-c.safeI:\nd});for(e=0;e<c;e++)delete a[e].safeI}function Oa(a){for(var b=a.length,c=a[0];b--;)a[b]<c&&(c=a[b]);return c}function Ha(a){for(var b=a.length,c=a[0];b--;)a[b]>c&&(c=a[b]);return c}function Ta(a,b){for(var c in a)a[c]&&a[c]!==b&&a[c].destroy&&a[c].destroy(),delete a[c]}function Ua(a){kb||(kb=da(Pa));a&&kb.appendChild(a);kb.innerHTML=""}function aa(a,b){return parseFloat(a.toPrecision(b||14))}function Va(a,b){b.renderer.globalAnimation=p(a,b.animation)}function bb(a){return $(a)?E(a):{duration:a?\n500:0}}function Gb(){var a=U.global,b=a.useUTC,c=b?"getUTC":"get",d=b?"setUTC":"set";ma=a.Date||D.Date;tb=b&&a.timezoneOffset;ab=b&&a.getTimezoneOffset;lb=function(a,c,d,h,i,j){var k;b?(k=ma.UTC.apply(0,arguments),k+=$a(k)):k=(new ma(a,c,p(d,1),p(h,0),p(i,0),p(j,0))).getTime();return k};wb=c+"Minutes";xb=c+"Hours";yb=c+"Day";Wa=c+"Date";cb=c+"Month";db=c+"FullYear";Hb=d+"Milliseconds";Ib=d+"Seconds";Jb=d+"Minutes";Kb=d+"Hours";mb=d+"Date";zb=d+"Month";Ab=d+"FullYear"}function na(a){if(!(this instanceof\nna))return new na(a);this.init(a)}function O(){}function Xa(a,b,c,d){this.axis=a;this.pos=b;this.type=c||"";this.isNew=!0;!c&&!d&&this.addLabel()}function Lb(a,b,c,d,e){var f=a.chart.inverted;this.axis=a;this.isNegative=c;this.options=b;this.x=d;this.total=null;this.points={};this.stack=e;this.rightCliff=this.leftCliff=0;this.alignOptions={align:b.align||(f?c?"left":"right":"center"),verticalAlign:b.verticalAlign||(f?"middle":c?"bottom":"top"),y:p(b.y,f?4:c?14:-6),x:p(b.x,f?c?-6:6:0)};this.textAlign=\nb.textAlign||(f?c?"right":"left":"center")}var A,y=D.document,Z=Math,C=Z.round,V=Z.floor,va=Z.ceil,t=Z.max,F=Z.min,Q=Z.abs,W=Z.cos,ea=Z.sin,ta=Z.PI,ka=ta*2/360,Aa=D.navigator&&D.navigator.userAgent||"",Mb=D.opera,za=/(msie|trident|edge)/i.test(Aa)&&!Mb,nb=y&&y.documentMode===8,ob=!za&&/AppleWebKit/.test(Aa),Qa=/Firefox/.test(Aa),Nb=/(Mobile|Android|Windows Phone)/.test(Aa),Ia="http://www.w3.org/2000/svg",ga=y&&y.createElementNS&&!!y.createElementNS(Ia,"svg").createSVGRect,Rb=Qa&&parseInt(Aa.split("Firefox/")[1],\n10)<4,la=y&&!ga&&!za&&!!y.createElement("canvas").getContext,eb,fb,Ob={},Bb=0,kb,U,Sa,H,Ba=function(){},T=[],gb=0,Pa="div",X="M",S="L",Sb=/^[0-9]+$/,pb=["plotTop","marginRight","marginBottom","plotLeft"],ma,lb,tb,ab,wb,xb,yb,Wa,cb,db,Hb,Ib,Jb,Kb,mb,zb,Ab,L={},u;u=D.Highcharts?ca(16,!0):{win:D};u.seriesTypes=L;var Ja=[],oa,pa,q,Ca,Cb,Da,N,Y,I,Ya,Ka;sb.prototype={dSetter:function(){var a=this.paths[0],b=this.paths[1],c=[],d=this.now,e=a.length,f;if(d===1)c=this.toD;else if(e===b.length&&d<1)for(;e--;)f=\nparseFloat(a[e]),c[e]=isNaN(f)?a[e]:d*parseFloat(b[e]-f)+f;else c=b;this.elem.attr("d",c)},update:function(){var a=this.elem,b=this.prop,c=this.now,d=this.options.step;if(this[b+"Setter"])this[b+"Setter"]();else a.attr?a.element&&a.attr(b,c):a.style[b]=c+this.unit;d&&d.call(a,c,this)},run:function(a,b,c){var d=this,e=function(a){return e.stopped?!1:d.step(a)},f;this.startTime=+new ma;this.start=a;this.end=b;this.unit=c;this.now=this.start;this.pos=0;e.elem=this.elem;if(e()&&Ja.push(e)===1)e.timerId=\nsetInterval(function(){for(f=0;f<Ja.length;f++)Ja[f]()||Ja.splice(f--,1);Ja.length||clearInterval(e.timerId)},13)},step:function(a){var b=+new ma,c,d=this.options;c=this.elem;var e=d.complete,f=d.duration,g=d.curAnim,h;if(c.attr&&!c.element)c=!1;else if(a||b>=f+this.startTime){this.now=this.end;this.pos=1;this.update();a=g[this.prop]=!0;for(h in g)g[h]!==!0&&(a=!1);a&&e&&e.call(c);c=!1}else this.pos=d.easing((b-this.startTime)/f),this.now=this.start+(this.end-this.start)*this.pos,this.update(),c=\n!0;return c},initPath:function(a,b,c){function d(a){for(n=a.length;n--;)(a[n]===X||a[n]===S)&&a.splice(n+1,0,a[n+1],a[n+2],a[n+1],a[n+2])}function e(a,b){for(;a.length<l;){a[0]=b[l-a.length];var c=a.slice(0,k);[].splice.apply(a,[0,0].concat(c));o&&(c=a.slice(a.length-k),[].splice.apply(a,[a.length,0].concat(c)),n--)}a[0]="M"}function f(a,b){for(var c=(l-a.length)/k;c>0&&c--;)m=a.slice().splice(a.length/z-k,k*z),m[0]=b[l-k-c*k],j&&(m[k-6]=m[k-2],m[k-5]=m[k-1]),[].splice.apply(a,[a.length/z,0].concat(m)),\no&&c--}var b=b||"",g,h=a.startX,i=a.endX,j=b.indexOf("C")>-1,k=j?7:3,l,m,n,b=b.split(" "),c=c.slice(),o=a.isArea,z=o?2:1,r;j&&(d(b),d(c));if(h&&i){for(n=0;n<h.length;n++)if(h[n]===i[0]){g=n;break}else if(h[0]===i[i.length-h.length+n]){g=n;r=!0;break}g===void 0&&(b=[])}b.length&&u.isNumber(g)&&(l=c.length+g*z*k,r?(e(b,c),f(c,b)):(e(c,b),f(b,c)));return[b,c]}};var x=u.extend=function(a,b){var c;a||(a={});for(c in b)a[c]=b[c];return a},$=u.isObject=function(a,b){return a&&typeof a==="object"&&(!b||!Fa(a))},\nJ=u.isNumber=function(a){return typeof a==="number"&&!isNaN(a)},p=u.pick=function(){var a=arguments,b,c,d=a.length;for(b=0;b<d;b++)if(c=a[b],c!==A&&c!==null)return c},hb=u.wrap=function(a,b,c){var d=a[b];a[b]=function(){var a=Array.prototype.slice.call(arguments);a.unshift(d);return c.apply(this,a)}};Sa=function(a,b,c){if(!s(b)||isNaN(b))return U.lang.invalidDate||"";var a=p(a,"%Y-%m-%d %H:%M:%S"),d=new ma(b-$a(b)),e,f=d[xb](),g=d[yb](),h=d[Wa](),i=d[cb](),j=d[db](),k=U.lang,l=k.weekdays,m=k.shortWeekdays,\nd=x({a:m?m[g]:l[g].substr(0,3),A:l[g],d:Ga(h),e:Ga(h,2," "),w:g,b:k.shortMonths[i],B:k.months[i],m:Ga(i+1),y:j.toString().substr(2,2),Y:j,H:Ga(f),k:f,I:Ga(f%12||12),l:f%12||12,M:Ga(d[wb]()),p:f<12?"AM":"PM",P:f<12?"am":"pm",S:Ga(d.getSeconds()),L:Ga(C(b%1E3),3)},u.dateFormats);for(e in d)for(;a.indexOf("%"+e)!==-1;)a=a.replace("%"+e,typeof d[e]==="function"?d[e](b):d[e]);return c?a.substr(0,1).toUpperCase()+a.substr(1):a};H={millisecond:1,second:1E3,minute:6E4,hour:36E5,day:864E5,week:6048E5,month:24192E5,\nyear:314496E5};u.numberFormat=function(a,b,c,d){var a=+a||0,b=+b,e=U.lang,f=(a.toString().split(".")[1]||"").length,g,h,i=Math.abs(a);b===-1?b=Math.min(f,20):J(b)||(b=2);g=String(B(i.toFixed(b)));h=g.length>3?g.length%3:0;c=p(c,e.decimalPoint);d=p(d,e.thousandsSep);a=a<0?"-":"";a+=h?g.substr(0,h)+d:"";a+=g.substr(h).replace(/(\\d{3})(?=\\d)/g,"$1"+d);b&&(d=Math.abs(i-g+Math.pow(10,-Math.max(b,f)-1)),a+=c+d.toFixed(b).slice(2));return a};Math.easeInOutSine=function(a){return-0.5*(Math.cos(Math.PI*a)-\n1)};oa=function(a,b){var c;if(b==="width")return Math.min(a.offsetWidth,a.scrollWidth)-oa(a,"padding-left")-oa(a,"padding-right");else if(b==="height")return Math.min(a.offsetHeight,a.scrollHeight)-oa(a,"padding-top")-oa(a,"padding-bottom");return(c=D.getComputedStyle(a,void 0))&&B(c.getPropertyValue(b))};pa=function(a,b){return b.indexOf?b.indexOf(a):[].indexOf.call(b,a)};Ca=function(a,b){return[].filter.call(a,b)};Da=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)c[d]=b.call(a[d],a[d],d,a);return c};\nCb=function(a){var b=y.documentElement,a=a.getBoundingClientRect();return{top:a.top+(D.pageYOffset||b.scrollTop)-(b.clientTop||0),left:a.left+(D.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}};Ka=function(a){for(var b=Ja.length;b--;)if(Ja[b].elem===a)Ja[b].stopped=!0};q=function(a,b){return Array.prototype.forEach.call(a,b)};N=function(a,b,c){function d(b){b.target=b.srcElement||D;c.call(a,b)}var e=a.hcEvents=a.hcEvents||{};if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent){if(!a.hcEventsIE)a.hcEventsIE=\n{};a.hcEventsIE[c.toString()]=d;a.attachEvent("on"+b,d)}e[b]||(e[b]=[]);e[b].push(c)};Y=function(a,b,c){function d(b,c){a.removeEventListener?a.removeEventListener(b,c,!1):a.attachEvent&&(c=a.hcEventsIE[c.toString()],a.detachEvent("on"+b,c))}function e(){var c,e,f;if(a.nodeName)for(f in b?(c={},c[b]=!0):c=g,c)if(g[f])for(e=g[f].length;e--;)d(f,g[f][e])}var f,g=a.hcEvents,h;if(g)b?(f=g[b]||[],c?(h=pa(c,f),h>-1&&(f.splice(h,1),g[b]=f),d(b,c)):(e(),g[b]=[])):(e(),a.hcEvents={})};I=function(a,b,c,d){var e;\ne=a.hcEvents;var f,g,c=c||{};if(y.createEvent&&(a.dispatchEvent||a.fireEvent))e=y.createEvent("Events"),e.initEvent(b,!0,!0),e.target=a,x(e,c),a.dispatchEvent?a.dispatchEvent(e):a.fireEvent(b,e);else if(e){e=e[b]||[];f=e.length;if(!c.preventDefault)c.preventDefault=function(){c.defaultPrevented=!0};c.target=a;if(!c.type)c.type=b;for(b=0;b<f;b++)(g=e[b])&&g.call(a,c)===!1&&c.preventDefault()}d&&!c.defaultPrevented&&d(c)};Ya=function(a,b,c){var d,e="",f,g,h;$(c)||(d=arguments,c={duration:d[2],easing:d[3],\ncomplete:d[4]});if(!J(c.duration))c.duration=400;c.easing=typeof c.easing==="function"?c.easing:Math[c.easing]||Math.easeInOutSine;c.curAnim=E(b);for(h in b)g=new sb(a,c,h),f=null,h==="d"?(g.paths=g.initPath(a,a.d,b.d),g.toD=b.d,d=0,f=1):a.attr?d=a.attr(h):(d=parseFloat(oa(a,h))||0,h!=="opacity"&&(e="px")),f||(f=b[h]),f.match&&f.match("px")&&(f=f.replace(/px/g,"")),g.run(d,f,e)};if(D.jQuery)D.jQuery.fn.highcharts=function(){var a=[].slice.call(arguments);if(this[0])return a[0]?(new (u[ya(a[0])?a.shift():\n"Chart"])(this[0],a[0],a[1]),this):T[P(this[0],"data-highcharts-chart")]};y&&!y.defaultView&&(oa=function(a,b){var c;c={width:"clientWidth",height:"clientHeight"}[b];if(a.style[b])return B(a.style[b]);b==="opacity"&&(b="filter");if(c)return a.style.zoom=1,Math.max(a[c]-2*oa(a,"padding"),0);c=a.currentStyle[b.replace(/\\-(\\w)/g,function(a,b){return b.toUpperCase()})];b==="filter"&&(c=c.replace(/alpha\\(opacity=([0-9]+)\\)/,function(a,b){return b/100}));return c===""?1:B(c)});Array.prototype.forEach||\n(q=function(a,b){for(var c=0,d=a.length;c<d;c++)if(b.call(a[c],a[c],c,a)===!1)return c});Array.prototype.indexOf||(pa=function(a,b){var c,d=0;if(b)for(c=b.length;d<c;d++)if(b[d]===a)return d;return-1});Array.prototype.filter||(Ca=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)b(a[d],d)&&c.push(a[d]);return c});u.Fx=sb;u.inArray=pa;u.each=q;u.grep=Ca;u.offset=Cb;u.map=Da;u.addEvent=N;u.removeEvent=Y;u.fireEvent=I;u.animate=Ya;u.animObject=bb;u.stop=Ka;U={colors:"#7cb5ec,#434348,#90ed7d,#f7a35c,#8085e9,#f15c80,#e4d354,#2b908f,#f45b5b,#91e8e1".split(","),\nsymbols:["circle","diamond","square","triangle","triangle-down"],lang:{loading:"Loading...",months:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),shortMonths:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),weekdays:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),decimalPoint:".",numericSymbols:"k,M,G,T,P,E".split(","),resetZoom:"Reset zoom",resetZoomTitle:"Reset zoom level 1:1",thousandsSep:" "},global:{useUTC:!0,\ncanvasToolsURL:"http://code.highcharts.com/modules/canvas-tools.js",VMLRadialGradientURL:"http://code.highcharts.com/4.2.6/gfx/vml-radial-gradient.png"},chart:{borderColor:"#4572A7",borderRadius:0,defaultSeriesType:"line",ignoreHiddenSeries:!0,spacing:[10,10,15,10],backgroundColor:"#FFFFFF",plotBorderColor:"#C0C0C0",resetZoomButton:{theme:{zIndex:20},position:{align:"right",x:-10,y:10}},width:null,height:null},title:{text:"Chart title",align:"center",margin:15,style:{color:"#333333",fontSize:"18px"},\nwidthAdjust:-44},subtitle:{text:"",align:"center",style:{color:"#555555"},widthAdjust:-44},plotOptions:{line:{allowPointSelect:!1,showCheckbox:!1,animation:{duration:1E3},events:{},lineWidth:2,marker:{lineWidth:0,radius:4,lineColor:"#FFFFFF",states:{hover:{enabled:!0,lineWidthPlus:1,radiusPlus:2},select:{fillColor:"#FFFFFF",lineColor:"#000000",lineWidth:2}}},point:{events:{}},dataLabels:{align:"center",formatter:function(){return this.y===null?"":u.numberFormat(this.y,-1)},style:{color:"contrast",\nfontSize:"11px",fontWeight:"bold",textShadow:"0 0 6px contrast, 0 0 3px contrast"},verticalAlign:"bottom",x:0,y:0,padding:5},cropThreshold:300,pointRange:0,softThreshold:!0,states:{hover:{lineWidthPlus:1,marker:{},halo:{size:10,opacity:0.25}},select:{marker:{}}},stickyTracking:!0,turboThreshold:1E3}},labels:{style:{position:"absolute",color:"#3E576F"}},legend:{enabled:!0,align:"center",layout:"horizontal",labelFormatter:function(){return this.name},borderColor:"#909090",borderRadius:0,navigation:{activeColor:"#274b6d",\ninactiveColor:"#CCC"},shadow:!1,itemStyle:{color:"#333333",fontSize:"12px",fontWeight:"bold"},itemHoverStyle:{color:"#000"},itemHiddenStyle:{color:"#CCC"},itemCheckboxStyle:{position:"absolute",width:"13px",height:"13px"},symbolPadding:5,verticalAlign:"bottom",x:0,y:0,title:{style:{fontWeight:"bold"}}},loading:{labelStyle:{fontWeight:"bold",position:"relative",top:"45%"},style:{position:"absolute",backgroundColor:"white",opacity:0.5,textAlign:"center"}},tooltip:{enabled:!0,animation:ga,backgroundColor:"rgba(249, 249, 249, .85)",\nborderWidth:1,borderRadius:3,dateTimeLabelFormats:{millisecond:"%A, %b %e, %H:%M:%S.%L",second:"%A, %b %e, %H:%M:%S",minute:"%A, %b %e, %H:%M",hour:"%A, %b %e, %H:%M",day:"%A, %b %e, %Y",week:"Week from %A, %b %e, %Y",month:"%B %Y",year:"%Y"},footerFormat:"",headerFormat:\'<span style="font-size: 10px">{point.key}</span><br/>\',pointFormat:\'<span style="color:{point.color}">\\u25cf</span> {series.name}: <b>{point.y}</b><br/>\',shadow:!0,snap:Nb?25:10,style:{color:"#333333",cursor:"default",fontSize:"12px",\npadding:"8px",pointerEvents:"none",whiteSpace:"nowrap"}},credits:{enabled:!0,text:"Highcharts.com",href:"http://www.highcharts.com",position:{align:"right",x:-10,verticalAlign:"bottom",y:-5},style:{cursor:"pointer",color:"#909090",fontSize:"9px"}}};var fa=U.plotOptions,ha=fa.line;Gb();na.prototype={parsers:[{regex:/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/,parse:function(a){return[B(a[1]),B(a[2]),B(a[3]),parseFloat(a[4],10)]}},{regex:/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,\nparse:function(a){return[B(a[1],16),B(a[2],16),B(a[3],16),1]}},{regex:/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/,parse:function(a){return[B(a[1]),B(a[2]),B(a[3]),1]}}],init:function(a){var b,c,d,e;if((this.input=a)&&a.stops)this.stops=Da(a.stops,function(a){return new na(a[1])});else for(d=this.parsers.length;d--&&!c;)e=this.parsers[d],(b=e.regex.exec(a))&&(c=e.parse(b));this.rgba=c||[]},get:function(a){var b=this.input,c=this.rgba,d;this.stops?(d=E(b),d.stops=[].concat(d.stops),\nq(this.stops,function(b,c){d.stops[c]=[d.stops[c][0],b.get(a)]})):d=c&&J(c[0])?a==="rgb"||!a&&c[3]===1?"rgb("+c[0]+","+c[1]+","+c[2]+")":a==="a"?c[3]:"rgba("+c.join(",")+")":b;return d},brighten:function(a){var b,c=this.rgba;if(this.stops)q(this.stops,function(b){b.brighten(a)});else if(J(a)&&a!==0)for(b=0;b<3;b++)c[b]+=B(a*255),c[b]<0&&(c[b]=0),c[b]>255&&(c[b]=255);return this},setOpacity:function(a){this.rgba[3]=a;return this}};O.prototype={opacity:1,textProps:"direction,fontSize,fontWeight,fontFamily,fontStyle,color,lineHeight,width,textDecoration,textOverflow,textShadow".split(","),\ninit:function(a,b){this.element=b==="span"?da(b):y.createElementNS(Ia,b);this.renderer=a},animate:function(a,b,c){b=p(b,this.renderer.globalAnimation,!0);Ka(this);if(b){if(c)b.complete=c;Ya(this,a,b)}else this.attr(a,null,c);return this},colorGradient:function(a,b,c){var d=this.renderer,e,f,g,h,i,j,k,l,m,n,o,z=[],r;a.linearGradient?f="linearGradient":a.radialGradient&&(f="radialGradient");if(f){g=a[f];i=d.gradients;k=a.stops;n=c.radialReference;Fa(g)&&(a[f]=g={x1:g[0],y1:g[1],x2:g[2],y2:g[3],gradientUnits:"userSpaceOnUse"});\nf==="radialGradient"&&n&&!s(g.gradientUnits)&&(h=g,g=E(g,d.getRadialAttr(n,h),{gradientUnits:"userSpaceOnUse"}));for(o in g)o!=="id"&&z.push(o,g[o]);for(o in k)z.push(k[o]);z=z.join(",");i[z]?n=i[z].attr("id"):(g.id=n="highcharts-"+Bb++,i[z]=j=d.createElement(f).attr(g).add(d.defs),j.radAttr=h,j.stops=[],q(k,function(a){a[1].indexOf("rgba")===0?(e=na(a[1]),l=e.get("rgb"),m=e.get("a")):(l=a[1],m=1);a=d.createElement("stop").attr({offset:a[0],"stop-color":l,"stop-opacity":m}).add(j);j.stops.push(a)}));\nr="url("+d.url+"#"+n+")";c.setAttribute(b,r);c.gradient=z;a.toString=function(){return r}}},applyTextShadow:function(a){var b=this.element,c,d=a.indexOf("contrast")!==-1,e={},f=this.renderer.forExport,g=f||b.style.textShadow!==A&&!za;if(d)e.textShadow=a=a.replace(/contrast/g,this.renderer.getContrast(b.style.fill));if(ob||f)e.textRendering="geometricPrecision";g?this.css(e):(this.fakeTS=!0,this.ySetter=this.xSetter,c=[].slice.call(b.getElementsByTagName("tspan")),q(a.split(/\\s?,\\s?/g),function(a){var d=\nb.firstChild,e,f,a=a.split(" ");e=a[a.length-1];(f=a[a.length-2])&&q(c,function(a,c){var g;c===0&&(a.setAttribute("x",b.getAttribute("x")),c=b.getAttribute("y"),a.setAttribute("y",c||0),c===null&&b.setAttribute("y",0));g=a.cloneNode(1);P(g,{"class":"highcharts-text-shadow",fill:e,stroke:e,"stroke-opacity":1/t(B(f),3),"stroke-width":f,"stroke-linejoin":"round"});b.insertBefore(g,d)})}))},attr:function(a,b,c){var d,e=this.element,f,g=this,h;typeof a==="string"&&b!==A&&(d=a,a={},a[d]=b);if(typeof a===\n"string")g=(this[a+"Getter"]||this._defaultGetter).call(this,a,e);else{for(d in a){b=a[d];h=!1;this.symbolName&&/^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(d)&&(f||(this.symbolAttr(a),f=!0),h=!0);if(this.rotation&&(d==="x"||d==="y"))this.doTransform=!0;h||(h=this[d+"Setter"]||this._defaultSetter,h.call(this,b,d,e),this.shadows&&/^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(d)&&this.updateShadows(d,b,h))}if(this.doTransform)this.updateTransform(),this.doTransform=!1}c&&\nc();return g},updateShadows:function(a,b,c){for(var d=this.shadows,e=d.length;e--;)c.call(d[e],a==="height"?Math.max(b-(d[e].cutHeight||0),0):a==="d"?this.d:b,a,d[e])},addClass:function(a){var b=this.element,c=P(b,"class")||"";c.indexOf(a)===-1&&P(b,"class",c+" "+a);return this},symbolAttr:function(a){var b=this;q("x,y,r,start,end,width,height,innerR,anchorX,anchorY".split(","),function(c){b[c]=p(a[c],b[c])});b.attr({d:b.renderer.symbols[b.symbolName](b.x,b.y,b.width,b.height,b)})},clip:function(a){return this.attr("clip-path",\na?"url("+this.renderer.url+"#"+a.id+")":"none")},crisp:function(a){var b,c={},d,e=this.strokeWidth||0;d=C(e)%2/2;a.x=V(a.x||this.x||0)+d;a.y=V(a.y||this.y||0)+d;a.width=V((a.width||this.width||0)-2*d);a.height=V((a.height||this.height||0)-2*d);a.strokeWidth=e;for(b in a)this[b]!==a[b]&&(this[b]=c[b]=a[b]);return c},css:function(a){var b=this.styles,c={},d=this.element,e,f,g="";e=!b;if(a&&a.color)a.fill=a.color;if(b)for(f in a)a[f]!==b[f]&&(c[f]=a[f],e=!0);if(e){e=this.textWidth=a&&a.width&&d.nodeName.toLowerCase()===\n"text"&&B(a.width)||this.textWidth;b&&(a=x(b,c));this.styles=a;e&&(la||!ga&&this.renderer.forExport)&&delete a.width;if(za&&!ga)M(this.element,a);else{b=function(a,b){return"-"+b.toLowerCase()};for(f in a)g+=f.replace(/([A-Z])/g,b)+":"+a[f]+";";P(d,"style",g)}e&&this.added&&this.renderer.buildText(this)}return this},on:function(a,b){var c=this,d=c.element;fb&&a==="click"?(d.ontouchstart=function(a){c.touchEventFired=ma.now();a.preventDefault();b.call(d,a)},d.onclick=function(a){(Aa.indexOf("Android")===\n-1||ma.now()-(c.touchEventFired||0)>1100)&&b.call(d,a)}):d["on"+a]=b;return this},setRadialReference:function(a){var b=this.renderer.gradients[this.element.gradient];this.element.radialReference=a;b&&b.radAttr&&b.animate(this.renderer.getRadialAttr(a,b.radAttr));return this},translate:function(a,b){return this.attr({translateX:a,translateY:b})},invert:function(){this.inverted=!0;this.updateTransform();return this},updateTransform:function(){var a=this.translateX||0,b=this.translateY||0,c=this.scaleX,\nd=this.scaleY,e=this.inverted,f=this.rotation,g=this.element;e&&(a+=this.attr("width"),b+=this.attr("height"));a=["translate("+a+","+b+")"];e?a.push("rotate(90) scale(-1,1)"):f&&a.push("rotate("+f+" "+(g.getAttribute("x")||0)+" "+(g.getAttribute("y")||0)+")");(s(c)||s(d))&&a.push("scale("+p(c,1)+" "+p(d,1)+")");a.length&&g.setAttribute("transform",a.join(" "))},toFront:function(){var a=this.element;a.parentNode.appendChild(a);return this},align:function(a,b,c){var d,e,f,g,h={};e=this.renderer;f=e.alignedObjects;\nif(a){if(this.alignOptions=a,this.alignByTranslate=b,!c||ya(c))this.alignTo=d=c||"renderer",ra(f,this),f.push(this),c=null}else a=this.alignOptions,b=this.alignByTranslate,d=this.alignTo;c=p(c,e[d],e);d=a.align;e=a.verticalAlign;f=(c.x||0)+(a.x||0);g=(c.y||0)+(a.y||0);if(d==="right"||d==="center")f+=(c.width-(a.width||0))/{right:1,center:2}[d];h[b?"translateX":"x"]=C(f);if(e==="bottom"||e==="middle")g+=(c.height-(a.height||0))/({bottom:1,middle:2}[e]||1);h[b?"translateY":"y"]=C(g);this[this.placed?\n"animate":"attr"](h);this.placed=!0;this.alignAttr=h;return this},getBBox:function(a,b){var c,d=this.renderer,e,f,g,h=this.element,i=this.styles;e=this.textStr;var j,k=h.style,l,m=d.cache,n=d.cacheKeys,o;f=p(b,this.rotation);g=f*ka;e!==A&&(o=["",f||0,i&&i.fontSize,h.style.width].join(","),o=e===""||Sb.test(e)?"num:"+e.toString().length+o:e+o);o&&!a&&(c=m[o]);if(!c){if(h.namespaceURI===Ia||d.forExport){try{l=this.fakeTS&&function(a){q(h.querySelectorAll(".highcharts-text-shadow"),function(b){b.style.display=\na})},Qa&&k.textShadow?(j=k.textShadow,k.textShadow=""):l&&l("none"),c=h.getBBox?x({},h.getBBox()):{width:h.offsetWidth,height:h.offsetHeight},j?k.textShadow=j:l&&l("")}catch(z){}if(!c||c.width<0)c={width:0,height:0}}else c=this.htmlGetBBox();if(d.isSVG){d=c.width;e=c.height;if(za&&i&&i.fontSize==="11px"&&e.toPrecision(3)==="16.9")c.height=e=14;if(f)c.width=Q(e*ea(g))+Q(d*W(g)),c.height=Q(e*W(g))+Q(d*ea(g))}if(o){for(;n.length>250;)delete m[n.shift()];m[o]||n.push(o);m[o]=c}}return c},show:function(a){return this.attr({visibility:a?\n"inherit":"visible"})},hide:function(){return this.attr({visibility:"hidden"})},fadeOut:function(a){var b=this;b.animate({opacity:0},{duration:a||150,complete:function(){b.attr({y:-9999})}})},add:function(a){var b=this.renderer,c=this.element,d;if(a)this.parentGroup=a;this.parentInverted=a&&a.inverted;this.textStr!==void 0&&b.buildText(this);this.added=!0;if(!a||a.handleZ||this.zIndex)d=this.zIndexSetter();d||(a?a.element:b.box).appendChild(c);if(this.onAdd)this.onAdd();return this},safeRemoveChild:function(a){var b=\na.parentNode;b&&b.removeChild(a)},destroy:function(){var a=this,b=a.element||{},c=a.shadows,d=a.renderer.isSVG&&b.nodeName==="SPAN"&&a.parentGroup,e,f;b.onclick=b.onmouseout=b.onmouseover=b.onmousemove=b.point=null;Ka(a);if(a.clipPath)a.clipPath=a.clipPath.destroy();if(a.stops){for(f=0;f<a.stops.length;f++)a.stops[f]=a.stops[f].destroy();a.stops=null}a.safeRemoveChild(b);for(c&&q(c,function(b){a.safeRemoveChild(b)});d&&d.div&&d.div.childNodes.length===0;)b=d.parentGroup,a.safeRemoveChild(d.div),delete d.div,\nd=b;a.alignTo&&ra(a.renderer.alignedObjects,a);for(e in a)delete a[e];return null},shadow:function(a,b,c){var d=[],e,f,g=this.element,h,i,j,k;if(a){i=p(a.width,3);j=(a.opacity||0.15)/i;k=this.parentInverted?"(-1,-1)":"("+p(a.offsetX,1)+", "+p(a.offsetY,1)+")";for(e=1;e<=i;e++){f=g.cloneNode(0);h=i*2+1-2*e;P(f,{isShadow:"true",stroke:a.color||"black","stroke-opacity":j*e,"stroke-width":h,transform:"translate"+k,fill:"none"});if(c)P(f,"height",t(P(f,"height")-h,0)),f.cutHeight=h;b?b.element.appendChild(f):\ng.parentNode.insertBefore(f,g);d.push(f)}this.shadows=d}return this},xGetter:function(a){this.element.nodeName==="circle"&&(a={x:"cx",y:"cy"}[a]||a);return this._defaultGetter(a)},_defaultGetter:function(a){a=p(this[a],this.element?this.element.getAttribute(a):null,0);/^[\\-0-9\\.]+$/.test(a)&&(a=parseFloat(a));return a},dSetter:function(a,b,c){a&&a.join&&(a=a.join(" "));/(NaN| {2}|^$)/.test(a)&&(a="M 0 0");c.setAttribute(b,a);this[b]=a},dashstyleSetter:function(a){var b,c=this["stroke-width"];c===\n"inherit"&&(c=1);if(a=a&&a.toLowerCase()){a=a.replace("shortdashdotdot","3,1,1,1,1,1,").replace("shortdashdot","3,1,1,1").replace("shortdot","1,1,").replace("shortdash","3,1,").replace("longdash","8,3,").replace(/dot/g,"1,3,").replace("dash","4,3,").replace(/,$/,"").split(",");for(b=a.length;b--;)a[b]=B(a[b])*c;a=a.join(",").replace(/NaN/g,"none");this.element.setAttribute("stroke-dasharray",a)}},alignSetter:function(a){this.element.setAttribute("text-anchor",{left:"start",center:"middle",right:"end"}[a])},\nopacitySetter:function(a,b,c){this[b]=a;c.setAttribute(b,a)},titleSetter:function(a){var b=this.element.getElementsByTagName("title")[0];b||(b=y.createElementNS(Ia,"title"),this.element.appendChild(b));b.firstChild&&b.removeChild(b.firstChild);b.appendChild(y.createTextNode(String(p(a),"").replace(/<[^>]*>/g,"")))},textSetter:function(a){if(a!==this.textStr)delete this.bBox,this.textStr=a,this.added&&this.renderer.buildText(this)},fillSetter:function(a,b,c){typeof a==="string"?c.setAttribute(b,a):\na&&this.colorGradient(a,b,c)},visibilitySetter:function(a,b,c){a==="inherit"?c.removeAttribute(b):c.setAttribute(b,a)},zIndexSetter:function(a,b){var c=this.renderer,d=this.parentGroup,c=(d||c).element||c.box,e,f,g=this.element,h;e=this.added;var i;if(s(a))g.zIndex=a,a=+a,this[b]===a&&(e=!1),this[b]=a;if(e){if((a=this.zIndex)&&d)d.handleZ=!0;d=c.childNodes;for(i=0;i<d.length&&!h;i++)if(e=d[i],f=e.zIndex,e!==g&&(B(f)>a||!s(a)&&s(f)))c.insertBefore(g,e),h=!0;h||c.appendChild(g)}return h},_defaultSetter:function(a,\nb,c){c.setAttribute(b,a)}};O.prototype.yGetter=O.prototype.xGetter;O.prototype.translateXSetter=O.prototype.translateYSetter=O.prototype.rotationSetter=O.prototype.verticalAlignSetter=O.prototype.scaleXSetter=O.prototype.scaleYSetter=function(a,b){this[b]=a;this.doTransform=!0};O.prototype["stroke-widthSetter"]=O.prototype.strokeSetter=function(a,b,c){this[b]=a;if(this.stroke&&this["stroke-width"])this.strokeWidth=this["stroke-width"],O.prototype.fillSetter.call(this,this.stroke,"stroke",c),c.setAttribute("stroke-width",\nthis["stroke-width"]),this.hasStroke=!0;else if(b==="stroke-width"&&a===0&&this.hasStroke)c.removeAttribute("stroke"),this.hasStroke=!1};var Ea=function(){this.init.apply(this,arguments)};Ea.prototype={Element:O,init:function(a,b,c,d,e,f){var g,d=this.createElement("svg").attr({version:"1.1"}).css(this.getStyle(d));g=d.element;a.appendChild(g);a.innerHTML.indexOf("xmlns")===-1&&P(g,"xmlns",Ia);this.isSVG=!0;this.box=g;this.boxWrapper=d;this.alignedObjects=[];this.url=(Qa||ob)&&y.getElementsByTagName("base").length?\nD.location.href.replace(/#.*?$/,"").replace(/([\\(\'\\)])/g,"\\\\$1").replace(/ /g,"%20"):"";this.createElement("desc").add().element.appendChild(y.createTextNode("Created with Highcharts 4.2.6"));this.defs=this.createElement("defs").add();this.allowHTML=f;this.forExport=e;this.gradients={};this.cache={};this.cacheKeys=[];this.imgCount=0;this.setSize(b,c,!1);var h;if(Qa&&a.getBoundingClientRect)this.subPixelFix=b=function(){M(a,{left:0,top:0});h=a.getBoundingClientRect();M(a,{left:va(h.left)-h.left+"px",\ntop:va(h.top)-h.top+"px"})},b(),N(D,"resize",b)},getStyle:function(a){return this.style=x({fontFamily:\'"Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif\',fontSize:"12px"},a)},isHidden:function(){return!this.boxWrapper.getBBox().width},destroy:function(){var a=this.defs;this.box=null;this.boxWrapper=this.boxWrapper.destroy();Ta(this.gradients||{});this.gradients=null;if(a)this.defs=a.destroy();this.subPixelFix&&Y(D,"resize",this.subPixelFix);return this.alignedObjects=null},createElement:function(a){var b=\nnew this.Element;b.init(this,a);return b},draw:function(){},getRadialAttr:function(a,b){return{cx:a[0]-a[2]/2+b.cx*a[2],cy:a[1]-a[2]/2+b.cy*a[2],r:b.r*a[2]}},buildText:function(a){for(var b=a.element,c=this,d=c.forExport,e=p(a.textStr,"").toString(),f=e.indexOf("<")!==-1,g=b.childNodes,h,i,j,k=P(b,"x"),l=a.styles,m=a.textWidth,n=l&&l.lineHeight,o=l&&l.textShadow,z=l&&l.textOverflow==="ellipsis",r=g.length,G=m&&!a.added&&this.box,w=function(a){return n?B(n):c.fontMetrics(/(px|em)$/.test(a&&a.style.fontSize)?\na.style.fontSize:l&&l.fontSize||c.style.fontSize||12,a).h},v=function(a){return a.replace(/&lt;/g,"<").replace(/&gt;/g,">")};r--;)b.removeChild(g[r]);!f&&!o&&!z&&!m&&e.indexOf(" ")===-1?b.appendChild(y.createTextNode(v(e))):(h=/<.*style="([^"]+)".*>/,i=/<.*href="(http[^"]+)".*>/,G&&G.appendChild(b),e=f?e.replace(/<(b|strong)>/g,\'<span style="font-weight:bold">\').replace(/<(i|em)>/g,\'<span style="font-style:italic">\').replace(/<a/g,"<span").replace(/<\\/(b|strong|i|em|a)>/g,"</span>").split(/<br.*?>/g):\n[e],e=Ca(e,function(a){return a!==""}),q(e,function(e,f){var g,n=0,e=e.replace(/^\\s+|\\s+$/g,"").replace(/<span/g,"|||<span").replace(/<\\/span>/g,"</span>|||");g=e.split("|||");q(g,function(e){if(e!==""||g.length===1){var o={},r=y.createElementNS(Ia,"tspan"),p;h.test(e)&&(p=e.match(h)[1].replace(/(;| |^)color([ :])/,"$1fill$2"),P(r,"style",p));i.test(e)&&!d&&(P(r,"onclick",\'location.href="\'+e.match(i)[1]+\'"\'),M(r,{cursor:"pointer"}));e=v(e.replace(/<(.|\\n)*?>/g,"")||" ");if(e!==" "){r.appendChild(y.createTextNode(e));\nif(n)o.dx=0;else if(f&&k!==null)o.x=k;P(r,o);b.appendChild(r);!n&&f&&(!ga&&d&&M(r,{display:"block"}),P(r,"dy",w(r)));if(m){for(var o=e.replace(/([^\\^])-/g,"$1- ").split(" "),q=g.length>1||f||o.length>1&&l.whiteSpace!=="nowrap",G,s,La=[],t=w(r),x=1,C=a.rotation,A=e,u=A.length;(q||z)&&(o.length||La.length);)a.rotation=0,G=a.getBBox(!0),s=G.width,!ga&&c.forExport&&(s=c.measureSpanWidth(r.firstChild.data,a.styles)),G=s>m,j===void 0&&(j=G),z&&j?(u/=2,A===""||!G&&u<0.5?o=[]:(A=e.substring(0,A.length+(G?\n-1:1)*va(u)),o=[A+(m>3?"\\u2026":"")],r.removeChild(r.firstChild))):!G||o.length===1?(o=La,La=[],o.length&&(x++,r=y.createElementNS(Ia,"tspan"),P(r,{dy:t,x:k}),p&&P(r,"style",p),b.appendChild(r)),s>m&&(m=s)):(r.removeChild(r.firstChild),La.unshift(o.pop())),o.length&&r.appendChild(y.createTextNode(o.join(" ").replace(/- /g,"-")));a.rotation=C}n++}}})}),j&&a.attr("title",a.textStr),G&&G.removeChild(b),o&&a.applyTextShadow&&a.applyTextShadow(o))},getContrast:function(a){a=na(a).rgba;return a[0]+a[1]+\na[2]>384?"#000000":"#FFFFFF"},button:function(a,b,c,d,e,f,g,h,i){var j=this.label(a,b,c,i,null,null,null,null,"button"),k=0,l,m,n,o,z,r,a={x1:0,y1:0,x2:0,y2:1},e=E({"stroke-width":1,stroke:"#CCCCCC",fill:{linearGradient:a,stops:[[0,"#FEFEFE"],[1,"#F6F6F6"]]},r:2,padding:5,style:{color:"black"}},e);n=e.style;delete e.style;f=E(e,{stroke:"#68A",fill:{linearGradient:a,stops:[[0,"#FFF"],[1,"#ACF"]]}},f);o=f.style;delete f.style;g=E(e,{stroke:"#68A",fill:{linearGradient:a,stops:[[0,"#9BD"],[1,"#CDF"]]}},\ng);z=g.style;delete g.style;h=E(e,{style:{color:"#CCC"}},h);r=h.style;delete h.style;N(j.element,za?"mouseover":"mouseenter",function(){k!==3&&j.attr(f).css(o)});N(j.element,za?"mouseout":"mouseleave",function(){k!==3&&(l=[e,f,g][k],m=[n,o,z][k],j.attr(l).css(m))});j.setState=function(a){(j.state=k=a)?a===2?j.attr(g).css(z):a===3&&j.attr(h).css(r):j.attr(e).css(n)};return j.on("click",function(a){k!==3&&d.call(j,a)}).attr(e).css(x({cursor:"default"},n))},crispLine:function(a,b){a[1]===a[4]&&(a[1]=\na[4]=C(a[1])-b%2/2);a[2]===a[5]&&(a[2]=a[5]=C(a[2])+b%2/2);return a},path:function(a){var b={fill:"none"};Fa(a)?b.d=a:$(a)&&x(b,a);return this.createElement("path").attr(b)},circle:function(a,b,c){a=$(a)?a:{x:a,y:b,r:c};b=this.createElement("circle");b.xSetter=b.ySetter=function(a,b,c){c.setAttribute("c"+b,a)};return b.attr(a)},arc:function(a,b,c,d,e,f){if($(a))b=a.y,c=a.r,d=a.innerR,e=a.start,f=a.end,a=a.x;a=this.symbol("arc",a||0,b||0,c||0,c||0,{innerR:d||0,start:e||0,end:f||0});a.r=c;return a},\nrect:function(a,b,c,d,e,f){var e=$(a)?a.r:e,g=this.createElement("rect"),a=$(a)?a:a===A?{}:{x:a,y:b,width:t(c,0),height:t(d,0)};if(f!==A)g.strokeWidth=f,a=g.crisp(a);if(e)a.r=e;g.rSetter=function(a,b,c){P(c,{rx:a,ry:a})};return g.attr(a)},setSize:function(a,b,c){var d=this.alignedObjects,e=d.length;this.width=a;this.height=b;for(this.boxWrapper[p(c,!0)?"animate":"attr"]({width:a,height:b});e--;)d[e].align()},g:function(a){var b=this.createElement("g");return s(a)?b.attr({"class":"highcharts-"+a}):\nb},image:function(a,b,c,d,e){var f={preserveAspectRatio:"none"};arguments.length>1&&x(f,{x:b,y:c,width:d,height:e});f=this.createElement("image").attr(f);f.element.setAttributeNS?f.element.setAttributeNS("http://www.w3.org/1999/xlink","href",a):f.element.setAttribute("hc-svg-href",a);return f},symbol:function(a,b,c,d,e,f){var g=this,h,i=this.symbols[a],i=i&&i(C(b),C(c),d,e,f),j=/^url\\((.*?)\\)$/,k,l;if(i)h=this.path(i),x(h,{symbolName:a,x:b,y:c,width:d,height:e}),f&&x(h,f);else if(j.test(a))l=function(a,\nb){a.element&&(a.attr({width:b[0],height:b[1]}),a.alignByTranslate||a.translate(C((d-b[0])/2),C((e-b[1])/2)))},k=a.match(j)[1],a=Ob[k]||f&&f.width&&f.height&&[f.width,f.height],h=this.image(k).attr({x:b,y:c}),h.isImg=!0,a?l(h,a):(h.attr({width:0,height:0}),da("img",{onload:function(){this.width===0&&(M(this,{position:"absolute",top:"-999em"}),y.body.appendChild(this));l(h,Ob[k]=[this.width,this.height]);this.parentNode&&this.parentNode.removeChild(this);g.imgCount--;if(!g.imgCount&&T[g.chartIndex].onload)T[g.chartIndex].onload()},\nsrc:k}),this.imgCount++);return h},symbols:{circle:function(a,b,c,d){var e=0.166*c;return[X,a+c/2,b,"C",a+c+e,b,a+c+e,b+d,a+c/2,b+d,"C",a-e,b+d,a-e,b,a+c/2,b,"Z"]},square:function(a,b,c,d){return[X,a,b,S,a+c,b,a+c,b+d,a,b+d,"Z"]},triangle:function(a,b,c,d){return[X,a+c/2,b,S,a+c,b+d,a,b+d,"Z"]},"triangle-down":function(a,b,c,d){return[X,a,b,S,a+c,b,a+c/2,b+d,"Z"]},diamond:function(a,b,c,d){return[X,a+c/2,b,S,a+c,b+d/2,a+c/2,b+d,a,b+d/2,"Z"]},arc:function(a,b,c,d,e){var f=e.start,c=e.r||c||d,g=e.end-\n0.001,d=e.innerR,h=e.open,i=W(f),j=ea(f),k=W(g),g=ea(g),e=e.end-f<ta?0:1;return[X,a+c*i,b+c*j,"A",c,c,0,e,1,a+c*k,b+c*g,h?X:S,a+d*k,b+d*g,"A",d,d,0,e,0,a+d*i,b+d*j,h?"":"Z"]},callout:function(a,b,c,d,e){var f=F(e&&e.r||0,c,d),g=f+6,h=e&&e.anchorX,e=e&&e.anchorY,i;i=["M",a+f,b,"L",a+c-f,b,"C",a+c,b,a+c,b,a+c,b+f,"L",a+c,b+d-f,"C",a+c,b+d,a+c,b+d,a+c-f,b+d,"L",a+f,b+d,"C",a,b+d,a,b+d,a,b+d-f,"L",a,b+f,"C",a,b,a,b,a+f,b];h&&h>c&&e>b+g&&e<b+d-g?i.splice(13,3,"L",a+c,e-6,a+c+6,e,a+c,e+6,a+c,b+d-f):h&&\nh<0&&e>b+g&&e<b+d-g?i.splice(33,3,"L",a,e+6,a-6,e,a,e-6,a,b+f):e&&e>d&&h>a+g&&h<a+c-g?i.splice(23,3,"L",h+6,b+d,h,b+d+6,h-6,b+d,a+f,b+d):e&&e<0&&h>a+g&&h<a+c-g&&i.splice(3,3,"L",h-6,b,h,b-6,h+6,b,c-f,b);return i}},clipRect:function(a,b,c,d){var e="highcharts-"+Bb++,f=this.createElement("clipPath").attr({id:e}).add(this.defs),a=this.rect(a,b,c,d,0).add(f);a.id=e;a.clipPath=f;a.count=0;return a},text:function(a,b,c,d){var e=la||!ga&&this.forExport,f={};if(d&&(this.allowHTML||!this.forExport))return this.html(a,\nb,c);f.x=Math.round(b||0);if(c)f.y=Math.round(c);if(a||a===0)f.text=a;a=this.createElement("text").attr(f);e&&a.css({position:"absolute"});if(!d)a.xSetter=function(a,b,c){var d=c.getElementsByTagName("tspan"),e,f=c.getAttribute(b),m;for(m=0;m<d.length;m++)e=d[m],e.getAttribute(b)===f&&e.setAttribute(b,a);c.setAttribute(b,a)};return a},fontMetrics:function(a,b){var c,d,a=a||this.style.fontSize;!a&&b&&D.getComputedStyle&&(b=b.element||b,a=(c=D.getComputedStyle(b,""))&&c.fontSize);a=/px/.test(a)?B(a):\n/em/.test(a)?parseFloat(a)*12:12;c=a<24?a+3:C(a*1.2);d=C(c*0.8);return{h:c,b:d,f:a}},rotCorr:function(a,b,c){var d=a;b&&c&&(d=t(d*W(b*ka),4));return{x:-a/3*ea(b*ka),y:d}},label:function(a,b,c,d,e,f,g,h,i){var j=this,k=j.g(i),l=j.text("",0,0,g).attr({zIndex:1}),m,n,o=0,z=3,r=0,p,w,v,La,qb=0,ba={},t,u,y,F,D;y=function(){var a,b;a=l.element.style;n=(p===void 0||w===void 0||k.styles.textAlign)&&s(l.textStr)&&l.getBBox();k.width=(p||n.width||0)+2*z+r;k.height=(w||n.height||0)+2*z;t=z+j.fontMetrics(a&&\na.fontSize,l).b;if(u){if(!m)a=qb,b=(h?-t:0)+qb,k.box=m=j.symbols[d]?j.symbol(d,a,b,k.width,k.height,ba):j.rect(a,b,k.width,k.height,0,ba["stroke-width"]),m.isImg||m.attr("fill","none"),m.add(k);m.isImg||m.attr(x({width:C(k.width),height:C(k.height)},ba));ba=null}};F=function(){var a=k.styles,a=a&&a.textAlign,b=r+z,c;c=h?0:t;if(s(p)&&n&&(a==="center"||a==="right"))b+={center:0.5,right:1}[a]*(p-n.width);if(b!==l.x||c!==l.y)l.attr("x",b),c!==A&&l.attr("y",c);l.x=b;l.y=c};D=function(a,b){m?m.attr(a,b):\nba[a]=b};k.onAdd=function(){l.add(k);k.attr({text:a||a===0?a:"",x:b,y:c});m&&s(e)&&k.attr({anchorX:e,anchorY:f})};k.widthSetter=function(a){p=a};k.heightSetter=function(a){w=a};k.paddingSetter=function(a){if(s(a)&&a!==z)z=k.padding=a,F()};k.paddingLeftSetter=function(a){s(a)&&a!==r&&(r=a,F())};k.alignSetter=function(a){a={left:0,center:0.5,right:1}[a];a!==o&&(o=a,n&&k.attr({x:v}))};k.textSetter=function(a){a!==A&&l.textSetter(a);y();F()};k["stroke-widthSetter"]=function(a,b){a&&(u=!0);qb=a%2/2;D(b,\na)};k.strokeSetter=k.fillSetter=k.rSetter=function(a,b){b==="fill"&&a&&(u=!0);D(b,a)};k.anchorXSetter=function(a,b){e=a;D(b,C(a)-qb-v)};k.anchorYSetter=function(a,b){f=a;D(b,a-La)};k.xSetter=function(a){k.x=a;o&&(a-=o*((p||n.width)+2*z));v=C(a);k.attr("translateX",v)};k.ySetter=function(a){La=k.y=C(a);k.attr("translateY",La)};var B=k.css;return x(k,{css:function(a){if(a){var b={},a=E(a);q(k.textProps,function(c){a[c]!==A&&(b[c]=a[c],delete a[c])});l.css(b)}return B.call(k,a)},getBBox:function(){return{width:n.width+\n2*z,height:n.height+2*z,x:n.x-z,y:n.y-z}},shadow:function(a){m&&m.shadow(a);return k},destroy:function(){Y(k.element,"mouseenter");Y(k.element,"mouseleave");l&&(l=l.destroy());m&&(m=m.destroy());O.prototype.destroy.call(k);k=j=y=F=D=null}})}};eb=Ea;x(O.prototype,{htmlCss:function(a){var b=this.element;if(b=a&&b.tagName==="SPAN"&&a.width)delete a.width,this.textWidth=b,this.updateTransform();if(a&&a.textOverflow==="ellipsis")a.whiteSpace="nowrap",a.overflow="hidden";this.styles=x(this.styles,a);M(this.element,\na);return this},htmlGetBBox:function(){var a=this.element;if(a.nodeName==="text")a.style.position="absolute";return{x:a.offsetLeft,y:a.offsetTop,width:a.offsetWidth,height:a.offsetHeight}},htmlUpdateTransform:function(){if(this.added){var a=this.renderer,b=this.element,c=this.translateX||0,d=this.translateY||0,e=this.x||0,f=this.y||0,g=this.textAlign||"left",h={left:0,center:0.5,right:1}[g],i=this.shadows,j=this.styles;M(b,{marginLeft:c,marginTop:d});i&&q(i,function(a){M(a,{marginLeft:c+1,marginTop:d+\n1})});this.inverted&&q(b.childNodes,function(c){a.invertChild(c,b)});if(b.tagName==="SPAN"){var i=this.rotation,k=B(this.textWidth),l=j&&j.whiteSpace,m=[i,g,b.innerHTML,this.textWidth,this.textAlign].join(",");if(m!==this.cTT){j=a.fontMetrics(b.style.fontSize).b;s(i)&&this.setSpanRotation(i,h,j);M(b,{width:"",whiteSpace:l||"nowrap"});if(b.offsetWidth>k&&/[ \\-]/.test(b.textContent||b.innerText))M(b,{width:k+"px",display:"block",whiteSpace:l||"normal"});this.getSpanCorrection(b.offsetWidth,j,h,i,g)}M(b,\n{left:e+(this.xCorr||0)+"px",top:f+(this.yCorr||0)+"px"});if(ob)j=b.offsetHeight;this.cTT=m}}else this.alignOnAdd=!0},setSpanRotation:function(a,b,c){var d={},e=za?"-ms-transform":ob?"-webkit-transform":Qa?"MozTransform":Mb?"-o-transform":"";d[e]=d.transform="rotate("+a+"deg)";d[e+(Qa?"Origin":"-origin")]=d.transformOrigin=b*100+"% "+c+"px";M(this.element,d)},getSpanCorrection:function(a,b,c){this.xCorr=-a*c;this.yCorr=-b}});x(Ea.prototype,{html:function(a,b,c){var d=this.createElement("span"),e=\nd.element,f=d.renderer,g=f.isSVG,h=function(a,b){q(["opacity","visibility"],function(c){hb(a,c+"Setter",function(a,c,d,e){a.call(this,c,d,e);b[d]=c})})};d.textSetter=function(a){a!==e.innerHTML&&delete this.bBox;e.innerHTML=this.textStr=a;d.htmlUpdateTransform()};g&&h(d,d.element.style);d.xSetter=d.ySetter=d.alignSetter=d.rotationSetter=function(a,b){b==="align"&&(b="textAlign");d[b]=a;d.htmlUpdateTransform()};d.attr({text:a,x:C(b),y:C(c)}).css({position:"absolute",fontFamily:this.style.fontFamily,\nfontSize:this.style.fontSize});e.style.whiteSpace="nowrap";d.css=d.htmlCss;if(g)d.add=function(a){var b,c=f.box.parentNode,g=[];if(this.parentGroup=a){if(b=a.div,!b){for(;a;)g.push(a),a=a.parentGroup;q(g.reverse(),function(a){var d,e=P(a.element,"class");e&&(e={className:e});b=a.div=a.div||da(Pa,e,{position:"absolute",left:(a.translateX||0)+"px",top:(a.translateY||0)+"px",opacity:a.opacity},b||c);d=b.style;x(a,{translateXSetter:function(b,c){d.left=b+"px";a[c]=b;a.doTransform=!0},translateYSetter:function(b,\nc){d.top=b+"px";a[c]=b;a.doTransform=!0}});h(a,d)})}}else b=c;b.appendChild(e);d.added=!0;d.alignOnAdd&&d.htmlUpdateTransform();return d};return d}});var K;if(!ga&&!la){K={init:function(a,b){var c=["<",b,\' filled="f" stroked="f"\'],d=["position: ","absolute",";"],e=b===Pa;(b==="shape"||e)&&d.push("left:0;top:0;width:1px;height:1px;");d.push("visibility: ",e?"hidden":"visible");c.push(\' style="\',d.join(""),\'"/>\');if(b)c=e||b==="span"||b==="img"?c.join(""):a.prepVML(c),this.element=da(c);this.renderer=\na},add:function(a){var b=this.renderer,c=this.element,d=b.box,e=a&&a.inverted,d=a?a.element||a:d;if(a)this.parentGroup=a;e&&b.invertChild(c,d);d.appendChild(c);this.added=!0;this.alignOnAdd&&!this.deferUpdateTransform&&this.updateTransform();if(this.onAdd)this.onAdd();return this},updateTransform:O.prototype.htmlUpdateTransform,setSpanRotation:function(){var a=this.rotation,b=W(a*ka),c=ea(a*ka);M(this.element,{filter:a?["progid:DXImageTransform.Microsoft.Matrix(M11=",b,", M12=",-c,", M21=",c,", M22=",\nb,", sizingMethod=\'auto expand\')"].join(""):"none"})},getSpanCorrection:function(a,b,c,d,e){var f=d?W(d*ka):1,g=d?ea(d*ka):0,h=p(this.elemHeight,this.element.offsetHeight),i;this.xCorr=f<0&&-a;this.yCorr=g<0&&-h;i=f*g<0;this.xCorr+=g*b*(i?1-c:c);this.yCorr-=f*b*(d?i?c:1-c:1);e&&e!=="left"&&(this.xCorr-=a*c*(f<0?-1:1),d&&(this.yCorr-=h*c*(g<0?-1:1)),M(this.element,{textAlign:e}))},pathToVML:function(a){for(var b=a.length,c=[];b--;)if(J(a[b]))c[b]=C(a[b]*10)-5;else if(a[b]==="Z")c[b]="x";else if(c[b]=\na[b],a.isArc&&(a[b]==="wa"||a[b]==="at"))c[b+5]===c[b+7]&&(c[b+7]+=a[b+7]>a[b+5]?1:-1),c[b+6]===c[b+8]&&(c[b+8]+=a[b+8]>a[b+6]?1:-1);return c.join(" ")||"x"},clip:function(a){var b=this,c;a?(c=a.members,ra(c,b),c.push(b),b.destroyClip=function(){ra(c,b)},a=a.getCSS(b)):(b.destroyClip&&b.destroyClip(),a={clip:nb?"inherit":"rect(auto)"});return b.css(a)},css:O.prototype.htmlCss,safeRemoveChild:function(a){a.parentNode&&Ua(a)},destroy:function(){this.destroyClip&&this.destroyClip();return O.prototype.destroy.apply(this)},\non:function(a,b){this.element["on"+a]=function(){var a=D.event;a.target=a.srcElement;b(a)};return this},cutOffPath:function(a,b){var c,a=a.split(/[ ,]/);c=a.length;if(c===9||c===11)a[c-4]=a[c-2]=B(a[c-2])-10*b;return a.join(" ")},shadow:function(a,b,c){var d=[],e,f=this.element,g=this.renderer,h,i=f.style,j,k=f.path,l,m,n,o;k&&typeof k.value!=="string"&&(k="x");m=k;if(a){n=p(a.width,3);o=(a.opacity||0.15)/n;for(e=1;e<=3;e++){l=n*2+1-2*e;c&&(m=this.cutOffPath(k.value,l+0.5));j=[\'<shape isShadow="true" strokeweight="\',\nl,\'" filled="false" path="\',m,\'" coordsize="10 10" style="\',f.style.cssText,\'" />\'];h=da(g.prepVML(j),null,{left:B(i.left)+p(a.offsetX,1),top:B(i.top)+p(a.offsetY,1)});if(c)h.cutOff=l+1;j=[\'<stroke color="\',a.color||"black",\'" opacity="\',o*e,\'"/>\'];da(g.prepVML(j),null,null,h);b?b.element.appendChild(h):f.parentNode.insertBefore(h,f);d.push(h)}this.shadows=d}return this},updateShadows:Ba,setAttr:function(a,b){nb?this.element[a]=b:this.element.setAttribute(a,b)},classSetter:function(a){this.element.className=\na},dashstyleSetter:function(a,b,c){(c.getElementsByTagName("stroke")[0]||da(this.renderer.prepVML(["<stroke/>"]),null,null,c))[b]=a||"solid";this[b]=a},dSetter:function(a,b,c){var d=this.shadows,a=a||[];this.d=a.join&&a.join(" ");c.path=a=this.pathToVML(a);if(d)for(c=d.length;c--;)d[c].path=d[c].cutOff?this.cutOffPath(a,d[c].cutOff):a;this.setAttr(b,a)},fillSetter:function(a,b,c){var d=c.nodeName;if(d==="SPAN")c.style.color=a;else if(d!=="IMG")c.filled=a!=="none",this.setAttr("fillcolor",this.renderer.color(a,\nc,b,this))},"fill-opacitySetter":function(a,b,c){da(this.renderer.prepVML(["<",b.split("-")[0],\' opacity="\',a,\'"/>\']),null,null,c)},opacitySetter:Ba,rotationSetter:function(a,b,c){c=c.style;this[b]=c[b]=a;c.left=-C(ea(a*ka)+1)+"px";c.top=C(W(a*ka))+"px"},strokeSetter:function(a,b,c){this.setAttr("strokecolor",this.renderer.color(a,c,b,this))},"stroke-widthSetter":function(a,b,c){c.stroked=!!a;this[b]=a;J(a)&&(a+="px");this.setAttr("strokeweight",a)},titleSetter:function(a,b){this.setAttr(b,a)},visibilitySetter:function(a,\nb,c){a==="inherit"&&(a="visible");this.shadows&&q(this.shadows,function(c){c.style[b]=a});c.nodeName==="DIV"&&(a=a==="hidden"?"-999em":0,nb||(c.style[b]=a?"visible":"hidden"),b="top");c.style[b]=a},xSetter:function(a,b,c){this[b]=a;b==="x"?b="left":b==="y"&&(b="top");this.updateClipping?(this[b]=a,this.updateClipping()):c.style[b]=a},zIndexSetter:function(a,b,c){c.style[b]=a}};K["stroke-opacitySetter"]=K["fill-opacitySetter"];u.VMLElement=K=sa(O,K);K.prototype.ySetter=K.prototype.widthSetter=K.prototype.heightSetter=\nK.prototype.xSetter;var Db={Element:K,isIE8:Aa.indexOf("MSIE 8.0")>-1,init:function(a,b,c,d){var e;this.alignedObjects=[];d=this.createElement(Pa).css(x(this.getStyle(d),{position:"relative"}));e=d.element;a.appendChild(d.element);this.isVML=!0;this.box=e;this.boxWrapper=d;this.gradients={};this.cache={};this.cacheKeys=[];this.imgCount=0;this.setSize(b,c,!1);if(!y.namespaces.hcv){y.namespaces.add("hcv","urn:schemas-microsoft-com:vml");try{y.createStyleSheet().cssText="hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } "}catch(f){y.styleSheets[0].cssText+=\n"hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } "}}},isHidden:function(){return!this.box.offsetWidth},clipRect:function(a,b,c,d){var e=this.createElement(),f=$(a);return x(e,{members:[],count:0,left:(f?a.x:a)+1,top:(f?a.y:b)+1,width:(f?a.width:c)-1,height:(f?a.height:d)-1,getCSS:function(a){var b=a.element,c=b.nodeName,a=a.inverted,d=this.top-(c==="shape"?b.offsetTop:0),e=this.left,b=e+this.width,f=d+this.height,d={clip:"rect("+C(a?e:d)+"px,"+\nC(a?f:b)+"px,"+C(a?b:f)+"px,"+C(a?d:e)+"px)"};!a&&nb&&c==="DIV"&&x(d,{width:b+"px",height:f+"px"});return d},updateClipping:function(){q(e.members,function(a){a.element&&a.css(e.getCSS(a))})}})},color:function(a,b,c,d){var e=this,f,g=/^rgba/,h,i,j="none";a&&a.linearGradient?i="gradient":a&&a.radialGradient&&(i="pattern");if(i){var k,l,m=a.linearGradient||a.radialGradient,n,o,z,r,p,w="",a=a.stops,v,s=[],t=function(){h=[\'<fill colors="\'+s.join(",")+\'" opacity="\',z,\'" o:opacity2="\',o,\'" type="\',i,\'" \',\nw,\'focus="100%" method="any" />\'];da(e.prepVML(h),null,null,b)};n=a[0];v=a[a.length-1];n[0]>0&&a.unshift([0,n[1]]);v[0]<1&&a.push([1,v[1]]);q(a,function(a,b){g.test(a[1])?(f=na(a[1]),k=f.get("rgb"),l=f.get("a")):(k=a[1],l=1);s.push(a[0]*100+"% "+k);b?(z=l,r=k):(o=l,p=k)});if(c==="fill")if(i==="gradient")c=m.x1||m[0]||0,a=m.y1||m[1]||0,n=m.x2||m[2]||0,m=m.y2||m[3]||0,w=\'angle="\'+(90-Z.atan((m-a)/(n-c))*180/ta)+\'"\',t();else{var j=m.r,ba=j*2,x=j*2,u=m.cx,A=m.cy,C=b.radialReference,y,j=function(){C&&\n(y=d.getBBox(),u+=(C[0]-y.x)/y.width-0.5,A+=(C[1]-y.y)/y.height-0.5,ba*=C[2]/y.width,x*=C[2]/y.height);w=\'src="\'+U.global.VMLRadialGradientURL+\'" size="\'+ba+","+x+\'" origin="0.5,0.5" position="\'+u+","+A+\'" color2="\'+p+\'" \';t()};d.added?j():d.onAdd=j;j=r}else j=k}else if(g.test(a)&&b.tagName!=="IMG")f=na(a),d[c+"-opacitySetter"](f.get("a"),c,b),j=f.get("rgb");else{j=b.getElementsByTagName(c);if(j.length)j[0].opacity=1,j[0].type="solid";j=a}return j},prepVML:function(a){var b=this.isIE8,a=a.join("");\nb?(a=a.replace("/>",\' xmlns="urn:schemas-microsoft-com:vml" />\'),a=a.indexOf(\'style="\')===-1?a.replace("/>",\' style="display:inline-block;behavior:url(#default#VML);" />\'):a.replace(\'style="\',\'style="display:inline-block;behavior:url(#default#VML);\')):a=a.replace("<","<hcv:");return a},text:Ea.prototype.html,path:function(a){var b={coordsize:"10 10"};Fa(a)?b.d=a:$(a)&&x(b,a);return this.createElement("shape").attr(b)},circle:function(a,b,c){var d=this.symbol("circle");if($(a))c=a.r,b=a.y,a=a.x;d.isCircle=\n!0;d.r=c;return d.attr({x:a,y:b})},g:function(a){var b;a&&(b={className:"highcharts-"+a,"class":"highcharts-"+a});return this.createElement(Pa).attr(b)},image:function(a,b,c,d,e){var f=this.createElement("img").attr({src:a});arguments.length>1&&f.attr({x:b,y:c,width:d,height:e});return f},createElement:function(a){return a==="rect"?this.symbol(a):Ea.prototype.createElement.call(this,a)},invertChild:function(a,b){var c=this,d=b.style,e=a.tagName==="IMG"&&a.style;M(a,{flip:"x",left:B(d.width)-(e?B(e.top):\n1),top:B(d.height)-(e?B(e.left):1),rotation:-90});q(a.childNodes,function(b){c.invertChild(b,a)})},symbols:{arc:function(a,b,c,d,e){var f=e.start,g=e.end,h=e.r||c||d,c=e.innerR,d=W(f),i=ea(f),j=W(g),k=ea(g);if(g-f===0)return["x"];f=["wa",a-h,b-h,a+h,b+h,a+h*d,b+h*i,a+h*j,b+h*k];e.open&&!c&&f.push("e",X,a,b);f.push("at",a-c,b-c,a+c,b+c,a+c*j,b+c*k,a+c*d,b+c*i,"x","e");f.isArc=!0;return f},circle:function(a,b,c,d,e){e&&(c=d=2*e.r);e&&e.isCircle&&(a-=c/2,b-=d/2);return["wa",a,b,a+c,b+d,a+c,b+d/2,a+c,\nb+d/2,"e"]},rect:function(a,b,c,d,e){return Ea.prototype.symbols[!s(e)||!e.r?"square":"callout"].call(0,a,b,c,d,e)}}};u.VMLRenderer=K=function(){this.init.apply(this,arguments)};K.prototype=E(Ea.prototype,Db);eb=K}Ea.prototype.measureSpanWidth=function(a,b){var c=y.createElement("span"),d;d=y.createTextNode(a);c.appendChild(d);M(c,b);this.box.appendChild(c);d=c.offsetWidth;Ua(c);return d};var Pb;if(la)u.CanVGRenderer=K=function(){Ia="http://www.w3.org/1999/xhtml"},K.prototype.symbols={},Pb=function(){function a(){var a=\nb.length,d;for(d=0;d<a;d++)b[d]();b=[]}var b=[];return{push:function(c,d){if(b.length===0){var e=y.getElementsByTagName("head")[0],f=y.createElement("script");f.type="text/javascript";f.src=d;f.onload=a;e.appendChild(f)}b.push(c)}}}(),eb=K;Xa.prototype={addLabel:function(){var a=this.axis,b=a.options,c=a.chart,d=a.categories,e=a.names,f=this.pos,g=b.labels,h=a.tickPositions,i=f===h[0],j=f===h[h.length-1],e=d?p(d[f],e[f],f):f,d=this.label,h=h.info,k;a.isDatetimeAxis&&h&&(k=b.dateTimeLabelFormats[h.higherRanks[f]||\nh.unitName]);this.isFirst=i;this.isLast=j;b=a.labelFormatter.call({axis:a,chart:c,isFirst:i,isLast:j,dateTimeLabelFormat:k,value:a.isLog?aa(a.lin2log(e)):e});s(d)?d&&d.attr({text:b}):(this.labelLength=(this.label=d=s(b)&&g.enabled?c.renderer.text(b,0,0,g.useHTML).css(E(g.style)).add(a.labelGroup):null)&&d.getBBox().width,this.rotation=0)},getLabelSize:function(){return this.label?this.label.getBBox()[this.axis.horiz?"height":"width"]:0},handleOverflow:function(a){var b=this.axis,c=a.x,d=b.chart.chartWidth,\ne=b.chart.spacing,f=p(b.labelLeft,F(b.pos,e[3])),e=p(b.labelRight,t(b.pos+b.len,d-e[1])),g=this.label,h=this.rotation,i={left:0,center:0.5,right:1}[b.labelAlign],j=g.getBBox().width,k=b.getSlotWidth(),l=k,m=1,n,o={};if(h)h<0&&c-i*j<f?n=C(c/W(h*ka)-f):h>0&&c+i*j>e&&(n=C((d-c)/W(h*ka)));else if(d=c+(1-i)*j,c-i*j<f?l=a.x+l*(1-i)-f:d>e&&(l=e-a.x+l*i,m=-1),l=F(k,l),l<k&&b.labelAlign==="center"&&(a.x+=m*(k-l-i*(k-F(j,l)))),j>l||b.autoRotation&&g.styles.width)n=l;if(n){o.width=n;if(!b.options.labels.style.textOverflow)o.textOverflow=\n"ellipsis";g.css(o)}},getPosition:function(a,b,c,d){var e=this.axis,f=e.chart,g=d&&f.oldChartHeight||f.chartHeight;return{x:a?e.translate(b+c,null,null,d)+e.transB:e.left+e.offset+(e.opposite?(d&&f.oldChartWidth||f.chartWidth)-e.right-e.left:0),y:a?g-e.bottom+e.offset-(e.opposite?e.height:0):g-e.translate(b+c,null,null,d)-e.transB}},getLabelPosition:function(a,b,c,d,e,f,g,h){var i=this.axis,j=i.transA,k=i.reversed,l=i.staggerLines,m=i.tickRotCorr||{x:0,y:0},n=e.y;s(n)||(n=i.side===0?c.rotation?-8:\n-c.getBBox().height:i.side===2?m.y+8:W(c.rotation*ka)*(m.y-c.getBBox(!1,0).height/2));a=a+e.x+m.x-(f&&d?f*j*(k?-1:1):0);b=b+n-(f&&!d?f*j*(k?1:-1):0);l&&(c=g/(h||1)%l,i.opposite&&(c=l-c-1),b+=c*(i.labelOffset/l));return{x:a,y:C(b)}},getMarkPath:function(a,b,c,d,e,f){return f.crispLine([X,a,b,S,a+(e?0:-c),b+(e?c:0)],d)},render:function(a,b,c){var d=this.axis,e=d.options,f=d.chart.renderer,g=d.horiz,h=this.type,i=this.label,j=this.pos,k=e.labels,l=this.gridLine,m=h?h+"Grid":"grid",n=h?h+"Tick":"tick",\no=e[m+"LineWidth"],z=e[m+"LineColor"],r=e[m+"LineDashStyle"],m=d.tickSize(n),n=e[n+"Color"],q=this.mark,w=k.step,v=!0,s=d.tickmarkOffset,t=this.getPosition(g,j,s,b),ba=t.x,t=t.y,x=g&&ba===d.pos+d.len||!g&&t===d.pos?-1:1,c=p(c,1);this.isActive=!0;if(o){j=d.getPlotLinePath(j+s,o*x,b,!0);if(l===A){l={stroke:z,"stroke-width":o};if(r)l.dashstyle=r;if(!h)l.zIndex=1;if(b)l.opacity=0;this.gridLine=l=o?f.path(j).attr(l).add(d.gridGroup):null}if(!b&&l&&j)l[this.isNew?"attr":"animate"]({d:j,opacity:c})}if(m)d.opposite&&\n(m[0]=-m[0]),h=this.getMarkPath(ba,t,m[0],m[1]*x,g,f),q?q.animate({d:h,opacity:c}):this.mark=f.path(h).attr({stroke:n,"stroke-width":m[1],opacity:c}).add(d.axisGroup);if(i&&J(ba))i.xy=t=this.getLabelPosition(ba,t,i,g,k,s,a,w),this.isFirst&&!this.isLast&&!p(e.showFirstLabel,1)||this.isLast&&!this.isFirst&&!p(e.showLastLabel,1)?v=!1:g&&!d.isRadial&&!k.step&&!k.rotation&&!b&&c!==0&&this.handleOverflow(t),w&&a%w&&(v=!1),v&&J(t.y)?(t.opacity=c,i[this.isNew?"attr":"animate"](t)):(Ka(i),i.attr("y",-9999)),\nthis.isNew=!1},destroy:function(){Ta(this,this.axis)}};u.PlotLineOrBand=function(a,b){this.axis=a;if(b)this.options=b,this.id=b.id};u.PlotLineOrBand.prototype={render:function(){var a=this,b=a.axis,c=b.horiz,d=a.options,e=d.label,f=a.label,g=d.width,h=d.to,i=d.from,j=s(i)&&s(h),k=d.value,l=d.dashStyle,m=a.svgElem,n=[],o,z=d.color,r=p(d.zIndex,0),q=d.events,w={},v=b.chart.renderer,n=b.log2lin;b.isLog&&(i=n(i),h=n(h),k=n(k));if(g){if(n=b.getPlotLinePath(k,g),w={stroke:z,"stroke-width":g},l)w.dashstyle=\nl}else if(j){n=b.getPlotBandPath(i,h,d);if(z)w.fill=z;if(d.borderWidth)w.stroke=d.borderColor,w["stroke-width"]=d.borderWidth}else return;w.zIndex=r;if(m)if(n)m.show(),m.animate({d:n});else{if(m.hide(),f)a.label=f=f.destroy()}else if(n&&n.length&&(a.svgElem=m=v.path(n).attr(w).add(),q))for(o in d=function(b){m.on(b,function(c){q[b].apply(a,[c])})},q)d(o);e&&s(e.text)&&n&&n.length&&b.width>0&&b.height>0&&!n.flat?(e=E({align:c&&j&&"center",x:c?!j&&4:10,verticalAlign:!c&&j&&"middle",y:c?j?16:10:j?6:\n-4,rotation:c&&!j&&90},e),this.renderLabel(e,n,j,r)):f&&f.hide();return a},renderLabel:function(a,b,c,d){var e=this.label,f=this.axis.chart.renderer;if(!e)e={align:a.textAlign||a.align,rotation:a.rotation},e.zIndex=d,this.label=e=f.text(a.text,0,0,a.useHTML).attr(e).css(a.style).add();d=[b[1],b[4],c?b[6]:b[1]];b=[b[2],b[5],c?b[7]:b[2]];c=Oa(d);f=Oa(b);e.align(a,!1,{x:c,y:f,width:Ha(d)-c,height:Ha(b)-f});e.show()},destroy:function(){ra(this.axis.plotLinesAndBands,this);delete this.axis;Ta(this)}};\nvar ia=u.Axis=function(){this.init.apply(this,arguments)};ia.prototype={defaultOptions:{dateTimeLabelFormats:{millisecond:"%H:%M:%S.%L",second:"%H:%M:%S",minute:"%H:%M",hour:"%H:%M",day:"%e. %b",week:"%e. %b",month:"%b \'%y",year:"%Y"},endOnTick:!1,gridLineColor:"#D8D8D8",labels:{enabled:!0,style:{color:"#606060",cursor:"default",fontSize:"11px"},x:0},lineColor:"#C0D0E0",lineWidth:1,minPadding:0.01,maxPadding:0.01,minorGridLineColor:"#E0E0E0",minorGridLineWidth:1,minorTickColor:"#A0A0A0",minorTickLength:2,\nminorTickPosition:"outside",startOfWeek:1,startOnTick:!1,tickColor:"#C0D0E0",tickLength:10,tickmarkPlacement:"between",tickPixelInterval:100,tickPosition:"outside",title:{align:"middle",style:{color:"#707070"}},type:"linear"},defaultYAxisOptions:{endOnTick:!0,gridLineWidth:1,tickPixelInterval:72,showLastLabel:!0,labels:{x:-8},lineWidth:0,maxPadding:0.05,minPadding:0.05,startOnTick:!0,title:{rotation:270,text:"Values"},stackLabels:{enabled:!1,formatter:function(){return u.numberFormat(this.total,-1)},\nstyle:E(fa.line.dataLabels.style,{color:"#000000"})}},defaultLeftAxisOptions:{labels:{x:-15},title:{rotation:270}},defaultRightAxisOptions:{labels:{x:15},title:{rotation:90}},defaultBottomAxisOptions:{labels:{autoRotation:[-45],x:0},title:{rotation:0}},defaultTopAxisOptions:{labels:{autoRotation:[-45],x:0},title:{rotation:0}},init:function(a,b){var c=b.isX;this.chart=a;this.horiz=a.inverted?!c:c;this.coll=(this.isXAxis=c)?"xAxis":"yAxis";this.opposite=b.opposite;this.side=b.side||(this.horiz?this.opposite?\n0:2:this.opposite?1:3);this.setOptions(b);var d=this.options,e=d.type;this.labelFormatter=d.labels.formatter||this.defaultLabelFormatter;this.userOptions=b;this.minPixelPadding=0;this.reversed=d.reversed;this.visible=d.visible!==!1;this.zoomEnabled=d.zoomEnabled!==!1;this.categories=d.categories||e==="category";this.names=this.names||[];this.isLog=e==="logarithmic";this.isDatetimeAxis=e==="datetime";this.isLinked=s(d.linkedTo);this.ticks={};this.labelEdge=[];this.minorTicks={};this.plotLinesAndBands=\n[];this.alternateBands={};this.len=0;this.minRange=this.userMinRange=d.minRange||d.maxZoom;this.range=d.range;this.offset=d.offset||0;this.stacks={};this.oldStacks={};this.stacksTouched=0;this.min=this.max=null;this.crosshair=p(d.crosshair,ua(a.options.tooltip.crosshairs)[c?0:1],!1);var f,d=this.options.events;pa(this,a.axes)===-1&&(c&&!this.isColorAxis?a.axes.splice(a.xAxis.length,0,this):a.axes.push(this),a[this.coll].push(this));this.series=this.series||[];if(a.inverted&&c&&this.reversed===A)this.reversed=\n!0;this.removePlotLine=this.removePlotBand=this.removePlotBandOrLine;for(f in d)N(this,f,d[f]);if(this.isLog)this.val2lin=this.log2lin,this.lin2val=this.lin2log},setOptions:function(a){this.options=E(this.defaultOptions,this.isXAxis?{}:this.defaultYAxisOptions,[this.defaultTopAxisOptions,this.defaultRightAxisOptions,this.defaultBottomAxisOptions,this.defaultLeftAxisOptions][this.side],E(U[this.coll],a))},defaultLabelFormatter:function(){var a=this.axis,b=this.value,c=a.categories,d=this.dateTimeLabelFormat,\ne=U.lang.numericSymbols,f=e&&e.length,g,h=a.options.labels.format,a=a.isLog?b:a.tickInterval;if(h)g=Na(h,this);else if(c)g=b;else if(d)g=Sa(d,b);else if(f&&a>=1E3)for(;f--&&g===A;)c=Math.pow(1E3,f+1),a>=c&&b*10%c===0&&e[f]!==null&&b!==0&&(g=u.numberFormat(b/c,-1)+e[f]);g===A&&(g=Q(b)>=1E4?u.numberFormat(b,-1):u.numberFormat(b,-1,A,""));return g},getSeriesExtremes:function(){var a=this,b=a.chart;a.hasVisibleSeries=!1;a.dataMin=a.dataMax=a.threshold=null;a.softThreshold=!a.isXAxis;a.buildStacks&&a.buildStacks();\nq(a.series,function(c){if(c.visible||!b.options.chart.ignoreHiddenSeries){var d=c.options,e=d.threshold,f;a.hasVisibleSeries=!0;a.isLog&&e<=0&&(e=null);if(a.isXAxis){if(d=c.xData,d.length)c=Oa(d),!J(c)&&!(c instanceof ma)&&(d=Ca(d,function(a){return J(a)}),c=Oa(d)),a.dataMin=F(p(a.dataMin,d[0]),c),a.dataMax=t(p(a.dataMax,d[0]),Ha(d))}else{c.getExtremes();f=c.dataMax;c=c.dataMin;if(s(c)&&s(f))a.dataMin=F(p(a.dataMin,c),c),a.dataMax=t(p(a.dataMax,f),f);if(s(e))a.threshold=e;if(!d.softThreshold||a.isLog)a.softThreshold=\n!1}}})},translate:function(a,b,c,d,e,f){var g=this.linkedParent||this,h=1,i=0,j=d?g.oldTransA:g.transA,d=d?g.oldMin:g.min,k=g.minPixelPadding,e=(g.isOrdinal||g.isBroken||g.isLog&&e)&&g.lin2val;if(!j)j=g.transA;if(c)h*=-1,i=g.len;g.reversed&&(h*=-1,i-=h*(g.sector||g.len));b?(a=a*h+i,a-=k,a=a/j+d,e&&(a=g.lin2val(a))):(e&&(a=g.val2lin(a)),f==="between"&&(f=0.5),a=h*(a-d)*j+i+h*k+(J(f)?j*f*g.pointRange:0));return a},toPixels:function(a,b){return this.translate(a,!1,!this.horiz,null,!0)+(b?0:this.pos)},\ntoValue:function(a,b){return this.translate(a-(b?0:this.pos),!0,!this.horiz,null,!0)},getPlotLinePath:function(a,b,c,d,e){var f=this.chart,g=this.left,h=this.top,i,j,k=c&&f.oldChartHeight||f.chartHeight,l=c&&f.oldChartWidth||f.chartWidth,m;i=this.transB;var n=function(a,b,c){if(a<b||a>c)d?a=F(t(b,a),c):m=!0;return a},e=p(e,this.translate(a,null,null,c)),a=c=C(e+i);i=j=C(k-e-i);J(e)?this.horiz?(i=h,j=k-this.bottom,a=c=n(a,g,g+this.width)):(a=g,c=l-this.right,i=j=n(i,h,h+this.height)):m=!0;return m&&\n!d?null:f.renderer.crispLine([X,a,i,S,c,j],b||1)},getLinearTickPositions:function(a,b,c){var d,e=aa(V(b/a)*a),f=aa(va(c/a)*a),g=[];if(b===c&&J(b))return[b];for(b=e;b<=f;){g.push(b);b=aa(b+a);if(b===d)break;d=b}return g},getMinorTickPositions:function(){var a=this.options,b=this.tickPositions,c=this.minorTickInterval,d=[],e,f=this.pointRangePadding||0;e=this.min-f;var f=this.max+f,g=f-e;if(g&&g/c<this.len/3)if(this.isLog){f=b.length;for(e=1;e<f;e++)d=d.concat(this.getLogTickPositions(c,b[e-1],b[e],\n!0))}else if(this.isDatetimeAxis&&a.minorTickInterval==="auto")d=d.concat(this.getTimeTicks(this.normalizeTimeTickInterval(c),e,f,a.startOfWeek));else for(b=e+(b[0]-e)%c;b<=f;b+=c)d.push(b);d.length!==0&&this.trimTicks(d,a.startOnTick,a.endOnTick);return d},adjustForMinRange:function(){var a=this.options,b=this.min,c=this.max,d,e=this.dataMax-this.dataMin>=this.minRange,f,g,h,i,j,k;if(this.isXAxis&&this.minRange===A&&!this.isLog)s(a.min)||s(a.max)?this.minRange=null:(q(this.series,function(a){i=a.xData;\nfor(g=j=a.xIncrement?1:i.length-1;g>0;g--)if(h=i[g]-i[g-1],f===A||h<f)f=h}),this.minRange=F(f*5,this.dataMax-this.dataMin));if(c-b<this.minRange){k=this.minRange;d=(k-c+b)/2;d=[b-d,p(a.min,b-d)];if(e)d[2]=this.dataMin;b=Ha(d);c=[b+k,p(a.max,b+k)];if(e)c[2]=this.dataMax;c=Oa(c);c-b<k&&(d[0]=c-k,d[1]=p(a.min,c-k),b=Ha(d))}this.min=b;this.max=c},getClosest:function(){var a;this.categories?a=1:q(this.series,function(b){var c=b.closestPointRange;!b.noSharedTooltip&&s(c)&&(a=s(a)?F(a,c):c)});return a},\nsetAxisTranslation:function(a){var b=this,c=b.max-b.min,d=b.axisPointRange||0,e,f=0,g=0,h=b.linkedParent,i=!!b.categories,j=b.transA,k=b.isXAxis;if(k||i||d)if(h?(f=h.minPointOffset,g=h.pointRangePadding):(e=b.getClosest(),q(b.series,function(a){var c=i?1:k?p(a.options.pointRange,e,0):b.axisPointRange||0,a=a.options.pointPlacement;d=t(d,c);b.single||(f=t(f,ya(a)?0:c/2),g=t(g,a==="on"?0:c))})),h=b.ordinalSlope&&e?b.ordinalSlope/e:1,b.minPointOffset=f*=h,b.pointRangePadding=g*=h,b.pointRange=F(d,c),\nk)b.closestPointRange=e;if(a)b.oldTransA=j;b.translationSlope=b.transA=j=b.len/(c+g||1);b.transB=b.horiz?b.left:b.bottom;b.minPixelPadding=j*f},minFromRange:function(){return this.max-this.range},setTickInterval:function(a){var b=this,c=b.chart,d=b.options,e=b.isLog,f=b.log2lin,g=b.isDatetimeAxis,h=b.isXAxis,i=b.isLinked,j=d.maxPadding,k=d.minPadding,l=d.tickInterval,m=d.tickPixelInterval,n=b.categories,o=b.threshold,z=b.softThreshold,r,G,w,v;!g&&!n&&!i&&this.getTickAmount();w=p(b.userMin,d.min);\nv=p(b.userMax,d.max);i?(b.linkedParent=c[b.coll][d.linkedTo],c=b.linkedParent.getExtremes(),b.min=p(c.min,c.dataMin),b.max=p(c.max,c.dataMax),d.type!==b.linkedParent.options.type&&ca(11,1)):(!z&&s(o)&&(b.dataMin>=o?(r=o,k=0):b.dataMax<=o&&(G=o,j=0)),b.min=p(w,r,b.dataMin),b.max=p(v,G,b.dataMax));if(e)!a&&F(b.min,p(b.dataMin,b.min))<=0&&ca(10,1),b.min=aa(f(b.min),15),b.max=aa(f(b.max),15);if(b.range&&s(b.max))b.userMin=b.min=w=t(b.min,b.minFromRange()),b.userMax=v=b.max,b.range=null;I(b,"foundExtremes");\nb.beforePadding&&b.beforePadding();b.adjustForMinRange();if(!n&&!b.axisPointRange&&!b.usePercentage&&!i&&s(b.min)&&s(b.max)&&(f=b.max-b.min))!s(w)&&k&&(b.min-=f*k),!s(v)&&j&&(b.max+=f*j);if(J(d.floor))b.min=t(b.min,d.floor);if(J(d.ceiling))b.max=F(b.max,d.ceiling);if(z&&s(b.dataMin))if(o=o||0,!s(w)&&b.min<o&&b.dataMin>=o)b.min=o;else if(!s(v)&&b.max>o&&b.dataMax<=o)b.max=o;b.tickInterval=b.min===b.max||b.min===void 0||b.max===void 0?1:i&&!l&&m===b.linkedParent.options.tickPixelInterval?l=b.linkedParent.tickInterval:\np(l,this.tickAmount?(b.max-b.min)/t(this.tickAmount-1,1):void 0,n?1:(b.max-b.min)*m/t(b.len,m));h&&!a&&q(b.series,function(a){a.processData(b.min!==b.oldMin||b.max!==b.oldMax)});b.setAxisTranslation(!0);b.beforeSetTickPositions&&b.beforeSetTickPositions();if(b.postProcessTickInterval)b.tickInterval=b.postProcessTickInterval(b.tickInterval);if(b.pointRange&&!l)b.tickInterval=t(b.pointRange,b.tickInterval);a=p(d.minTickInterval,b.isDatetimeAxis&&b.closestPointRange);if(!l&&b.tickInterval<a)b.tickInterval=\na;if(!g&&!e&&!l)b.tickInterval=vb(b.tickInterval,null,ub(b.tickInterval),p(d.allowDecimals,!(b.tickInterval>0.5&&b.tickInterval<5&&b.max>1E3&&b.max<9999)),!!this.tickAmount);if(!this.tickAmount&&this.len)b.tickInterval=b.unsquish();this.setTickPositions()},setTickPositions:function(){var a=this.options,b,c=a.tickPositions,d=a.tickPositioner,e=a.startOnTick,f=a.endOnTick,g;this.tickmarkOffset=this.categories&&a.tickmarkPlacement==="between"&&this.tickInterval===1?0.5:0;this.minorTickInterval=a.minorTickInterval===\n"auto"&&this.tickInterval?this.tickInterval/5:a.minorTickInterval;this.tickPositions=b=c&&c.slice();if(!b&&(b=this.isDatetimeAxis?this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval,a.units),this.min,this.max,a.startOfWeek,this.ordinalPositions,this.closestPointRange,!0):this.isLog?this.getLogTickPositions(this.tickInterval,this.min,this.max):this.getLinearTickPositions(this.tickInterval,this.min,this.max),b.length>this.len&&(b=[b[0],b.pop()]),this.tickPositions=b,d&&(d=d.apply(this,\n[this.min,this.max]))))this.tickPositions=b=d;if(!this.isLinked)this.trimTicks(b,e,f),this.min===this.max&&s(this.min)&&!this.tickAmount&&(g=!0,this.min-=0.5,this.max+=0.5),this.single=g,!c&&!d&&this.adjustTickAmount()},trimTicks:function(a,b,c){var d=a[0],e=a[a.length-1],f=this.minPointOffset||0;if(b)this.min=d;else for(;this.min-f>a[0];)a.shift();if(c)this.max=e;else for(;this.max+f<a[a.length-1];)a.pop();a.length===0&&s(d)&&a.push((e+d)/2)},alignToOthers:function(){var a={},b,c=this.options;this.chart.options.chart.alignTicks!==\n!1&&c.alignTicks!==!1&&q(this.chart[this.coll],function(c){var e=c.options,e=[c.horiz?e.left:e.top,e.width,e.height,e.pane].join(",");c.series.length&&(a[e]?b=!0:a[e]=1)});return b},getTickAmount:function(){var a=this.options,b=a.tickAmount,c=a.tickPixelInterval;!s(a.tickInterval)&&this.len<c&&!this.isRadial&&!this.isLog&&a.startOnTick&&a.endOnTick&&(b=2);!b&&this.alignToOthers()&&(b=va(this.len/c)+1);if(b<4)this.finalTickAmt=b,b=5;this.tickAmount=b},adjustTickAmount:function(){var a=this.tickInterval,\nb=this.tickPositions,c=this.tickAmount,d=this.finalTickAmt,e=b&&b.length;if(e<c){for(;b.length<c;)b.push(aa(b[b.length-1]+a));this.transA*=(e-1)/(c-1);this.max=b[b.length-1]}else e>c&&(this.tickInterval*=2,this.setTickPositions());if(s(d)){for(a=c=b.length;a--;)(d===3&&a%2===1||d<=2&&a>0&&a<c-1)&&b.splice(a,1);this.finalTickAmt=A}},setScale:function(){var a,b;this.oldMin=this.min;this.oldMax=this.max;this.oldAxisLength=this.len;this.setAxisSize();b=this.len!==this.oldAxisLength;q(this.series,function(b){if(b.isDirtyData||\nb.isDirty||b.xAxis.isDirty)a=!0});if(b||a||this.isLinked||this.forceRedraw||this.userMin!==this.oldUserMin||this.userMax!==this.oldUserMax||this.alignToOthers()){if(this.resetStacks&&this.resetStacks(),this.forceRedraw=!1,this.getSeriesExtremes(),this.setTickInterval(),this.oldUserMin=this.userMin,this.oldUserMax=this.userMax,!this.isDirty)this.isDirty=b||this.min!==this.oldMin||this.max!==this.oldMax}else this.cleanStacks&&this.cleanStacks()},setExtremes:function(a,b,c,d,e){var f=this,g=f.chart,\nc=p(c,!0);q(f.series,function(a){delete a.kdTree});e=x(e,{min:a,max:b});I(f,"setExtremes",e,function(){f.userMin=a;f.userMax=b;f.eventArgs=e;c&&g.redraw(d)})},zoom:function(a,b){var c=this.dataMin,d=this.dataMax,e=this.options,f=F(c,p(e.min,c)),e=t(d,p(e.max,d));this.allowZoomOutside||(s(c)&&a<=f&&(a=f),s(d)&&b>=e&&(b=e));this.displayBtn=a!==A||b!==A;this.setExtremes(a,b,!1,A,{trigger:"zoom"});return!0},setAxisSize:function(){var a=this.chart,b=this.options,c=b.offsetLeft||0,d=this.horiz,e=p(b.width,\na.plotWidth-c+(b.offsetRight||0)),f=p(b.height,a.plotHeight),g=p(b.top,a.plotTop),b=p(b.left,a.plotLeft+c),c=/%$/;c.test(f)&&(f=Math.round(parseFloat(f)/100*a.plotHeight));c.test(g)&&(g=Math.round(parseFloat(g)/100*a.plotHeight+a.plotTop));this.left=b;this.top=g;this.width=e;this.height=f;this.bottom=a.chartHeight-f-g;this.right=a.chartWidth-e-b;this.len=t(d?e:f,0);this.pos=d?b:g},getExtremes:function(){var a=this.isLog,b=this.lin2log;return{min:a?aa(b(this.min)):this.min,max:a?aa(b(this.max)):this.max,\ndataMin:this.dataMin,dataMax:this.dataMax,userMin:this.userMin,userMax:this.userMax}},getThreshold:function(a){var b=this.isLog,c=this.lin2log,d=b?c(this.min):this.min,b=b?c(this.max):this.max;a===null?a=d:d>a?a=d:b<a&&(a=b);return this.translate(a,0,1,0,1)},autoLabelAlign:function(a){a=(p(a,0)-this.side*90+720)%360;return a>15&&a<165?"right":a>195&&a<345?"left":"center"},tickSize:function(a){var b=this.options,c=b[a+"Length"],d=p(b[a+"Width"],a==="tick"&&this.isXAxis?1:0);if(d&&c)return b[a+"Position"]===\n"inside"&&(c=-c),[c,d]},labelMetrics:function(){return this.chart.renderer.fontMetrics(this.options.labels.style.fontSize,this.ticks[0]&&this.ticks[0].label)},unsquish:function(){var a=this.options.labels,b=this.horiz,c=this.tickInterval,d=c,e=this.len/(((this.categories?1:0)+this.max-this.min)/c),f,g=a.rotation,h=this.labelMetrics(),i,j=Number.MAX_VALUE,k,l=function(a){a/=e||1;a=a>1?va(a):1;return a*c};b?(k=!a.staggerLines&&!a.step&&(s(g)?[g]:e<p(a.autoRotationLimit,80)&&a.autoRotation))&&q(k,function(a){var b;\nif(a===g||a&&a>=-90&&a<=90)i=l(Q(h.h/ea(ka*a))),b=i+Q(a/360),b<j&&(j=b,f=a,d=i)}):a.step||(d=l(h.h));this.autoRotation=k;this.labelRotation=p(f,g);return d},getSlotWidth:function(){var a=this.chart,b=this.horiz,c=this.options.labels,d=Math.max(this.tickPositions.length-(this.categories?0:1),1),e=a.margin[3];return b&&(c.step||0)<2&&!c.rotation&&(this.staggerLines||1)*a.plotWidth/d||!b&&(e&&e-a.spacing[3]||a.chartWidth*0.33)},renderUnsquish:function(){var a=this.chart,b=a.renderer,c=this.tickPositions,\nd=this.ticks,e=this.options.labels,f=this.horiz,g=this.getSlotWidth(),h=t(1,C(g-2*(e.padding||5))),i={},j=this.labelMetrics(),k=e.style.textOverflow,l,m=0,n,o;if(!ya(e.rotation))i.rotation=e.rotation||0;if(this.autoRotation)q(c,function(a){if((a=d[a])&&a.labelLength>m)m=a.labelLength}),m>h&&m>j.h?i.rotation=this.labelRotation:this.labelRotation=0;else if(g&&(l={width:h+"px"},!k)){l.textOverflow="clip";for(n=c.length;!f&&n--;)if(o=c[n],h=d[o].label)if(h.styles.textOverflow==="ellipsis"?h.css({textOverflow:"clip"}):\nd[o].labelLength>g&&h.css({width:g+"px"}),h.getBBox().height>this.len/c.length-(j.h-j.f))h.specCss={textOverflow:"ellipsis"}}if(i.rotation&&(l={width:(m>a.chartHeight*0.5?a.chartHeight*0.33:a.chartHeight)+"px"},!k))l.textOverflow="ellipsis";if(this.labelAlign=e.align||this.autoLabelAlign(this.labelRotation))i.align=this.labelAlign;q(c,function(a){var b=(a=d[a])&&a.label;if(b)b.attr(i),l&&b.css(E(l,b.specCss)),delete b.specCss,a.rotation=i.rotation});this.tickRotCorr=b.rotCorr(j.b,this.labelRotation||\n0,this.side!==0)},hasData:function(){return this.hasVisibleSeries||s(this.min)&&s(this.max)&&!!this.tickPositions},getOffset:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.tickPositions,f=a.ticks,g=a.horiz,h=a.side,i=b.inverted?[1,0,3,2][h]:h,j,k,l=0,m,n=0,o=d.title,z=d.labels,r=0,G=a.opposite,w=b.axisOffset,b=b.clipOffset,v=[-1,1,1,-1][h],x,u=a.axisParent,ba=this.tickSize("tick");j=a.hasData();a.showAxis=k=j||p(d.showEmpty,!0);a.staggerLines=a.horiz&&z.staggerLines;if(!a.axisGroup)a.gridGroup=\nc.g("grid").attr({zIndex:d.gridZIndex||1}).add(u),a.axisGroup=c.g("axis").attr({zIndex:d.zIndex||2}).add(u),a.labelGroup=c.g("axis-labels").attr({zIndex:z.zIndex||7}).addClass("highcharts-"+a.coll.toLowerCase()+"-labels").add(u);if(j||a.isLinked){if(q(e,function(b){f[b]?f[b].addLabel():f[b]=new Xa(a,b)}),a.renderUnsquish(),z.reserveSpace!==!1&&(h===0||h===2||{1:"left",3:"right"}[h]===a.labelAlign||a.labelAlign==="center")&&q(e,function(a){r=t(f[a].getLabelSize(),r)}),a.staggerLines)r*=a.staggerLines,\na.labelOffset=r*(a.opposite?-1:1)}else for(x in f)f[x].destroy(),delete f[x];if(o&&o.text&&o.enabled!==!1){if(!a.axisTitle)(x=o.textAlign)||(x=(g?{low:"left",middle:"center",high:"right"}:{low:G?"right":"left",middle:"center",high:G?"left":"right"})[o.align]),a.axisTitle=c.text(o.text,0,0,o.useHTML).attr({zIndex:7,rotation:o.rotation||0,align:x}).addClass("highcharts-"+this.coll.toLowerCase()+"-title").css(o.style).add(a.axisGroup),a.axisTitle.isNew=!0;if(k)l=a.axisTitle.getBBox()[g?"height":"width"],\nm=o.offset,n=s(m)?0:p(o.margin,g?5:10);a.axisTitle[k?"show":"hide"](!0)}a.offset=v*p(d.offset,w[h]);a.tickRotCorr=a.tickRotCorr||{x:0,y:0};c=h===0?-a.labelMetrics().h:h===2?a.tickRotCorr.y:0;n=Math.abs(r)+n;r&&(n-=c,n+=v*(g?p(z.y,a.tickRotCorr.y+v*8):z.x));a.axisTitleMargin=p(m,n);w[h]=t(w[h],a.axisTitleMargin+l+v*a.offset,n,j&&e.length&&ba?ba[0]:0);d=d.offset?0:V(d.lineWidth/2)*2;b[i]=t(b[i],d)},getLinePath:function(a){var b=this.chart,c=this.opposite,d=this.offset,e=this.horiz,f=this.left+(c?this.width:\n0)+d,d=b.chartHeight-this.bottom-(c?this.height:0)+d;c&&(a*=-1);return b.renderer.crispLine([X,e?this.left:f,e?d:this.top,S,e?b.chartWidth-this.right:f,e?d:b.chartHeight-this.bottom],a)},getTitlePosition:function(){var a=this.horiz,b=this.left,c=this.top,d=this.len,e=this.options.title,f=a?b:c,g=this.opposite,h=this.offset,i=e.x||0,j=e.y||0,k=this.chart.renderer.fontMetrics(e.style.fontSize).f,d={low:f+(a?0:d),middle:f+d/2,high:f+(a?d:0)}[e.align],b=(a?c+this.height:b)+(a?1:-1)*(g?-1:1)*this.axisTitleMargin+\n(this.side===2?k:0);return{x:a?d+i:b+(g?this.width:0)+h+i,y:a?b+j-(g?this.height:0)+h:d+j}},render:function(){var a=this,b=a.chart,c=b.renderer,d=a.options,e=a.isLog,f=a.lin2log,g=a.isLinked,h=a.tickPositions,i=a.axisTitle,j=a.ticks,k=a.minorTicks,l=a.alternateBands,m=d.stackLabels,n=d.alternateGridColor,o=a.tickmarkOffset,z=d.lineWidth,r,p=b.hasRendered&&J(a.oldMin),w=a.showAxis,v=bb(c.globalAnimation),t,s;a.labelEdge.length=0;a.overlap=!1;q([j,k,l],function(a){for(var b in a)a[b].isActive=!1});\nif(a.hasData()||g){a.minorTickInterval&&!a.categories&&q(a.getMinorTickPositions(),function(b){k[b]||(k[b]=new Xa(a,b,"minor"));p&&k[b].isNew&&k[b].render(null,!0);k[b].render(null,!1,1)});if(h.length&&(q(h,function(b,c){if(!g||b>=a.min&&b<=a.max)j[b]||(j[b]=new Xa(a,b)),p&&j[b].isNew&&j[b].render(c,!0,0.1),j[b].render(c)}),o&&(a.min===0||a.single)))j[-1]||(j[-1]=new Xa(a,-1,null,!0)),j[-1].render(-1);n&&q(h,function(c,d){s=h[d+1]!==A?h[d+1]+o:a.max-o;if(d%2===0&&c<a.max&&s<=a.max+(b.polar?-o:o))l[c]||\n(l[c]=new u.PlotLineOrBand(a)),t=c+o,l[c].options={from:e?f(t):t,to:e?f(s):s,color:n},l[c].render(),l[c].isActive=!0});if(!a._addedPlotLB)q((d.plotLines||[]).concat(d.plotBands||[]),function(b){a.addPlotBandOrLine(b)}),a._addedPlotLB=!0}q([j,k,l],function(a){var c,d,e=[],f=v.duration;for(c in a)if(!a[c].isActive)a[c].render(c,!1,0),a[c].isActive=!1,e.push(c);Ra(function(){for(d=e.length;d--;)a[e[d]]&&!a[e[d]].isActive&&(a[e[d]].destroy(),delete a[e[d]])},a===l||!b.hasRendered||!f?0:f)});if(z)r=a.getLinePath(z),\na.axisLine?a.axisLine.animate({d:r}):a.axisLine=c.path(r).attr({stroke:d.lineColor,"stroke-width":z,zIndex:7}).add(a.axisGroup),a.axisLine[w?"show":"hide"](!0);if(i&&w)i[i.isNew?"attr":"animate"](a.getTitlePosition()),i.isNew=!1;m&&m.enabled&&a.renderStackTotals();a.isDirty=!1},redraw:function(){this.visible&&(this.render(),q(this.plotLinesAndBands,function(a){a.render()}));q(this.series,function(a){a.isDirty=!0})},destroy:function(a){var b=this,c=b.stacks,d,e=b.plotLinesAndBands;a||Y(b);for(d in c)Ta(c[d]),\nc[d]=null;q([b.ticks,b.minorTicks,b.alternateBands],function(a){Ta(a)});for(a=e.length;a--;)e[a].destroy();q("stackTotalGroup,axisLine,axisTitle,axisGroup,gridGroup,labelGroup,cross".split(","),function(a){b[a]&&(b[a]=b[a].destroy())});this._addedPlotLB=this.chart._labelPanes=this.ordinalSlope=void 0},drawCrosshair:function(a,b){var c,d=this.crosshair,e,f;a||(a=this.cross&&this.cross.e);if(!this.crosshair||(s(b)||!p(d.snap,!0))===!1)this.hideCrosshair();else if(p(d.snap,!0)?s(b)&&(c=this.isXAxis?\nb.plotX:this.len-b.plotY):c=this.horiz?a.chartX-this.pos:this.len-a.chartY+this.pos,c=this.isRadial?this.getPlotLinePath(this.isXAxis?b.x:p(b.stackY,b.y))||null:this.getPlotLinePath(null,null,null,null,c)||null,c===null)this.hideCrosshair();else{e=this.categories&&!this.isRadial;f=p(d.width,e?this.transA:1);if(this.cross)this.cross.attr({d:c,visibility:"visible","stroke-width":f});else{e={"pointer-events":"none","stroke-width":f,stroke:d.color||(e?"rgba(155,200,255,0.2)":"#C0C0C0"),zIndex:p(d.zIndex,\n2)};if(d.dashStyle)e.dashstyle=d.dashStyle;this.cross=this.chart.renderer.path(c).attr(e).add()}this.cross.e=a}},hideCrosshair:function(){this.cross&&this.cross.hide()}};x(ia.prototype,{getPlotBandPath:function(a,b){var c=this.getPlotLinePath(b,null,null,!0),d=this.getPlotLinePath(a,null,null,!0);d&&c?(d.flat=d.toString()===c.toString(),d.push(c[4],c[5],c[1],c[2])):d=null;return d},addPlotBand:function(a){return this.addPlotBandOrLine(a,"plotBands")},addPlotLine:function(a){return this.addPlotBandOrLine(a,\n"plotLines")},addPlotBandOrLine:function(a,b){var c=(new u.PlotLineOrBand(this,a)).render(),d=this.userOptions;c&&(b&&(d[b]=d[b]||[],d[b].push(a)),this.plotLinesAndBands.push(c));return c},removePlotBandOrLine:function(a){for(var b=this.plotLinesAndBands,c=this.options,d=this.userOptions,e=b.length;e--;)b[e].id===a&&b[e].destroy();q([c.plotLines||[],d.plotLines||[],c.plotBands||[],d.plotBands||[]],function(b){for(e=b.length;e--;)b[e].id===a&&ra(b,b[e])})}});ia.prototype.getTimeTicks=function(a,b,\nc,d){var e=[],f={},g=U.global.useUTC,h,i=new ma(b-$a(b)),j=a.unitRange,k=a.count;if(s(b)){i[Hb](j>=H.second?0:k*V(i.getMilliseconds()/k));if(j>=H.second)i[Ib](j>=H.minute?0:k*V(i.getSeconds()/k));if(j>=H.minute)i[Jb](j>=H.hour?0:k*V(i[wb]()/k));if(j>=H.hour)i[Kb](j>=H.day?0:k*V(i[xb]()/k));if(j>=H.day)i[mb](j>=H.month?1:k*V(i[Wa]()/k));j>=H.month&&(i[zb](j>=H.year?0:k*V(i[cb]()/k)),h=i[db]());j>=H.year&&(h-=h%k,i[Ab](h));if(j===H.week)i[mb](i[Wa]()-i[yb]()+p(d,1));b=1;if(tb||ab)i=i.getTime(),i=new ma(i+\n$a(i));h=i[db]();for(var d=i.getTime(),l=i[cb](),m=i[Wa](),n=!g||!!ab,o=(H.day+(g?$a(i):i.getTimezoneOffset()*6E4))%H.day;d<c;)e.push(d),j===H.year?d=lb(h+b*k,0):j===H.month?d=lb(h,l+b*k):n&&(j===H.day||j===H.week)?d=lb(h,l,m+b*k*(j===H.day?1:7)):d+=j*k,b++;e.push(d);q(Ca(e,function(a){return j<=H.hour&&a%H.day===o}),function(a){f[a]="day"})}e.info=x(a,{higherRanks:f,totalRange:j*k});return e};ia.prototype.normalizeTimeTickInterval=function(a,b){var c=b||[["millisecond",[1,2,5,10,20,25,50,100,200,\n500]],["second",[1,2,5,10,15,30]],["minute",[1,2,5,10,15,30]],["hour",[1,2,3,4,6,8,12]],["day",[1,2]],["week",[1,2]],["month",[1,2,3,4,6]],["year",null]],d=c[c.length-1],e=H[d[0]],f=d[1],g;for(g=0;g<c.length;g++)if(d=c[g],e=H[d[0]],f=d[1],c[g+1]&&a<=(e*f[f.length-1]+H[c[g+1][0]])/2)break;e===H.year&&a<5*e&&(f=[1,2,5]);c=vb(a/e,f,d[0]==="year"?t(ub(a/e),1):1);return{unitRange:e,count:c,unitName:d[0]}};ia.prototype.getLogTickPositions=function(a,b,c,d){var e=this.options,f=this.len,g=this.lin2log,h=\nthis.log2lin,i=[];if(!d)this._minorAutoInterval=null;if(a>=0.5)a=C(a),i=this.getLinearTickPositions(a,b,c);else if(a>=0.08)for(var f=V(b),j,k,l,m,n,e=a>0.3?[1,2,4]:a>0.15?[1,2,4,6,8]:[1,2,3,4,5,6,7,8,9];f<c+1&&!n;f++){k=e.length;for(j=0;j<k&&!n;j++)l=h(g(f)*e[j]),l>b&&(!d||m<=c)&&m!==A&&i.push(m),m>c&&(n=!0),m=l}else if(b=g(b),c=g(c),a=e[d?"minorTickInterval":"tickInterval"],a=p(a==="auto"?null:a,this._minorAutoInterval,(c-b)*(e.tickPixelInterval/(d?5:1))/((d?f/this.tickPositions.length:f)||1)),a=\nvb(a,null,ub(a)),i=Da(this.getLinearTickPositions(a,b,c),h),!d)this._minorAutoInterval=a/5;if(!d)this.tickInterval=a;return i};ia.prototype.log2lin=function(a){return Z.log(a)/Z.LN10};ia.prototype.lin2log=function(a){return Z.pow(10,a)};var Qb=u.Tooltip=function(){this.init.apply(this,arguments)};Qb.prototype={init:function(a,b){var c=b.borderWidth,d=b.style,e=B(d.padding);this.chart=a;this.options=b;this.crosshairs=[];this.now={x:0,y:0};this.isHidden=!0;this.label=a.renderer.label("",0,0,b.shape||\n"callout",null,null,b.useHTML,null,"tooltip").attr({padding:e,fill:b.backgroundColor,"stroke-width":c,r:b.borderRadius,zIndex:8}).css(d).css({padding:0}).add().attr({y:-9E9});la||this.label.shadow(b.shadow);this.shared=b.shared},destroy:function(){if(this.label)this.label=this.label.destroy();clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout)},move:function(a,b,c,d){var e=this,f=e.now,g=e.options.animation!==!1&&!e.isHidden&&(Q(a-f.x)>1||Q(b-f.y)>1),h=e.followPointer||e.len>1;x(f,{x:g?\n(2*f.x+a)/3:a,y:g?(f.y+b)/2:b,anchorX:h?A:g?(2*f.anchorX+c)/3:c,anchorY:h?A:g?(f.anchorY+d)/2:d});e.label.attr(f);if(g)clearTimeout(this.tooltipTimeout),this.tooltipTimeout=setTimeout(function(){e&&e.move(a,b,c,d)},32)},hide:function(a){var b=this;clearTimeout(this.hideTimer);a=p(a,this.options.hideDelay,500);if(!this.isHidden)this.hideTimer=Ra(function(){b.label[a?"fadeOut":"hide"]();b.isHidden=!0},a)},getAnchor:function(a,b){var c,d=this.chart,e=d.inverted,f=d.plotTop,g=d.plotLeft,h=0,i=0,j,k,a=\nua(a);c=a[0].tooltipPos;this.followPointer&&b&&(b.chartX===A&&(b=d.pointer.normalize(b)),c=[b.chartX-d.plotLeft,b.chartY-f]);c||(q(a,function(a){j=a.series.yAxis;k=a.series.xAxis;h+=a.plotX+(!e&&k?k.left-g:0);i+=(a.plotLow?(a.plotLow+a.plotHigh)/2:a.plotY)+(!e&&j?j.top-f:0)}),h/=a.length,i/=a.length,c=[e?d.plotWidth-i:h,this.shared&&!e&&a.length>1&&b?b.chartY-f:e?d.plotHeight-h:i]);return Da(c,C)},getPosition:function(a,b,c){var d=this.chart,e=this.distance,f={},g=c.h||0,h,i=["y",d.chartHeight,b,\nc.plotY+d.plotTop,d.plotTop,d.plotTop+d.plotHeight],j=["x",d.chartWidth,a,c.plotX+d.plotLeft,d.plotLeft,d.plotLeft+d.plotWidth],k=!this.followPointer&&p(c.ttBelow,!d.inverted===!!c.negative),l=function(a,b,c,d,h,i){var j=c<d-e,m=d+e+c<b,l=d-e-c;d+=e;if(k&&m)f[a]=d;else if(!k&&j)f[a]=l;else if(j)f[a]=F(i-c,l-g<0?l:l-g);else if(m)f[a]=t(h,d+g+c>b?d:d+g);else return!1},m=function(a,b,c,d){var g;d<e||d>b-e?g=!1:f[a]=d<c/2?1:d>b-c/2?b-c-2:d-c/2;return g},n=function(a){var b=i;i=j;j=b;h=a},o=function(){l.apply(0,\ni)!==!1?m.apply(0,j)===!1&&!h&&(n(!0),o()):h?f.x=f.y=0:(n(!0),o())};(d.inverted||this.len>1)&&n();o();return f},defaultFormatter:function(a){var b=this.points||ua(this),c;c=[a.tooltipFooterHeaderFormatter(b[0])];c=c.concat(a.bodyFormatter(b));c.push(a.tooltipFooterHeaderFormatter(b[0],!0));return c.join("")},refresh:function(a,b){var c=this.chart,d=this.label,e=this.options,f,g,h,i={},j,k=[];j=e.formatter||this.defaultFormatter;var i=c.hoverPoints,l,m=this.shared;clearTimeout(this.hideTimer);this.followPointer=\nua(a)[0].series.tooltipOptions.followPointer;h=this.getAnchor(a,b);f=h[0];g=h[1];m&&(!a.series||!a.series.noSharedTooltip)?(c.hoverPoints=a,i&&q(i,function(a){a.setState()}),q(a,function(a){a.setState("hover");k.push(a.getLabelConfig())}),i={x:a[0].category,y:a[0].y},i.points=k,this.len=k.length,a=a[0]):i=a.getLabelConfig();j=j.call(i,this);i=a.series;this.distance=p(i.tooltipOptions.distance,16);j===!1?this.hide():(this.isHidden&&(Ka(d),d.attr("opacity",1).show()),d.attr({text:j}),l=e.borderColor||\na.color||i.color||"#606060",d.attr({stroke:l}),this.updatePosition({plotX:f,plotY:g,negative:a.negative,ttBelow:a.ttBelow,h:h[2]||0}),this.isHidden=!1);I(c,"tooltipRefresh",{text:j,x:f+c.plotLeft,y:g+c.plotTop,borderColor:l})},updatePosition:function(a){var b=this.chart,c=this.label,c=(this.options.positioner||this.getPosition).call(this,c.width,c.height,a);this.move(C(c.x),C(c.y||0),a.plotX+b.plotLeft,a.plotY+b.plotTop)},getXDateFormat:function(a,b,c){var d,b=b.dateTimeLabelFormats,e=c&&c.closestPointRange,\nf,g={millisecond:15,second:12,minute:9,hour:6,day:3},h,i="millisecond";if(e){h=Sa("%m-%d %H:%M:%S.%L",a.x);for(f in H){if(e===H.week&&+Sa("%w",a.x)===c.options.startOfWeek&&h.substr(6)==="00:00:00.000"){f="week";break}if(H[f]>e){f=i;break}if(g[f]&&h.substr(g[f])!=="01-01 00:00:00.000".substr(g[f]))break;f!=="week"&&(i=f)}f&&(d=b[f])}else d=b.day;return d||b.year},tooltipFooterHeaderFormatter:function(a,b){var c=b?"footer":"header",d=a.series,e=d.tooltipOptions,f=e.xDateFormat,g=d.xAxis,h=g&&g.options.type===\n"datetime"&&J(a.key),c=e[c+"Format"];h&&!f&&(f=this.getXDateFormat(a,e,g));h&&f&&(c=c.replace("{point.key}","{point.key:"+f+"}"));return Na(c,{point:a,series:d})},bodyFormatter:function(a){return Da(a,function(a){var c=a.series.tooltipOptions;return(c.pointFormatter||a.point.tooltipFormatter).call(a.point,c.pointFormat)})}};var ja;fb=y&&y.documentElement.ontouchstart!==A;var Za=u.Pointer=function(a,b){this.init(a,b)};Za.prototype={init:function(a,b){var c=b.chart,d=c.events,e=la?"":c.zoomType,c=a.inverted,\nf;this.options=b;this.chart=a;this.zoomX=f=/x/.test(e);this.zoomY=e=/y/.test(e);this.zoomHor=f&&!c||e&&c;this.zoomVert=e&&!c||f&&c;this.hasZoom=f||e;this.runChartClick=d&&!!d.click;this.pinchDown=[];this.lastValidTouch={};if(u.Tooltip&&b.tooltip.enabled)a.tooltip=new Qb(a,b.tooltip),this.followTouchMove=p(b.tooltip.followTouchMove,!0);this.setDOMEvents()},normalize:function(a,b){var c,d,a=a||D.event;if(!a.target)a.target=a.srcElement;d=a.touches?a.touches.length?a.touches.item(0):a.changedTouches[0]:\na;if(!b)this.chartPosition=b=Cb(this.chart.container);d.pageX===A?(c=t(a.x,a.clientX-b.left),d=a.y):(c=d.pageX-b.left,d=d.pageY-b.top);return x(a,{chartX:C(c),chartY:C(d)})},getCoordinates:function(a){var b={xAxis:[],yAxis:[]};q(this.chart.axes,function(c){b[c.isXAxis?"xAxis":"yAxis"].push({axis:c,value:c.toValue(a[c.horiz?"chartX":"chartY"])})});return b},runPointActions:function(a){var b=this.chart,c=b.series,d=b.tooltip,e=d?d.shared:!1,f=b.hoverPoint,g=b.hoverSeries,h,i=[Number.MAX_VALUE,Number.MAX_VALUE],\nj,k,l=[],m=[],n;if(!e&&!g)for(h=0;h<c.length;h++)if(c[h].directTouch||!c[h].options.stickyTracking)c=[];g&&(e?g.noSharedTooltip:g.directTouch)&&f?m=[f]:(q(c,function(b){j=b.noSharedTooltip&&e;k=!e&&b.directTouch;b.visible&&!j&&!k&&p(b.options.enableMouseTracking,!0)&&(n=b.searchPoint(a,!j&&b.kdDimensions===1))&&n.series&&l.push(n)}),q(l,function(a){a&&q(["dist","distX"],function(b,c){if(J(a[b])){var d=a[b]===i[c]&&a.series.group.zIndex>=m[c].series.group.zIndex;if(a[b]<i[c]||d)i[c]=a[b],m[c]=a}})}));\nif(e)for(h=l.length;h--;)(l[h].clientX!==m[1].clientX||l[h].series.noSharedTooltip)&&l.splice(h,1);if(m[0]&&(m[0]!==this.prevKDPoint||d&&d.isHidden))if(e&&!m[0].series.noSharedTooltip)l.length&&d&&d.refresh(l,a),q(l,function(b){b.onMouseOver(a,b!==(g&&g.directTouch&&f||m[0]))}),this.prevKDPoint=m[1];else{d&&d.refresh(m[0],a);if(!g||!g.directTouch)m[0].onMouseOver(a);this.prevKDPoint=m[0]}else c=g&&g.tooltipOptions.followPointer,d&&c&&!d.isHidden&&(c=d.getAnchor([{}],a),d.updatePosition({plotX:c[0],\nplotY:c[1]}));if(!this._onDocumentMouseMove)this._onDocumentMouseMove=function(a){if(T[ja])T[ja].pointer.onDocumentMouseMove(a)},N(y,"mousemove",this._onDocumentMouseMove);q(e?l:[p(f,m[1])],function(c){q(b.axes,function(b){(!c||c.series[b.coll]===b)&&b.drawCrosshair(a,c)})})},reset:function(a,b){var c=this.chart,d=c.hoverSeries,e=c.hoverPoint,f=c.hoverPoints,g=c.tooltip,h=g&&g.shared?f:e;a&&h&&q(ua(h),function(b){b.series.isCartesian&&b.plotX===void 0&&(a=!1)});if(a)g&&h&&(g.refresh(h),e&&(e.setState(e.state,\n!0),q(c.axes,function(a){a.crosshair&&a.drawCrosshair(null,e)})));else{if(e)e.onMouseOut();f&&q(f,function(a){a.setState()});if(d)d.onMouseOut();g&&g.hide(b);if(this._onDocumentMouseMove)Y(y,"mousemove",this._onDocumentMouseMove),this._onDocumentMouseMove=null;q(c.axes,function(a){a.hideCrosshair()});this.hoverX=this.prevKDPoint=c.hoverPoints=c.hoverPoint=null}},scaleGroups:function(a,b){var c=this.chart,d;q(c.series,function(e){d=a||e.getPlotBox();e.xAxis&&e.xAxis.zoomEnabled&&(e.group.attr(d),e.markerGroup&&\n(e.markerGroup.attr(d),e.markerGroup.clip(b?c.clipRect:null)),e.dataLabelsGroup&&e.dataLabelsGroup.attr(d))});c.clipRect.attr(b||c.clipBox)},dragStart:function(a){var b=this.chart;b.mouseIsDown=a.type;b.cancelClick=!1;b.mouseDownX=this.mouseDownX=a.chartX;b.mouseDownY=this.mouseDownY=a.chartY},drag:function(a){var b=this.chart,c=b.options.chart,d=a.chartX,e=a.chartY,f=this.zoomHor,g=this.zoomVert,h=b.plotLeft,i=b.plotTop,j=b.plotWidth,k=b.plotHeight,l,m=this.selectionMarker,n=this.mouseDownX,o=this.mouseDownY,\np=c.panKey&&a[c.panKey+"Key"];if(!m||!m.touch)if(d<h?d=h:d>h+j&&(d=h+j),e<i?e=i:e>i+k&&(e=i+k),this.hasDragged=Math.sqrt(Math.pow(n-d,2)+Math.pow(o-e,2)),this.hasDragged>10){l=b.isInsidePlot(n-h,o-i);if(b.hasCartesianSeries&&(this.zoomX||this.zoomY)&&l&&!p&&!m)this.selectionMarker=m=b.renderer.rect(h,i,f?1:j,g?1:k,0).attr({fill:c.selectionMarkerFill||"rgba(69,114,167,0.25)",zIndex:7}).add();m&&f&&(d-=n,m.attr({width:Q(d),x:(d>0?0:d)+n}));m&&g&&(d=e-o,m.attr({height:Q(d),y:(d>0?0:d)+o}));l&&!m&&c.panning&&\nb.pan(a,c.panning)}},drop:function(a){var b=this,c=this.chart,d=this.hasPinched;if(this.selectionMarker){var e={originalEvent:a,xAxis:[],yAxis:[]},f=this.selectionMarker,g=f.attr?f.attr("x"):f.x,h=f.attr?f.attr("y"):f.y,i=f.attr?f.attr("width"):f.width,j=f.attr?f.attr("height"):f.height,k;if(this.hasDragged||d)q(c.axes,function(c){if(c.zoomEnabled&&s(c.min)&&(d||b[{xAxis:"zoomX",yAxis:"zoomY"}[c.coll]])){var f=c.horiz,n=a.type==="touchend"?c.minPixelPadding:0,o=c.toValue((f?g:h)+n),f=c.toValue((f?\ng+i:h+j)-n);e[c.coll].push({axis:c,min:F(o,f),max:t(o,f)});k=!0}}),k&&I(c,"selection",e,function(a){c.zoom(x(a,d?{animation:!1}:null))});this.selectionMarker=this.selectionMarker.destroy();d&&this.scaleGroups()}if(c)M(c.container,{cursor:c._cursor}),c.cancelClick=this.hasDragged>10,c.mouseIsDown=this.hasDragged=this.hasPinched=!1,this.pinchDown=[]},onContainerMouseDown:function(a){a=this.normalize(a);a.preventDefault&&a.preventDefault();this.dragStart(a)},onDocumentMouseUp:function(a){T[ja]&&T[ja].pointer.drop(a)},\nonDocumentMouseMove:function(a){var b=this.chart,c=this.chartPosition,a=this.normalize(a,c);c&&!this.inClass(a.target,"highcharts-tracker")&&!b.isInsidePlot(a.chartX-b.plotLeft,a.chartY-b.plotTop)&&this.reset()},onContainerMouseLeave:function(a){var b=T[ja];if(b&&(a.relatedTarget||a.toElement))b.pointer.reset(),b.pointer.chartPosition=null},onContainerMouseMove:function(a){var b=this.chart;if(!s(ja)||!T[ja]||!T[ja].mouseIsDown)ja=b.index;a=this.normalize(a);a.returnValue=!1;b.mouseIsDown==="mousedown"&&\nthis.drag(a);(this.inClass(a.target,"highcharts-tracker")||b.isInsidePlot(a.chartX-b.plotLeft,a.chartY-b.plotTop))&&!b.openMenu&&this.runPointActions(a)},inClass:function(a,b){for(var c;a;){if(c=P(a,"class")){if(c.indexOf(b)!==-1)return!0;if(c.indexOf("highcharts-container")!==-1)return!1}a=a.parentNode}},onTrackerMouseOut:function(a){var b=this.chart.hoverSeries,a=a.relatedTarget||a.toElement;if(b&&a&&!b.options.stickyTracking&&!this.inClass(a,"highcharts-tooltip")&&!this.inClass(a,"highcharts-series-"+\nb.index))b.onMouseOut()},onContainerClick:function(a){var b=this.chart,c=b.hoverPoint,d=b.plotLeft,e=b.plotTop,a=this.normalize(a);b.cancelClick||(c&&this.inClass(a.target,"highcharts-tracker")?(I(c.series,"click",x(a,{point:c})),b.hoverPoint&&c.firePointEvent("click",a)):(x(a,this.getCoordinates(a)),b.isInsidePlot(a.chartX-d,a.chartY-e)&&I(b,"click",a)))},setDOMEvents:function(){var a=this,b=a.chart.container;b.onmousedown=function(b){a.onContainerMouseDown(b)};b.onmousemove=function(b){a.onContainerMouseMove(b)};\nb.onclick=function(b){a.onContainerClick(b)};N(b,"mouseleave",a.onContainerMouseLeave);gb===1&&N(y,"mouseup",a.onDocumentMouseUp);if(fb)b.ontouchstart=function(b){a.onContainerTouchStart(b)},b.ontouchmove=function(b){a.onContainerTouchMove(b)},gb===1&&N(y,"touchend",a.onDocumentTouchEnd)},destroy:function(){var a;Y(this.chart.container,"mouseleave",this.onContainerMouseLeave);gb||(Y(y,"mouseup",this.onDocumentMouseUp),Y(y,"touchend",this.onDocumentTouchEnd));clearInterval(this.tooltipTimeout);for(a in this)this[a]=\nnull}};x(u.Pointer.prototype,{pinchTranslate:function(a,b,c,d,e,f){(this.zoomHor||this.pinchHor)&&this.pinchTranslateDirection(!0,a,b,c,d,e,f);(this.zoomVert||this.pinchVert)&&this.pinchTranslateDirection(!1,a,b,c,d,e,f)},pinchTranslateDirection:function(a,b,c,d,e,f,g,h){var i=this.chart,j=a?"x":"y",k=a?"X":"Y",l="chart"+k,m=a?"width":"height",n=i["plot"+(a?"Left":"Top")],o,p,r=h||1,q=i.inverted,w=i.bounds[a?"h":"v"],v=b.length===1,s=b[0][l],t=c[0][l],x=!v&&b[1][l],u=!v&&c[1][l],C,c=function(){!v&&\nQ(s-x)>20&&(r=h||Q(t-u)/Q(s-x));p=(n-t)/r+s;o=i["plot"+(a?"Width":"Height")]/r};c();b=p;b<w.min?(b=w.min,C=!0):b+o>w.max&&(b=w.max-o,C=!0);C?(t-=0.8*(t-g[j][0]),v||(u-=0.8*(u-g[j][1])),c()):g[j]=[t,u];q||(f[j]=p-n,f[m]=o);f=q?1/r:r;e[m]=o;e[j]=b;d[q?a?"scaleY":"scaleX":"scale"+k]=r;d["translate"+k]=f*n+(t-f*s)},pinch:function(a){var b=this,c=b.chart,d=b.pinchDown,e=a.touches,f=e.length,g=b.lastValidTouch,h=b.hasZoom,i=b.selectionMarker,j={},k=f===1&&(b.inClass(a.target,"highcharts-tracker")&&c.runTrackerClick||\nb.runChartClick),l={};if(f>1)b.initiated=!0;h&&b.initiated&&!k&&a.preventDefault();Da(e,function(a){return b.normalize(a)});if(a.type==="touchstart")q(e,function(a,b){d[b]={chartX:a.chartX,chartY:a.chartY}}),g.x=[d[0].chartX,d[1]&&d[1].chartX],g.y=[d[0].chartY,d[1]&&d[1].chartY],q(c.axes,function(a){if(a.zoomEnabled){var b=c.bounds[a.horiz?"h":"v"],d=a.minPixelPadding,e=a.toPixels(p(a.options.min,a.dataMin)),f=a.toPixels(p(a.options.max,a.dataMax)),g=F(e,f),e=t(e,f);b.min=F(a.pos,g-d);b.max=t(a.pos+\na.len,e+d)}}),b.res=!0;else if(d.length){if(!i)b.selectionMarker=i=x({destroy:Ba,touch:!0},c.plotBox);b.pinchTranslate(d,e,j,i,l,g);b.hasPinched=h;b.scaleGroups(j,l);if(!h&&b.followTouchMove&&f===1)this.runPointActions(b.normalize(a));else if(b.res)b.res=!1,this.reset(!1,0)}},touch:function(a,b){var c=this.chart,d;ja=c.index;if(a.touches.length===1)if(a=this.normalize(a),c.isInsidePlot(a.chartX-c.plotLeft,a.chartY-c.plotTop)&&!c.openMenu){b&&this.runPointActions(a);if(a.type==="touchmove")c=this.pinchDown,\nd=c[0]?Math.sqrt(Math.pow(c[0].chartX-a.chartX,2)+Math.pow(c[0].chartY-a.chartY,2))>=4:!1;p(d,!0)&&this.pinch(a)}else b&&this.reset();else a.touches.length===2&&this.pinch(a)},onContainerTouchStart:function(a){this.touch(a,!0)},onContainerTouchMove:function(a){this.touch(a)},onDocumentTouchEnd:function(a){T[ja]&&T[ja].pointer.drop(a)}});if(D.PointerEvent||D.MSPointerEvent){var wa={},Eb=!!D.PointerEvent,Tb=function(){var a,b=[];b.item=function(a){return this[a]};for(a in wa)wa.hasOwnProperty(a)&&b.push({pageX:wa[a].pageX,\npageY:wa[a].pageY,target:wa[a].target});return b},Fb=function(a,b,c,d){if((a.pointerType==="touch"||a.pointerType===a.MSPOINTER_TYPE_TOUCH)&&T[ja])d(a),d=T[ja].pointer,d[b]({type:c,target:a.currentTarget,preventDefault:Ba,touches:Tb()})};x(Za.prototype,{onContainerPointerDown:function(a){Fb(a,"onContainerTouchStart","touchstart",function(a){wa[a.pointerId]={pageX:a.pageX,pageY:a.pageY,target:a.currentTarget}})},onContainerPointerMove:function(a){Fb(a,"onContainerTouchMove","touchmove",function(a){wa[a.pointerId]=\n{pageX:a.pageX,pageY:a.pageY};if(!wa[a.pointerId].target)wa[a.pointerId].target=a.currentTarget})},onDocumentPointerUp:function(a){Fb(a,"onDocumentTouchEnd","touchend",function(a){delete wa[a.pointerId]})},batchMSEvents:function(a){a(this.chart.container,Eb?"pointerdown":"MSPointerDown",this.onContainerPointerDown);a(this.chart.container,Eb?"pointermove":"MSPointerMove",this.onContainerPointerMove);a(y,Eb?"pointerup":"MSPointerUp",this.onDocumentPointerUp)}});hb(Za.prototype,"init",function(a,b,c){a.call(this,\nb,c);this.hasZoom&&M(b.container,{"-ms-touch-action":"none","touch-action":"none"})});hb(Za.prototype,"setDOMEvents",function(a){a.apply(this);(this.hasZoom||this.followTouchMove)&&this.batchMSEvents(N)});hb(Za.prototype,"destroy",function(a){this.batchMSEvents(Y);a.call(this)})}var rb=u.Legend=function(a,b){this.init(a,b)};rb.prototype={init:function(a,b){var c=this,d=b.itemStyle,e=b.itemMarginTop||0;this.options=b;if(b.enabled)c.itemStyle=d,c.itemHiddenStyle=E(d,b.itemHiddenStyle),c.itemMarginTop=\ne,c.padding=d=p(b.padding,8),c.initialItemX=d,c.initialItemY=d-5,c.maxItemWidth=0,c.chart=a,c.itemHeight=0,c.symbolWidth=p(b.symbolWidth,16),c.pages=[],c.render(),N(c.chart,"endResize",function(){c.positionCheckboxes()})},colorizeItem:function(a,b){var c=this.options,d=a.legendItem,e=a.legendLine,f=a.legendSymbol,g=this.itemHiddenStyle.color,c=b?c.itemStyle.color:g,h=b?a.legendColor||a.color||"#CCC":g,g=a.options&&a.options.marker,i={fill:h},j;d&&d.css({fill:c,color:c});e&&e.attr({stroke:h});if(f){if(g&&\nf.isMarker)for(j in i.stroke=h,g=a.convertAttribs(g),g)d=g[j],d!==A&&(i[j]=d);f.attr(i)}},positionItem:function(a){var b=this.options,c=b.symbolPadding,b=!b.rtl,d=a._legendItemPos,e=d[0],d=d[1],f=a.checkbox;(a=a.legendGroup)&&a.element&&a.translate(b?e:this.legendWidth-e-2*c-4,d);if(f)f.x=e,f.y=d},destroyItem:function(a){var b=a.checkbox;q(["legendItem","legendLine","legendSymbol","legendGroup"],function(b){a[b]&&(a[b]=a[b].destroy())});b&&Ua(a.checkbox)},destroy:function(){var a=this.group,b=this.box;\nif(b)this.box=b.destroy();if(a)this.group=a.destroy()},positionCheckboxes:function(a){var b=this.group.alignAttr,c,d=this.clipHeight||this.legendHeight,e=this.titleHeight;if(b)c=b.translateY,q(this.allItems,function(f){var g=f.checkbox,h;g&&(h=c+e+g.y+(a||0)+3,M(g,{left:b.translateX+f.checkboxOffset+g.x-20+"px",top:h+"px",display:h>c-6&&h<c+d-6?"":"none"}))})},renderTitle:function(){var a=this.padding,b=this.options.title,c=0;if(b.text){if(!this.title)this.title=this.chart.renderer.label(b.text,a-\n3,a-4,null,null,null,null,null,"legend-title").attr({zIndex:1}).css(b.style).add(this.group);a=this.title.getBBox();c=a.height;this.offsetWidth=a.width;this.contentGroup.attr({translateY:c})}this.titleHeight=c},setText:function(a){var b=this.options;a.legendItem.attr({text:b.labelFormat?Na(b.labelFormat,a):b.labelFormatter.call(a)})},renderItem:function(a){var b=this.chart,c=b.renderer,d=this.options,e=d.layout==="horizontal",f=this.symbolWidth,g=d.symbolPadding,h=this.itemStyle,i=this.itemHiddenStyle,\nj=this.padding,k=e?p(d.itemDistance,20):0,l=!d.rtl,m=d.width,n=d.itemMarginBottom||0,o=this.itemMarginTop,z=this.initialItemX,r=a.legendItem,q=a.series&&a.series.drawLegendSymbol?a.series:a,w=q.options,w=this.createCheckboxForItem&&w&&w.showCheckbox,v=d.useHTML;if(!r){a.legendGroup=c.g("legend-item").attr({zIndex:1}).add(this.scrollGroup);a.legendItem=r=c.text("",l?f+g:-g,this.baseline||0,v).css(E(a.visible?h:i)).attr({align:l?"left":"right",zIndex:2}).add(a.legendGroup);if(!this.baseline)this.fontMetrics=\nc.fontMetrics(h.fontSize,r),this.baseline=this.fontMetrics.f+3+o,r.attr("y",this.baseline);q.drawLegendSymbol(this,a);this.setItemEvents&&this.setItemEvents(a,r,v,h,i);w&&this.createCheckboxForItem(a)}this.colorizeItem(a,a.visible);this.setText(a);c=r.getBBox();f=a.checkboxOffset=d.itemWidth||a.legendItemWidth||f+g+c.width+k+(w?20:0);this.itemHeight=g=C(a.legendItemHeight||c.height);if(e&&this.itemX-z+f>(m||b.chartWidth-2*j-z-d.x))this.itemX=z,this.itemY+=o+this.lastLineHeight+n,this.lastLineHeight=\n0;this.maxItemWidth=t(this.maxItemWidth,f);this.lastItemY=o+this.itemY+n;this.lastLineHeight=t(g,this.lastLineHeight);a._legendItemPos=[this.itemX,this.itemY];e?this.itemX+=f:(this.itemY+=o+g+n,this.lastLineHeight=g);this.offsetWidth=m||t((e?this.itemX-z-k:f)+j,this.offsetWidth)},getAllItems:function(){var a=[];q(this.chart.series,function(b){var c=b.options;if(p(c.showInLegend,!s(c.linkedTo)?A:!1,!0))a=a.concat(b.legendItems||(c.legendType==="point"?b.data:b))});return a},adjustMargins:function(a,\nb){var c=this.chart,d=this.options,e=d.align.charAt(0)+d.verticalAlign.charAt(0)+d.layout.charAt(0);d.floating||q([/(lth|ct|rth)/,/(rtv|rm|rbv)/,/(rbh|cb|lbh)/,/(lbv|lm|ltv)/],function(f,g){f.test(e)&&!s(a[g])&&(c[pb[g]]=t(c[pb[g]],c.legend[(g+1)%2?"legendHeight":"legendWidth"]+[1,-1,-1,1][g]*d[g%2?"x":"y"]+p(d.margin,12)+b[g]))})},render:function(){var a=this,b=a.chart,c=b.renderer,d=a.group,e,f,g,h,i=a.box,j=a.options,k=a.padding,l=j.borderWidth,m=j.backgroundColor;a.itemX=a.initialItemX;a.itemY=\na.initialItemY;a.offsetWidth=0;a.lastItemY=0;if(!d)a.group=d=c.g("legend").attr({zIndex:7}).add(),a.contentGroup=c.g().attr({zIndex:1}).add(d),a.scrollGroup=c.g().add(a.contentGroup);a.renderTitle();e=a.getAllItems();jb(e,function(a,b){return(a.options&&a.options.legendIndex||0)-(b.options&&b.options.legendIndex||0)});j.reversed&&e.reverse();a.allItems=e;a.display=f=!!e.length;a.lastLineHeight=0;q(e,function(b){a.renderItem(b)});g=(j.width||a.offsetWidth)+k;h=a.lastItemY+a.lastLineHeight+a.titleHeight;\nh=a.handleOverflow(h);h+=k;if(l||m){if(i){if(g>0&&h>0)i[i.isNew?"attr":"animate"](i.crisp({width:g,height:h})),i.isNew=!1}else a.box=i=c.rect(0,0,g,h,j.borderRadius,l||0).attr({stroke:j.borderColor,"stroke-width":l||0,fill:m||"none"}).add(d).shadow(j.shadow),i.isNew=!0;i[f?"show":"hide"]()}a.legendWidth=g;a.legendHeight=h;q(e,function(b){a.positionItem(b)});f&&d.align(x({width:g,height:h},j),!0,"spacingBox");b.isResizing||this.positionCheckboxes()},handleOverflow:function(a){var b=this,c=this.chart,\nd=c.renderer,e=this.options,f=e.y,f=c.spacingBox.height+(e.verticalAlign==="top"?-f:f)-this.padding,g=e.maxHeight,h,i=this.clipRect,j=e.navigation,k=p(j.animation,!0),l=j.arrowSize||12,m=this.nav,n=this.pages,o=this.padding,z,r=this.allItems,s=function(a){i.attr({height:a});if(b.contentGroup.div)b.contentGroup.div.style.clip="rect("+o+"px,9999px,"+(o+a)+"px,0)"};e.layout==="horizontal"&&(f/=2);g&&(f=F(f,g));n.length=0;if(a>f&&j.enabled!==!1){this.clipHeight=h=t(f-20-this.titleHeight-o,0);this.currentPage=\np(this.currentPage,1);this.fullHeight=a;q(r,function(a,b){var c=a._legendItemPos[1],d=C(a.legendItem.getBBox().height),e=n.length;if(!e||c-n[e-1]>h&&(z||c)!==n[e-1])n.push(z||c),e++;b===r.length-1&&c+d-n[e-1]>h&&n.push(c);c!==z&&(z=c)});if(!i)i=b.clipRect=d.clipRect(0,o,9999,0),b.contentGroup.clip(i);s(h);if(!m)this.nav=m=d.g().attr({zIndex:1}).add(this.group),this.up=d.symbol("triangle",0,0,l,l).on("click",function(){b.scroll(-1,k)}).add(m),this.pager=d.text("",15,10).css(j.style).add(m),this.down=\nd.symbol("triangle-down",0,0,l,l).on("click",function(){b.scroll(1,k)}).add(m);b.scroll(0);a=f}else if(m)s(c.chartHeight),m.hide(),this.scrollGroup.attr({translateY:1}),this.clipHeight=0;return a},scroll:function(a,b){var c=this.pages,d=c.length,e=this.currentPage+a,f=this.clipHeight,g=this.options.navigation,h=g.activeColor,g=g.inactiveColor,i=this.pager,j=this.padding;e>d&&(e=d);if(e>0)b!==A&&Va(b,this.chart),this.nav.attr({translateX:j,translateY:f+this.padding+7+this.titleHeight,visibility:"visible"}),\nthis.up.attr({fill:e===1?g:h}).css({cursor:e===1?"default":"pointer"}),i.attr({text:e+"/"+d}),this.down.attr({x:18+this.pager.getBBox().width,fill:e===d?g:h}).css({cursor:e===d?"default":"pointer"}),c=-c[e-1]+this.initialItemY,this.scrollGroup.animate({translateY:c}),this.currentPage=e,this.positionCheckboxes(c)}};K=u.LegendSymbolMixin={drawRectangle:function(a,b){var c=a.options.symbolHeight||a.fontMetrics.f;b.legendSymbol=this.chart.renderer.rect(0,a.baseline-c+1,a.symbolWidth,c,a.options.symbolRadius||\n0).attr({zIndex:3}).add(b.legendGroup)},drawLineMarker:function(a){var b=this.options,c=b.marker,d=a.symbolWidth,e=this.chart.renderer,f=this.legendGroup,a=a.baseline-C(a.fontMetrics.b*0.3),g;if(b.lineWidth){g={"stroke-width":b.lineWidth};if(b.dashStyle)g.dashstyle=b.dashStyle;this.legendLine=e.path([X,0,a,S,d,a]).attr(g).add(f)}if(c&&c.enabled!==!1)b=c.radius,this.legendSymbol=c=e.symbol(this.symbol,d/2-b,a-b,2*b,2*b,c).add(f),c.isMarker=!0}};(/Trident\\/7\\.0/.test(Aa)||Qa)&&hb(rb.prototype,"positionItem",\nfunction(a,b){var c=this,d=function(){b._legendItemPos&&a.call(c,b)};d();setTimeout(d)});var ib=u.Chart=function(){this.getArgs.apply(this,arguments)};u.chart=function(a,b,c){return new ib(a,b,c)};ib.prototype={callbacks:[],getArgs:function(){var a=[].slice.call(arguments);if(ya(a[0])||a[0].nodeName)this.renderTo=a.shift();this.init(a[0],a[1])},init:function(a,b){var c,d=a.series;a.series=null;c=E(U,a);c.series=a.series=d;this.userOptions=a;d=c.chart;this.margin=this.splashArray("margin",d);this.spacing=\nthis.splashArray("spacing",d);var e=d.events;this.bounds={h:{},v:{}};this.callback=b;this.isResizing=0;this.options=c;this.axes=[];this.series=[];this.hasCartesianSeries=d.showAxes;var f=this,g;f.index=T.length;T.push(f);gb++;d.reflow!==!1&&N(f,"load",function(){f.initReflow()});if(e)for(g in e)N(f,g,e[g]);f.xAxis=[];f.yAxis=[];f.animation=la?!1:p(d.animation,!0);f.pointCount=f.colorCounter=f.symbolCounter=0;f.firstRender()},initSeries:function(a){var b=this.options.chart;(b=L[a.type||b.type||b.defaultSeriesType])||\nca(17,!0);b=new b;b.init(this,a);return b},isInsidePlot:function(a,b,c){var d=c?b:a,a=c?a:b;return d>=0&&d<=this.plotWidth&&a>=0&&a<=this.plotHeight},redraw:function(a){var b=this.axes,c=this.series,d=this.pointer,e=this.legend,f=this.isDirtyLegend,g,h,i=this.hasCartesianSeries,j=this.isDirtyBox,k=c.length,l=k,m=this.renderer,n=m.isHidden(),o=[];Va(a,this);n&&this.cloneRenderTo();for(this.layOutTitles();l--;)if(a=c[l],a.options.stacking&&(g=!0,a.isDirty)){h=!0;break}if(h)for(l=k;l--;)if(a=c[l],a.options.stacking)a.isDirty=\n!0;q(c,function(a){a.isDirty&&a.options.legendType==="point"&&(a.updateTotals&&a.updateTotals(),f=!0);a.isDirtyData&&I(a,"updatedData")});if(f&&e.options.enabled)e.render(),this.isDirtyLegend=!1;g&&this.getStacks();if(i&&!this.isResizing)this.maxTicks=null,q(b,function(a){a.setScale()});this.getMargins();i&&(q(b,function(a){a.isDirty&&(j=!0)}),q(b,function(a){var b=a.min+","+a.max;if(a.extKey!==b)a.extKey=b,o.push(function(){I(a,"afterSetExtremes",x(a.eventArgs,a.getExtremes()));delete a.eventArgs});\n(j||g)&&a.redraw()}));j&&this.drawChartBox();q(c,function(a){a.isDirty&&a.visible&&(!a.isCartesian||a.xAxis)&&a.redraw()});d&&d.reset(!0);m.draw();I(this,"redraw");n&&this.cloneRenderTo(!0);q(o,function(a){a.call()})},get:function(a){var b=this.axes,c=this.series,d,e;for(d=0;d<b.length;d++)if(b[d].options.id===a)return b[d];for(d=0;d<c.length;d++)if(c[d].options.id===a)return c[d];for(d=0;d<c.length;d++){e=c[d].points||[];for(b=0;b<e.length;b++)if(e[b].id===a)return e[b]}return null},getAxes:function(){var a=\nthis,b=this.options,c=b.xAxis=ua(b.xAxis||{}),b=b.yAxis=ua(b.yAxis||{});q(c,function(a,b){a.index=b;a.isX=!0});q(b,function(a,b){a.index=b});c=c.concat(b);q(c,function(b){new ia(a,b)})},getSelectedPoints:function(){var a=[];q(this.series,function(b){a=a.concat(Ca(b.points||[],function(a){return a.selected}))});return a},getSelectedSeries:function(){return Ca(this.series,function(a){return a.selected})},setTitle:function(a,b,c){var g;var d=this,e=d.options,f;f=e.title=E(e.title,a);g=e.subtitle=E(e.subtitle,\nb),e=g;q([["title",a,f],["subtitle",b,e]],function(a){var b=a[0],c=d[b],e=a[1],a=a[2];c&&e&&(d[b]=c=c.destroy());a&&a.text&&!c&&(d[b]=d.renderer.text(a.text,0,0,a.useHTML).attr({align:a.align,"class":"highcharts-"+b,zIndex:a.zIndex||4}).css(a.style).add())});d.layOutTitles(c)},layOutTitles:function(a){var b=0,c=this.title,d=this.subtitle,e=this.options,f=e.title,e=e.subtitle,g=this.renderer,h=this.spacingBox;if(c&&(c.css({width:(f.width||h.width+f.widthAdjust)+"px"}).align(x({y:g.fontMetrics(f.style.fontSize,\nc).b-3},f),!1,h),!f.floating&&!f.verticalAlign))b=c.getBBox().height;d&&(d.css({width:(e.width||h.width+e.widthAdjust)+"px"}).align(x({y:b+(f.margin-13)+g.fontMetrics(e.style.fontSize,c).b},e),!1,h),!e.floating&&!e.verticalAlign&&(b=va(b+d.getBBox().height)));c=this.titleOffset!==b;this.titleOffset=b;if(!this.isDirtyBox&&c)this.isDirtyBox=c,this.hasRendered&&p(a,!0)&&this.isDirtyBox&&this.redraw()},getChartSize:function(){var a=this.options.chart,b=a.width,a=a.height,c=this.renderToClone||this.renderTo;\nif(!s(b))this.containerWidth=oa(c,"width");if(!s(a))this.containerHeight=oa(c,"height");this.chartWidth=t(0,b||this.containerWidth||600);this.chartHeight=t(0,p(a,this.containerHeight>19?this.containerHeight:400))},cloneRenderTo:function(a){var b=this.renderToClone,c=this.container;a?b&&(this.renderTo.appendChild(c),Ua(b),delete this.renderToClone):(c&&c.parentNode===this.renderTo&&this.renderTo.removeChild(c),this.renderToClone=b=this.renderTo.cloneNode(0),M(b,{position:"absolute",top:"-9999px",display:"block"}),\nb.style.setProperty&&b.style.setProperty("display","block","important"),y.body.appendChild(b),c&&b.appendChild(c))},getContainer:function(){var a,b=this.options,c=b.chart,d,e;a=this.renderTo;var f="highcharts-"+Bb++;if(!a)this.renderTo=a=c.renderTo;if(ya(a))this.renderTo=a=y.getElementById(a);a||ca(13,!0);d=B(P(a,"data-highcharts-chart"));J(d)&&T[d]&&T[d].hasRendered&&T[d].destroy();P(a,"data-highcharts-chart",this.index);a.innerHTML="";!c.skipClone&&!a.offsetWidth&&this.cloneRenderTo();this.getChartSize();\nd=this.chartWidth;e=this.chartHeight;this.container=a=da(Pa,{className:"highcharts-container"+(c.className?" "+c.className:""),id:f},x({position:"relative",overflow:"hidden",width:d+"px",height:e+"px",textAlign:"left",lineHeight:"normal",zIndex:0,"-webkit-tap-highlight-color":"rgba(0,0,0,0)"},c.style),this.renderToClone||a);this._cursor=a.style.cursor;this.renderer=new (u[c.renderer]||eb)(a,d,e,c.style,c.forExport,b.exporting&&b.exporting.allowHTML);la&&this.renderer.create(this,a,d,e);this.renderer.chartIndex=\nthis.index},getMargins:function(a){var b=this.spacing,c=this.margin,d=this.titleOffset;this.resetMargins();if(d&&!s(c[0]))this.plotTop=t(this.plotTop,d+this.options.title.margin+b[0]);this.legend.display&&this.legend.adjustMargins(c,b);this.extraBottomMargin&&(this.marginBottom+=this.extraBottomMargin);this.extraTopMargin&&(this.plotTop+=this.extraTopMargin);a||this.getAxisMargins()},getAxisMargins:function(){var a=this,b=a.axisOffset=[0,0,0,0],c=a.margin;a.hasCartesianSeries&&q(a.axes,function(a){a.visible&&\na.getOffset()});q(pb,function(d,e){s(c[e])||(a[d]+=b[e])});a.setChartSize()},reflow:function(a){var b=this,c=b.options.chart,d=b.renderTo,e=s(c.width),f=c.width||oa(d,"width"),c=c.height||oa(d,"height"),d=a?a.target:D;if(!e&&!b.isPrinting&&f&&c&&(d===D||d===y)){if(f!==b.containerWidth||c!==b.containerHeight)clearTimeout(b.reflowTimeout),b.reflowTimeout=Ra(function(){b.container&&b.setSize(void 0,void 0,!1)},a?100:0);b.containerWidth=f;b.containerHeight=c}},initReflow:function(){var a=this,b=function(b){a.reflow(b)};\nN(D,"resize",b);N(a,"destroy",function(){Y(D,"resize",b)})},setSize:function(a,b,c){var d=this,e=d.renderer;d.isResizing+=1;Va(c,d);d.oldChartHeight=d.chartHeight;d.oldChartWidth=d.chartWidth;if(a!==void 0)d.options.chart.width=a;if(b!==void 0)d.options.chart.height=b;d.getChartSize();a=e.globalAnimation;(a?Ya:M)(d.container,{width:d.chartWidth+"px",height:d.chartHeight+"px"},a);d.setChartSize(!0);e.setSize(d.chartWidth,d.chartHeight,c);d.maxTicks=null;q(d.axes,function(a){a.isDirty=!0;a.setScale()});\nq(d.series,function(a){a.isDirty=!0});d.isDirtyLegend=!0;d.isDirtyBox=!0;d.layOutTitles();d.getMargins();d.redraw(c);d.oldChartHeight=null;I(d,"resize");Ra(function(){d&&I(d,"endResize",null,function(){d.isResizing-=1})},bb(a).duration)},setChartSize:function(a){var b=this.inverted,c=this.renderer,d=this.chartWidth,e=this.chartHeight,f=this.options.chart,g=this.spacing,h=this.clipOffset,i,j,k,l;this.plotLeft=i=C(this.plotLeft);this.plotTop=j=C(this.plotTop);this.plotWidth=k=t(0,C(d-i-this.marginRight));\nthis.plotHeight=l=t(0,C(e-j-this.marginBottom));this.plotSizeX=b?l:k;this.plotSizeY=b?k:l;this.plotBorderWidth=f.plotBorderWidth||0;this.spacingBox=c.spacingBox={x:g[3],y:g[0],width:d-g[3]-g[1],height:e-g[0]-g[2]};this.plotBox=c.plotBox={x:i,y:j,width:k,height:l};d=2*V(this.plotBorderWidth/2);b=va(t(d,h[3])/2);c=va(t(d,h[0])/2);this.clipBox={x:b,y:c,width:V(this.plotSizeX-t(d,h[1])/2-b),height:t(0,V(this.plotSizeY-t(d,h[2])/2-c))};a||q(this.axes,function(a){a.setAxisSize();a.setAxisTranslation()})},\nresetMargins:function(){var a=this;q(pb,function(b,c){a[b]=p(a.margin[c],a.spacing[c])});a.axisOffset=[0,0,0,0];a.clipOffset=[0,0,0,0]},drawChartBox:function(){var a=this.options.chart,b=this.renderer,c=this.chartWidth,d=this.chartHeight,e=this.chartBackground,f=this.plotBackground,g=this.plotBorder,h=this.plotBGImage,i=a.borderWidth||0,j=a.backgroundColor,k=a.plotBackgroundColor,l=a.plotBackgroundImage,m=a.plotBorderWidth||0,n,o=this.plotLeft,p=this.plotTop,r=this.plotWidth,q=this.plotHeight,w=this.plotBox,\nv=this.clipRect,s=this.clipBox;n=i+(a.shadow?8:0);if(i||j)if(e)e.animate(e.crisp({width:c-n,height:d-n}));else{e={fill:j||"none"};if(i)e.stroke=a.borderColor,e["stroke-width"]=i;this.chartBackground=b.rect(n/2,n/2,c-n,d-n,a.borderRadius,i).attr(e).addClass("highcharts-background").add().shadow(a.shadow)}if(k)f?f.animate(w):this.plotBackground=b.rect(o,p,r,q,0).attr({fill:k}).add().shadow(a.plotShadow);if(l)h?h.animate(w):this.plotBGImage=b.image(l,o,p,r,q).add();v?v.animate({width:s.width,height:s.height}):\nthis.clipRect=b.clipRect(s);if(m)g?(g.strokeWidth=-m,g.animate(g.crisp({x:o,y:p,width:r,height:q}))):this.plotBorder=b.rect(o,p,r,q,0,-m).attr({stroke:a.plotBorderColor,"stroke-width":m,fill:"none",zIndex:1}).add();this.isDirtyBox=!1},propFromSeries:function(){var a=this,b=a.options.chart,c,d=a.options.series,e,f;q(["inverted","angular","polar"],function(g){c=L[b.type||b.defaultSeriesType];f=a[g]||b[g]||c&&c.prototype[g];for(e=d&&d.length;!f&&e--;)(c=L[d[e].type])&&c.prototype[g]&&(f=!0);a[g]=f})},\nlinkSeries:function(){var a=this,b=a.series;q(b,function(a){a.linkedSeries.length=0});q(b,function(b){var d=b.options.linkedTo;if(ya(d)&&(d=d===":previous"?a.series[b.index-1]:a.get(d)))d.linkedSeries.push(b),b.linkedParent=d,b.visible=p(b.options.visible,d.options.visible,b.visible)})},renderSeries:function(){q(this.series,function(a){a.translate();a.render()})},renderLabels:function(){var a=this,b=a.options.labels;b.items&&q(b.items,function(c){var d=x(b.style,c.style),e=B(d.left)+a.plotLeft,f=\nB(d.top)+a.plotTop+12;delete d.left;delete d.top;a.renderer.text(c.html,e,f).attr({zIndex:2}).css(d).add()})},render:function(){var a=this.axes,b=this.renderer,c=this.options,d,e,f,g;this.setTitle();this.legend=new rb(this,c.legend);this.getStacks&&this.getStacks();this.getMargins(!0);this.setChartSize();d=this.plotWidth;e=this.plotHeight-=21;q(a,function(a){a.setScale()});this.getAxisMargins();f=d/this.plotWidth>1.1;g=e/this.plotHeight>1.05;if(f||g)this.maxTicks=null,q(a,function(a){(a.horiz&&f||\n!a.horiz&&g)&&a.setTickInterval(!0)}),this.getMargins();this.drawChartBox();this.hasCartesianSeries&&q(a,function(a){a.visible&&a.render()});if(!this.seriesGroup)this.seriesGroup=b.g("series-group").attr({zIndex:3}).add();this.renderSeries();this.renderLabels();this.showCredits(c.credits);this.hasRendered=!0},showCredits:function(a){if(a.enabled&&!this.credits)this.credits=this.renderer.text(a.text,0,0).on("click",function(){if(a.href)D.location.href=a.href}).attr({align:a.position.align,zIndex:8}).css(a.style).add().align(a.position)},\ndestroy:function(){var a=this,b=a.axes,c=a.series,d=a.container,e,f=d&&d.parentNode;I(a,"destroy");T[a.index]=A;gb--;a.renderTo.removeAttribute("data-highcharts-chart");Y(a);for(e=b.length;e--;)b[e]=b[e].destroy();for(e=c.length;e--;)c[e]=c[e].destroy();q("title,subtitle,chartBackground,plotBackground,plotBGImage,plotBorder,seriesGroup,clipRect,credits,pointer,scroller,rangeSelector,legend,resetZoomButton,tooltip,renderer".split(","),function(b){var c=a[b];c&&c.destroy&&(a[b]=c.destroy())});if(d)d.innerHTML=\n"",Y(d),f&&Ua(d);for(e in a)delete a[e]},isReadyToRender:function(){var a=this;return!ga&&D==D.top&&y.readyState!=="complete"||la&&!D.canvg?(la?Pb.push(function(){a.firstRender()},a.options.global.canvasToolsURL):y.attachEvent("onreadystatechange",function(){y.detachEvent("onreadystatechange",a.firstRender);y.readyState==="complete"&&a.firstRender()}),!1):!0},firstRender:function(){var a=this,b=a.options;if(a.isReadyToRender()){a.getContainer();I(a,"init");a.resetMargins();a.setChartSize();a.propFromSeries();\na.getAxes();q(b.series||[],function(b){a.initSeries(b)});a.linkSeries();I(a,"beforeRender");if(u.Pointer)a.pointer=new Za(a,b);a.render();a.renderer.draw();if(!a.renderer.imgCount&&a.onload)a.onload();a.cloneRenderTo(!0)}},onload:function(){var a=this;q([this.callback].concat(this.callbacks),function(b){b&&a.index!==void 0&&b.apply(a,[a])});I(a,"load");this.onload=null},splashArray:function(a,b){var c=b[a],c=$(c)?c:[c,c,c,c];return[p(b[a+"Top"],c[0]),p(b[a+"Right"],c[1]),p(b[a+"Bottom"],c[2]),p(b[a+\n"Left"],c[3])]}};var Db=u.CenteredSeriesMixin={getCenter:function(){var a=this.options,b=this.chart,c=2*(a.slicedOffset||0),d=b.plotWidth-2*c,b=b.plotHeight-2*c,e=a.center,e=[p(e[0],"50%"),p(e[1],"50%"),a.size||"100%",a.innerSize||0],f=F(d,b),g,h;for(g=0;g<4;++g)h=e[g],a=g<2||g===2&&/%$/.test(h),e[g]=(/%$/.test(h)?[d,b,f,e[2]][g]*parseFloat(h)/100:parseFloat(h))+(a?c:0);e[3]>e[2]&&(e[3]=e[2]);return e}},Ma=function(){};Ma.prototype={init:function(a,b,c){this.series=a;this.color=a.color;this.applyOptions(b,\nc);this.pointAttr={};if(a.options.colorByPoint&&(b=a.options.colors||a.chart.options.colors,this.color=this.color||b[a.colorCounter++],a.colorCounter===b.length))a.colorCounter=0;a.chart.pointCount++;return this},applyOptions:function(a,b){var c=this.series,d=c.options.pointValKey||c.pointValKey,a=Ma.prototype.optionsToObject.call(this,a);x(this,a);this.options=this.options?x(this.options,a):a;if(d)this.y=this[d];this.isNull=this.x===null||!J(this.y,!0);if(this.x===void 0&&c)this.x=b===void 0?c.autoIncrement(this):\nb;if(c.xAxis&&c.xAxis.names)c.xAxis.names[this.x]=this.name;return this},optionsToObject:function(a){var b={},c=this.series,d=c.options.keys,e=d||c.pointArrayMap||["y"],f=e.length,g=0,h=0;if(J(a)||a===null)b[e[0]]=a;else if(Fa(a)){if(!d&&a.length>f){c=typeof a[0];if(c==="string")b.name=a[0];else if(c==="number")b.x=a[0];g++}for(;h<f;){if(!d||a[g]!==void 0)b[e[h]]=a[g];g++;h++}}else if(typeof a==="object"){b=a;if(a.dataLabels)c._hasPointLabels=!0;if(a.marker)c._hasPointMarkers=!0}return b},destroy:function(){var a=\nthis.series.chart,b=a.hoverPoints,c;a.pointCount--;if(b&&(this.setState(),ra(b,this),!b.length))a.hoverPoints=null;if(this===a.hoverPoint)this.onMouseOut();if(this.graphic||this.dataLabel)Y(this),this.destroyElements();this.legendItem&&a.legend.destroyItem(this);for(c in this)this[c]=null},destroyElements:function(){for(var a=["graphic","dataLabel","dataLabelUpper","connector","shadowGroup"],b,c=6;c--;)b=a[c],this[b]&&(this[b]=this[b].destroy())},getLabelConfig:function(){return{x:this.category,y:this.y,\ncolor:this.color,key:this.name||this.category,series:this.series,point:this,percentage:this.percentage,total:this.total||this.stackTotal}},tooltipFormatter:function(a){var b=this.series,c=b.tooltipOptions,d=p(c.valueDecimals,""),e=c.valuePrefix||"",f=c.valueSuffix||"";q(b.pointArrayMap||["y"],function(b){b="{point."+b;if(e||f)a=a.replace(b+"}",e+b+"}"+f);a=a.replace(b+"}",b+":,."+d+"f}")});return Na(a,{point:this,series:this.series})},firePointEvent:function(a,b,c){var d=this,e=this.series.options;\n(e.point.events[a]||d.options&&d.options.events&&d.options.events[a])&&this.importEvents();a==="click"&&e.allowPointSelect&&(c=function(a){d.select&&d.select(null,a.ctrlKey||a.metaKey||a.shiftKey)});I(this,a,b,c)},visible:!0};var R=u.Series=function(){};R.prototype={isCartesian:!0,type:"line",pointClass:Ma,sorted:!0,requireSorting:!0,pointAttrToOptions:{stroke:"lineColor","stroke-width":"lineWidth",fill:"fillColor",r:"radius"},directTouch:!1,axisTypes:["xAxis","yAxis"],colorCounter:0,parallelArrays:["x",\n"y"],init:function(a,b){var c=this,d,e,f=a.series,g=function(a,b){return p(a.options.index,a._i)-p(b.options.index,b._i)};c.chart=a;c.options=b=c.setOptions(b);c.linkedSeries=[];c.bindAxes();x(c,{name:b.name,state:"",pointAttr:{},visible:b.visible!==!1,selected:b.selected===!0});if(la)b.animation=!1;e=b.events;for(d in e)N(c,d,e[d]);if(e&&e.click||b.point&&b.point.events&&b.point.events.click||b.allowPointSelect)a.runTrackerClick=!0;c.getColor();c.getSymbol();q(c.parallelArrays,function(a){c[a+"Data"]=\n[]});c.setData(b.data,!1);if(c.isCartesian)a.hasCartesianSeries=!0;f.push(c);c._i=f.length-1;jb(f,g);this.yAxis&&jb(this.yAxis.series,g);q(f,function(a,b){a.index=b;a.name=a.name||"Series "+(b+1)})},bindAxes:function(){var a=this,b=a.options,c=a.chart,d;q(a.axisTypes||[],function(e){q(c[e],function(c){d=c.options;if(b[e]===d.index||b[e]!==A&&b[e]===d.id||b[e]===A&&d.index===0)c.series.push(a),a[e]=c,c.isDirty=!0});!a[e]&&a.optionalAxis!==e&&ca(18,!0)})},updateParallelArrays:function(a,b){var c=a.series,\nd=arguments,e=J(b)?function(d){var e=d==="y"&&c.toYData?c.toYData(a):a[d];c[d+"Data"][b]=e}:function(a){Array.prototype[b].apply(c[a+"Data"],Array.prototype.slice.call(d,2))};q(c.parallelArrays,e)},autoIncrement:function(a){var g;var b=this.options,c=this.xIncrement,d=b.pointIntervalUnit,e=this.xAxis,f,c=p(c,b.pointStart,0);this.pointInterval=b=p(this.pointInterval,b.pointInterval,1);if(e&&e.categories&&a.name)if(this.requireSorting=!1,g=(f=Fa(e.categories))?e.categories:e.names,e=g,a=pa(a.name,e),\na===-1){if(!f)c=e.length}else c=a;d&&(a=new ma(c),d==="day"?a=+a[mb](a[Wa]()+b):d==="month"?a=+a[zb](a[cb]()+b):d==="year"&&(a=+a[Ab](a[db]()+b)),b=a-c);this.xIncrement=c+b;return c},setOptions:function(a){var b=this.chart,c=b.options.plotOptions,b=b.userOptions||{},d=b.plotOptions||{},e=c[this.type];this.userOptions=a;c=E(e,c.series,a);this.tooltipOptions=E(U.tooltip,U.plotOptions[this.type].tooltip,b.tooltip,d.series&&d.series.tooltip,d[this.type]&&d[this.type].tooltip,a.tooltip);e.marker===null&&\ndelete c.marker;this.zoneAxis=c.zoneAxis;a=this.zones=(c.zones||[]).slice();if((c.negativeColor||c.negativeFillColor)&&!c.zones)a.push({value:c[this.zoneAxis+"Threshold"]||c.threshold||0,color:c.negativeColor,fillColor:c.negativeFillColor});a.length&&s(a[a.length-1].value)&&a.push({color:this.color,fillColor:this.fillColor});return c},getCyclic:function(a,b,c){var d=this.userOptions,e="_"+a+"Index",f=a+"Counter";b||(s(d[e])?b=d[e]:(d[e]=b=this.chart[f]%c.length,this.chart[f]+=1),b=c[b]);this[a]=b},\ngetColor:function(){this.options.colorByPoint?this.options.color=null:this.getCyclic("color",this.options.color||fa[this.type].color,this.chart.options.colors)},getSymbol:function(){var a=this.options.marker;this.getCyclic("symbol",a.symbol,this.chart.options.symbols);if(/^url/.test(this.symbol))a.radius=0},drawLegendSymbol:K.drawLineMarker,setData:function(a,b,c,d){var e=this,f=e.points,g=f&&f.length||0,h,i=e.options,j=e.chart,k=null,l=e.xAxis,m=i.turboThreshold,n=this.xData,o=this.yData,z=(h=e.pointArrayMap)&&\nh.length,a=a||[];h=a.length;b=p(b,!0);if(d!==!1&&h&&g===h&&!e.cropped&&!e.hasGroupedData&&e.visible)q(a,function(a,b){f[b].update&&a!==i.data[b]&&f[b].update(a,!1,null,!1)});else{e.xIncrement=null;e.colorCounter=0;q(this.parallelArrays,function(a){e[a+"Data"].length=0});if(m&&h>m){for(c=0;k===null&&c<h;)k=a[c],c++;if(J(k)){k=p(i.pointStart,0);z=p(i.pointInterval,1);for(c=0;c<h;c++)n[c]=k,o[c]=a[c],k+=z;e.xIncrement=k}else if(Fa(k))if(z)for(c=0;c<h;c++)k=a[c],n[c]=k[0],o[c]=k.slice(1,z+1);else for(c=\n0;c<h;c++)k=a[c],n[c]=k[0],o[c]=k[1];else ca(12)}else for(c=0;c<h;c++)a[c]!==A&&(k={series:e},e.pointClass.prototype.applyOptions.apply(k,[a[c]]),e.updateParallelArrays(k,c));ya(o[0])&&ca(14,!0);e.data=[];e.options.data=e.userOptions.data=a;for(c=g;c--;)f[c]&&f[c].destroy&&f[c].destroy();if(l)l.minRange=l.userMinRange;e.isDirty=e.isDirtyData=j.isDirtyBox=!0;c=!1}i.legendType==="point"&&(this.processData(),this.generatePoints());b&&j.redraw(c)},processData:function(a){var b=this.xData,c=this.yData,\nd=b.length,e;e=0;var f,g,h=this.xAxis,i,j=this.options;i=j.cropThreshold;var k=this.getExtremesFromAll||j.getExtremesFromAll,l=this.isCartesian,j=h&&h.val2lin,m=h&&h.isLog,n,o;if(l&&!this.isDirty&&!h.isDirty&&!this.yAxis.isDirty&&!a)return!1;if(h)a=h.getExtremes(),n=a.min,o=a.max;if(l&&this.sorted&&!k&&(!i||d>i||this.forceCrop))if(b[d-1]<n||b[0]>o)b=[],c=[];else if(b[0]<n||b[d-1]>o)e=this.cropData(this.xData,this.yData,n,o),b=e.xData,c=e.yData,e=e.start,f=!0;for(i=b.length||1;--i;)d=m?j(b[i])-j(b[i-\n1]):b[i]-b[i-1],d>0&&(g===A||d<g)?g=d:d<0&&this.requireSorting&&ca(15);this.cropped=f;this.cropStart=e;this.processedXData=b;this.processedYData=c;this.closestPointRange=g},cropData:function(a,b,c,d){var e=a.length,f=0,g=e,h=p(this.cropShoulder,1),i;for(i=0;i<e;i++)if(a[i]>=c){f=t(0,i-h);break}for(c=i;c<e;c++)if(a[c]>d){g=c+h;break}return{xData:a.slice(f,g),yData:b.slice(f,g),start:f,end:g}},generatePoints:function(){var a=this.options.data,b=this.data,c,d=this.processedXData,e=this.processedYData,\nf=this.pointClass,g=d.length,h=this.cropStart||0,i,j=this.hasGroupedData,k,l=[],m;if(!b&&!j)b=[],b.length=a.length,b=this.data=b;for(m=0;m<g;m++)i=h+m,j?(l[m]=(new f).init(this,[d[m]].concat(ua(e[m]))),l[m].dataGroup=this.groupMap[m]):(b[i]?k=b[i]:a[i]!==A&&(b[i]=k=(new f).init(this,a[i],d[m])),l[m]=k),l[m].index=i;if(b&&(g!==(c=b.length)||j))for(m=0;m<c;m++)if(m===h&&!j&&(m+=g),b[m])b[m].destroyElements(),b[m].plotX=A;this.data=b;this.points=l},getExtremes:function(a){var b=this.yAxis,c=this.processedXData,\nd,e=[],f=0;d=this.xAxis.getExtremes();var g=d.min,h=d.max,i,j,k,l,a=a||this.stackedYData||this.processedYData||[];d=a.length;for(l=0;l<d;l++)if(j=c[l],k=a[l],i=k!==null&&k!==A&&(!b.isLog||k.length||k>0),j=this.getExtremesFromAll||this.options.getExtremesFromAll||this.cropped||(c[l+1]||j)>=g&&(c[l-1]||j)<=h,i&&j)if(i=k.length)for(;i--;)k[i]!==null&&(e[f++]=k[i]);else e[f++]=k;this.dataMin=Oa(e);this.dataMax=Ha(e)},translate:function(){this.processedXData||this.processData();this.generatePoints();for(var a=\nthis.options,b=a.stacking,c=this.xAxis,d=c.categories,e=this.yAxis,f=this.points,g=f.length,h=!!this.modifyValue,i=a.pointPlacement,j=i==="between"||J(i),k=a.threshold,l=a.startFromThreshold?k:0,m,n,o,q,r=Number.MAX_VALUE,a=0;a<g;a++){var G=f[a],w=G.x,v=G.y;n=G.low;var x=b&&e.stacks[(this.negStacks&&v<(l?0:k)?"-":"")+this.stackKey],u;if(e.isLog&&v!==null&&v<=0)G.y=v=null,ca(10);G.plotX=m=aa(F(t(-1E5,c.translate(w,0,0,0,1,i,this.type==="flags")),1E5));if(b&&this.visible&&!G.isNull&&x&&x[w])q=this.getStackIndicator(q,\nw,this.index),u=x[w],v=u.points[q.key],n=v[0],v=v[1],n===l&&q.key===x[w].base&&(n=p(k,e.min)),e.isLog&&n<=0&&(n=null),G.total=G.stackTotal=u.total,G.percentage=u.total&&G.y/u.total*100,G.stackY=v,u.setOffset(this.pointXOffset||0,this.barW||0);G.yBottom=s(n)?e.translate(n,0,1,0,1):null;h&&(v=this.modifyValue(v,G));G.plotY=n=typeof v==="number"&&v!==Infinity?F(t(-1E5,e.translate(v,0,1,0,1)),1E5):A;G.isInside=n!==A&&n>=0&&n<=e.len&&m>=0&&m<=c.len;G.clientX=j?aa(c.translate(w,0,0,0,1)):m;G.negative=G.y<\n(k||0);G.category=d&&d[G.x]!==A?d[G.x]:G.x;G.isNull||(o!==void 0&&(r=F(r,Q(m-o))),o=m)}this.closestPointRangePx=r},getValidPoints:function(a,b){var c=this.chart;return Ca(a||this.points||[],function(a){return b&&!c.isInsidePlot(a.plotX,a.plotY,c.inverted)?!1:!a.isNull})},setClip:function(a){var b=this.chart,c=this.options,d=b.renderer,e=b.inverted,f=this.clipBox,g=f||b.clipBox,h=this.sharedClipKey||["_sharedClip",a&&a.duration,a&&a.easing,g.height,c.xAxis,c.yAxis].join(","),i=b[h],j=b[h+"m"];if(!i){if(a)g.width=\n0,b[h+"m"]=j=d.clipRect(-99,e?-b.plotLeft:-b.plotTop,99,e?b.chartWidth:b.chartHeight);b[h]=i=d.clipRect(g);i.count={length:0}}a&&!i.count[this.index]&&(i.count[this.index]=!0,i.count.length+=1);if(c.clip!==!1)this.group.clip(a||f?i:b.clipRect),this.markerGroup.clip(j),this.sharedClipKey=h;a||(i.count[this.index]&&(delete i.count[this.index],i.count.length-=1),i.count.length===0&&h&&b[h]&&(f||(b[h]=b[h].destroy()),b[h+"m"]&&(b[h+"m"]=b[h+"m"].destroy())))},animate:function(a){var b=this.chart,c=this.options.animation,\nd;if(c&&!$(c))c=fa[this.type].animation;a?this.setClip(c):(d=this.sharedClipKey,(a=b[d])&&a.animate({width:b.plotSizeX},c),b[d+"m"]&&b[d+"m"].animate({width:b.plotSizeX+99},c),this.animate=null)},afterAnimate:function(){this.setClip();I(this,"afterAnimate")},drawPoints:function(){var a,b=this.points,c=this.chart,d,e,f,g,h,i,j,k,l=this.options.marker,m=this.pointAttr[""],n,o,q,r=this.markerGroup,s=p(l.enabled,this.xAxis.isRadial,this.closestPointRangePx>2*l.radius);if(l.enabled!==!1||this._hasPointMarkers)for(f=\nb.length;f--;)if(g=b[f],d=V(g.plotX),e=g.plotY,k=g.graphic,n=g.marker||{},o=!!g.marker,a=s&&n.enabled===A||n.enabled,q=g.isInside,a&&J(e)&&g.y!==null)if(a=g.pointAttr[g.selected?"select":""]||m,h=a.r,i=p(n.symbol,this.symbol),j=i.indexOf("url")===0,k)k[q?"show":"hide"](!0).attr(a).animate(x({x:d-h,y:e-h},k.symbolName?{width:2*h,height:2*h}:{}));else{if(q&&(h>0||j))g.graphic=c.renderer.symbol(i,d-h,e-h,2*h,2*h,o?n:l).attr(a).add(r)}else if(k)g.graphic=k.destroy()},convertAttribs:function(a,b,c,d){var e=\nthis.pointAttrToOptions,f,g,h={},a=a||{},b=b||{},c=c||{},d=d||{};for(f in e)g=e[f],h[f]=p(a[g],b[f],c[f],d[f]);return h},getAttribs:function(){var a=this,b=a.options,c=fa[a.type].marker?b.marker:b,d=c.states,e=d.hover,f,g=a.color,h=a.options.negativeColor,i={stroke:g,fill:g},j=a.points||[],k,l=[],m,n=a.pointAttrToOptions;f=a.hasPointSpecificOptions;var o=c.lineColor,z=c.fillColor;k=b.turboThreshold;var r=a.zones,t=a.zoneAxis||"y",w,v;b.marker?(e.radius=+e.radius||+c.radius+ +e.radiusPlus,e.lineWidth=\ne.lineWidth||c.lineWidth+e.lineWidthPlus):(e.color=e.color||na(e.color||g).brighten(e.brightness).get(),e.negativeColor=e.negativeColor||na(e.negativeColor||h).brighten(e.brightness).get());l[""]=a.convertAttribs(c,i);q(["hover","select"],function(b){l[b]=a.convertAttribs(d[b],l[""])});a.pointAttr=l;g=j.length;if(!k||g<k||f)for(;g--;){k=j[g];if((c=k.options&&k.options.marker||k.options)&&c.enabled===!1)c.radius=0;i=null;if(r.length){f=0;for(i=r[f];k[t]>=i.value;)i=r[++f];k.color=k.fillColor=i=p(i.color,\na.color)}f=b.colorByPoint||k.color;if(k.options)for(v in n)s(c[n[v]])&&(f=!0);if(f){c=c||{};m=[];d=c.states||{};f=d.hover=d.hover||{};if(!b.marker||k.negative&&!f.fillColor&&!e.fillColor)f[a.pointAttrToOptions.fill]=f.color||!k.options.color&&e[k.negative&&h?"negativeColor":"color"]||na(k.color).brighten(f.brightness||e.brightness).get();w={color:k.color};if(!z)w.fillColor=k.color;if(!o)w.lineColor=k.color;c.hasOwnProperty("color")&&!c.color&&delete c.color;if(i&&!e.fillColor)f.fillColor=i;m[""]=\na.convertAttribs(x(w,c),l[""]);m.hover=a.convertAttribs(d.hover,l.hover,m[""]);m.select=a.convertAttribs(d.select,l.select,m[""])}else m=l;k.pointAttr=m}},destroy:function(){var a=this,b=a.chart,c=/AppleWebKit\\/533/.test(Aa),d,e=a.data||[],f,g,h;I(a,"destroy");Y(a);q(a.axisTypes||[],function(b){if(h=a[b])ra(h.series,a),h.isDirty=h.forceRedraw=!0});a.legendItem&&a.chart.legend.destroyItem(a);for(d=e.length;d--;)(f=e[d])&&f.destroy&&f.destroy();a.points=null;clearTimeout(a.animationTimeout);for(g in a)a[g]instanceof\nO&&!a[g].survive&&(d=c&&g==="group"?"hide":"destroy",a[g][d]());if(b.hoverSeries===a)b.hoverSeries=null;ra(b.series,a);for(g in a)delete a[g]},getGraphPath:function(a,b,c){var d=this,e=d.options,f=e.step,g,h=[],i=[],j,a=a||d.points;(g=a.reversed)&&a.reverse();(f={right:1,center:2}[f]||f&&3)&&g&&(f=4-f);e.connectNulls&&!b&&!c&&(a=this.getValidPoints(a));q(a,function(g,l){var m=g.plotX,n=g.plotY,o=a[l-1];if((g.leftCliff||o&&o.rightCliff)&&!c)j=!0;g.isNull&&!s(b)&&l>0?j=!e.connectNulls:g.isNull&&!b?\nj=!0:(l===0||j?o=[X,g.plotX,g.plotY]:d.getPointSpline?o=d.getPointSpline(a,g,l):f?(o=f===1?[S,o.plotX,n]:f===2?[S,(o.plotX+m)/2,o.plotY,S,(o.plotX+m)/2,n]:[S,m,o.plotY],o.push(S,m,n)):o=[S,m,n],i.push(g.x),f&&i.push(g.x),h.push.apply(h,o),j=!1)});h.xMap=i;return d.graphPath=h},drawGraph:function(){var a=this,b=this.options,c=[["graph",b.lineColor||this.color,b.dashStyle]],d=b.lineWidth,e=b.linecap!=="square",f=(this.gappedPath||this.getGraphPath).call(this);q(this.zones,function(d,e){c.push(["zoneGraph"+\ne,d.color||a.color,d.dashStyle||b.dashStyle])});q(c,function(c,h){var i=c[0],j=a[i];if(j)j.endX=f.xMap,j.animate({d:f});else if(d&&f.length)j={stroke:c[1],"stroke-width":d,fill:"none",zIndex:1},c[2]?j.dashstyle=c[2]:e&&(j["stroke-linecap"]=j["stroke-linejoin"]="round"),j=a[i]=a.chart.renderer.path(f).attr(j).add(a.group).shadow(h<2&&b.shadow);if(j)j.startX=f.xMap,j.isArea=f.isArea})},applyZones:function(){var a=this,b=this.chart,c=b.renderer,d=this.zones,e,f,g=this.clips||[],h,i=this.graph,j=this.area,\nk=t(b.chartWidth,b.chartHeight),l=this[(this.zoneAxis||"y")+"Axis"],m,n=l.reversed,o=b.inverted,z=l.horiz,r,s,w,v=!1;if(d.length&&(i||j)&&l.min!==A)i&&i.hide(),j&&j.hide(),m=l.getExtremes(),q(d,function(d,q){e=n?z?b.plotWidth:0:z?0:l.toPixels(m.min);e=F(t(p(f,e),0),k);f=F(t(C(l.toPixels(p(d.value,m.max),!0)),0),k);v&&(e=f=l.toPixels(m.max));r=Math.abs(e-f);s=F(e,f);w=t(e,f);if(l.isXAxis){if(h={x:o?w:s,y:0,width:r,height:k},!z)h.x=b.plotHeight-h.x}else if(h={x:0,y:o?w:s,width:k,height:r},z)h.y=b.plotWidth-\nh.y;b.inverted&&c.isVML&&(h=l.isXAxis?{x:0,y:n?s:w,height:h.width,width:b.chartWidth}:{x:h.y-b.plotLeft-b.spacingBox.x,y:0,width:h.height,height:b.chartHeight});g[q]?g[q].animate(h):(g[q]=c.clipRect(h),i&&a["zoneGraph"+q].clip(g[q]),j&&a["zoneArea"+q].clip(g[q]));v=d.value>m.max}),this.clips=g},invertGroups:function(){function a(){var a={width:b.yAxis.len,height:b.xAxis.len};q(["group","markerGroup"],function(c){b[c]&&b[c].attr(a).invert()})}var b=this,c=b.chart;if(b.xAxis)N(c,"resize",a),N(b,"destroy",\nfunction(){Y(c,"resize",a)}),a(),b.invertGroups=a},plotGroup:function(a,b,c,d,e){var f=this[a],g=!f;g&&(this[a]=f=this.chart.renderer.g(b).attr({zIndex:d||0.1}).add(e),f.addClass("highcharts-series-"+this.index));f.attr({visibility:c})[g?"attr":"animate"](this.getPlotBox());return f},getPlotBox:function(){var a=this.chart,b=this.xAxis,c=this.yAxis;if(a.inverted)b=c,c=this.xAxis;return{translateX:b?b.left:a.plotLeft,translateY:c?c.top:a.plotTop,scaleX:1,scaleY:1}},render:function(){var a=this,b=a.chart,\nc,d=a.options,e=!!a.animate&&b.renderer.isSVG&&bb(d.animation).duration,f=a.visible?"inherit":"hidden",g=d.zIndex,h=a.hasRendered,i=b.seriesGroup;c=a.plotGroup("group","series",f,g,i);a.markerGroup=a.plotGroup("markerGroup","markers",f,g,i);e&&a.animate(!0);a.getAttribs();c.inverted=a.isCartesian?b.inverted:!1;a.drawGraph&&(a.drawGraph(),a.applyZones());q(a.points,function(a){a.redraw&&a.redraw()});a.drawDataLabels&&a.drawDataLabels();a.visible&&a.drawPoints();a.drawTracker&&a.options.enableMouseTracking!==\n!1&&a.drawTracker();b.inverted&&a.invertGroups();d.clip!==!1&&!a.sharedClipKey&&!h&&c.clip(b.clipRect);e&&a.animate();if(!h)a.animationTimeout=Ra(function(){a.afterAnimate()},e);a.isDirty=a.isDirtyData=!1;a.hasRendered=!0},redraw:function(){var a=this.chart,b=this.isDirty||this.isDirtyData,c=this.group,d=this.xAxis,e=this.yAxis;c&&(a.inverted&&c.attr({width:a.plotWidth,height:a.plotHeight}),c.animate({translateX:p(d&&d.left,a.plotLeft),translateY:p(e&&e.top,a.plotTop)}));this.translate();this.render();\nb&&delete this.kdTree},kdDimensions:1,kdAxisArray:["clientX","plotY"],searchPoint:function(a,b){var c=this.xAxis,d=this.yAxis,e=this.chart.inverted;return this.searchKDTree({clientX:e?c.len-a.chartY+c.pos:a.chartX-c.pos,plotY:e?d.len-a.chartX+d.pos:a.chartY-d.pos},b)},buildKDTree:function(){function a(c,e,f){var g,h;if(h=c&&c.length)return g=b.kdAxisArray[e%f],c.sort(function(a,b){return a[g]-b[g]}),h=Math.floor(h/2),{point:c[h],left:a(c.slice(0,h),e+1,f),right:a(c.slice(h+1),e+1,f)}}var b=this,c=\nb.kdDimensions;delete b.kdTree;Ra(function(){b.kdTree=a(b.getValidPoints(null,!b.directTouch),c,c)},b.options.kdNow?0:1)},searchKDTree:function(a,b){function c(a,b,j,k){var l=b.point,m=d.kdAxisArray[j%k],n,o,p=l;o=s(a[e])&&s(l[e])?Math.pow(a[e]-l[e],2):null;n=s(a[f])&&s(l[f])?Math.pow(a[f]-l[f],2):null;n=(o||0)+(n||0);l.dist=s(n)?Math.sqrt(n):Number.MAX_VALUE;l.distX=s(o)?Math.sqrt(o):Number.MAX_VALUE;m=a[m]-l[m];n=m<0?"left":"right";o=m<0?"right":"left";b[n]&&(n=c(a,b[n],j+1,k),p=n[g]<p[g]?n:l);\nb[o]&&Math.sqrt(m*m)<p[g]&&(a=c(a,b[o],j+1,k),p=a[g]<p[g]?a:p);return p}var d=this,e=this.kdAxisArray[0],f=this.kdAxisArray[1],g=b?"distX":"dist";this.kdTree||this.buildKDTree();if(this.kdTree)return c(a,this.kdTree,this.kdDimensions,this.kdDimensions)}};Lb.prototype={destroy:function(){Ta(this,this.axis)},render:function(a){var b=this.options,c=b.format,c=c?Na(c,this):b.formatter.call(this);this.label?this.label.attr({text:c,visibility:"hidden"}):this.label=this.axis.chart.renderer.text(c,null,null,\nb.useHTML).css(b.style).attr({align:this.textAlign,rotation:b.rotation,visibility:"hidden"}).add(a)},setOffset:function(a,b){var c=this.axis,d=c.chart,e=d.inverted,f=c.reversed,f=this.isNegative&&!f||!this.isNegative&&f,g=c.translate(c.usePercentage?100:this.total,0,0,0,1),c=c.translate(0),c=Q(g-c),h=d.xAxis[0].translate(this.x)+a,i=d.plotHeight,f={x:e?f?g:g-c:h,y:e?i-h-b:f?i-g-c:i-g,width:e?c:b,height:e?b:c};if(e=this.label)e.align(this.alignOptions,null,f),f=e.alignAttr,e[this.options.crop===!1||\nd.isInsidePlot(f.x,f.y)?"show":"hide"](!0)}};ib.prototype.getStacks=function(){var a=this;q(a.yAxis,function(a){if(a.stacks&&a.hasVisibleSeries)a.oldStacks=a.stacks});q(a.series,function(b){if(b.options.stacking&&(b.visible===!0||a.options.chart.ignoreHiddenSeries===!1))b.stackKey=b.type+p(b.options.stack,"")})};ia.prototype.buildStacks=function(){var a=this.series,b,c=p(this.options.reversedStacks,!0),d=a.length,e;if(!this.isXAxis){this.usePercentage=!1;for(e=d;e--;)a[c?e:d-e-1].setStackedPoints();\nfor(e=d;e--;)b=a[c?e:d-e-1],b.setStackCliffs&&b.setStackCliffs();if(this.usePercentage)for(e=0;e<d;e++)a[e].setPercentStacks()}};ia.prototype.renderStackTotals=function(){var a=this.chart,b=a.renderer,c=this.stacks,d,e,f=this.stackTotalGroup;if(!f)this.stackTotalGroup=f=b.g("stack-labels").attr({visibility:"visible",zIndex:6}).add();f.translate(a.plotLeft,a.plotTop);for(d in c)for(e in a=c[d],a)a[e].render(f)};ia.prototype.resetStacks=function(){var a=this.stacks,b,c;if(!this.isXAxis)for(b in a)for(c in a[b])a[b][c].touched<\nthis.stacksTouched?(a[b][c].destroy(),delete a[b][c]):(a[b][c].total=null,a[b][c].cum=0)};ia.prototype.cleanStacks=function(){var a,b,c;if(!this.isXAxis){if(this.oldStacks)a=this.stacks=this.oldStacks;for(b in a)for(c in a[b])a[b][c].cum=a[b][c].total}};R.prototype.setStackedPoints=function(){if(this.options.stacking&&!(this.visible!==!0&&this.chart.options.chart.ignoreHiddenSeries!==!1)){var a=this.processedXData,b=this.processedYData,c=[],d=b.length,e=this.options,f=e.threshold,g=e.startFromThreshold?\nf:0,h=e.stack,e=e.stacking,i=this.stackKey,j="-"+i,k=this.negStacks,l=this.yAxis,m=l.stacks,n=l.oldStacks,o,q,r,x,w,v,u;l.stacksTouched+=1;for(w=0;w<d;w++){v=a[w];u=b[w];o=this.getStackIndicator(o,v,this.index);x=o.key;r=(q=k&&u<(g?0:f))?j:i;m[r]||(m[r]={});if(!m[r][v])n[r]&&n[r][v]?(m[r][v]=n[r][v],m[r][v].total=null):m[r][v]=new Lb(l,l.options.stackLabels,q,v,h);r=m[r][v];if(u!==null){r.points[x]=r.points[this.index]=[p(r.cum,g)];if(!s(r.cum))r.base=x;r.touched=l.stacksTouched;o.index>0&&this.singleStacks===\n!1&&(r.points[x][0]=r.points[this.index+","+v+",0"][0])}e==="percent"?(q=q?i:j,k&&m[q]&&m[q][v]?(q=m[q][v],r.total=q.total=t(q.total,r.total)+Q(u)||0):r.total=aa(r.total+(Q(u)||0))):r.total=aa(r.total+(u||0));r.cum=p(r.cum,g)+(u||0);if(u!==null)r.points[x].push(r.cum),c[w]=r.cum}if(e==="percent")l.usePercentage=!0;this.stackedYData=c;l.oldStacks={}}};R.prototype.setPercentStacks=function(){var a=this,b=a.stackKey,c=a.yAxis.stacks,d=a.processedXData,e;q([b,"-"+b],function(b){var f;for(var g=d.length,\nh,i;g--;)if(h=d[g],e=a.getStackIndicator(e,h,a.index),f=(i=c[b]&&c[b][h])&&i.points[e.key],h=f)i=i.total?100/i.total:0,h[0]=aa(h[0]*i),h[1]=aa(h[1]*i),a.stackedYData[g]=h[1]})};R.prototype.getStackIndicator=function(a,b,c){!s(a)||a.x!==b?a={x:b,index:0}:a.index++;a.key=[c,b,a.index].join(",");return a};x(ib.prototype,{addSeries:function(a,b,c){var d,e=this;a&&(b=p(b,!0),I(e,"addSeries",{options:a},function(){d=e.initSeries(a);e.isDirtyLegend=!0;e.linkSeries();b&&e.redraw(c)}));return d},addAxis:function(a,\nb,c,d){var e=b?"xAxis":"yAxis",f=this.options,a=E(a,{index:this[e].length,isX:b});new ia(this,a);f[e]=ua(f[e]||{});f[e].push(a);p(c,!0)&&this.redraw(d)},showLoading:function(a){var b=this,c=b.options,d=b.loadingDiv,e=c.loading,f=function(){d&&M(d,{left:b.plotLeft+"px",top:b.plotTop+"px",width:b.plotWidth+"px",height:b.plotHeight+"px"})};if(!d)b.loadingDiv=d=da(Pa,{className:"highcharts-loading"},x(e.style,{zIndex:10,display:"none"}),b.container),b.loadingSpan=da("span",null,e.labelStyle,d),N(b,"redraw",\nf);b.loadingSpan.innerHTML=a||c.lang.loading;if(!b.loadingShown)M(d,{opacity:0,display:""}),Ya(d,{opacity:e.style.opacity},{duration:e.showDuration||0}),b.loadingShown=!0;f()},hideLoading:function(){var a=this.options,b=this.loadingDiv;b&&Ya(b,{opacity:0},{duration:a.loading.hideDuration||100,complete:function(){M(b,{display:"none"})}});this.loadingShown=!1}});x(Ma.prototype,{update:function(a,b,c,d){function e(){f.applyOptions(a);if(f.y===null&&h)f.graphic=h.destroy();if($(a,!0))f.redraw=function(){if(h&&\nh.element&&a&&a.marker&&a.marker.symbol)f.graphic=h.destroy();if(a&&a.dataLabels&&f.dataLabel)f.dataLabel=f.dataLabel.destroy();f.redraw=null};i=f.index;g.updateParallelArrays(f,i);if(l&&f.name)l[f.x]=f.name;k.data[i]=$(k.data[i],!0)?f.options:a;g.isDirty=g.isDirtyData=!0;if(!g.fixedBox&&g.hasCartesianSeries)j.isDirtyBox=!0;if(k.legendType==="point")j.isDirtyLegend=!0;b&&j.redraw(c)}var f=this,g=f.series,h=f.graphic,i,j=g.chart,k=g.options,l=g.xAxis&&g.xAxis.names,b=p(b,!0);d===!1?e():f.firePointEvent("update",\n{options:a},e)},remove:function(a,b){this.series.removePoint(pa(this,this.series.data),a,b)}});x(R.prototype,{addPoint:function(a,b,c,d){var e=this.options,f=this.data,g=this.chart,h=this.xAxis&&this.xAxis.names,i=e.data,j,k=this.xData,l,m;Va(d,g);b=p(b,!0);d={series:this};this.pointClass.prototype.applyOptions.apply(d,[a]);m=d.x;l=k.length;if(this.requireSorting&&m<k[l-1])for(j=!0;l&&k[l-1]>m;)l--;this.updateParallelArrays(d,"splice",l,0,0);this.updateParallelArrays(d,l);if(h&&d.name)h[m]=d.name;\ni.splice(l,0,a);j&&(this.data.splice(l,0,null),this.processData());e.legendType==="point"&&this.generatePoints();c&&(f[0]&&f[0].remove?f[0].remove(!1):(f.shift(),this.updateParallelArrays(d,"shift"),i.shift()));this.isDirtyData=this.isDirty=!0;b&&(this.getAttribs(),g.redraw())},removePoint:function(a,b,c){var d=this,e=d.data,f=e[a],g=d.points,h=d.chart,i=function(){g&&g.length===e.length&&g.splice(a,1);e.splice(a,1);d.options.data.splice(a,1);d.updateParallelArrays(f||{series:d},"splice",a,1);f&&\nf.destroy();d.isDirty=!0;d.isDirtyData=!0;b&&h.redraw()};Va(c,h);b=p(b,!0);f?f.firePointEvent("remove",null,i):i()},remove:function(a,b){var c=this,d=c.chart;I(c,"remove",null,function(){c.destroy();d.isDirtyLegend=d.isDirtyBox=!0;d.linkSeries();p(a,!0)&&d.redraw(b)})},update:function(a,b){var c=this,d=this.chart,e=this.userOptions,f=this.type,g=L[f].prototype,h=["group","markerGroup","dataLabelsGroup"],i;if(a.type&&a.type!==f||a.zIndex!==void 0)h.length=0;q(h,function(a){h[a]=c[a];delete c[a]});\na=E(e,{animation:!1,index:this.index,pointStart:this.xData[0]},{data:this.options.data},a);this.remove(!1);for(i in g)this[i]=A;x(this,L[a.type||f].prototype);q(h,function(a){c[a]=h[a]});this.init(d,a);d.linkSeries();p(b,!0)&&d.redraw(!1)}});x(ia.prototype,{update:function(a,b){var c=this.chart,a=c.options[this.coll][this.options.index]=E(this.userOptions,a);this.destroy(!0);this.init(c,x(a,{events:A}));c.isDirtyBox=!0;p(b,!0)&&c.redraw()},remove:function(a){for(var b=this.chart,c=this.coll,d=this.series,\ne=d.length;e--;)d[e]&&d[e].remove(!1);ra(b.axes,this);ra(b[c],this);b.options[c].splice(this.options.index,1);q(b[c],function(a,b){a.options.index=b});this.destroy();b.isDirtyBox=!0;p(a,!0)&&b.redraw()},setTitle:function(a,b){this.update({title:a},b)},setCategories:function(a,b){this.update({categories:a},b)}});var xa=sa(R);L.line=xa;fa.area=E(ha,{softThreshold:!1,threshold:0});var qa=sa(R,{type:"area",singleStacks:!1,getStackPoints:function(){var a=[],b=[],c=this.xAxis,d=this.yAxis,e=d.stacks[this.stackKey],\nf={},g=this.points,h=this.index,i=d.series,j=i.length,k,l=p(d.options.reversedStacks,!0)?1:-1,m,n;if(this.options.stacking){for(m=0;m<g.length;m++)f[g[m].x]=g[m];for(n in e)e[n].total!==null&&b.push(n);b.sort(function(a,b){return a-b});k=Da(i,function(){return this.visible});q(b,function(g,i){var n=0,p,s;if(f[g]&&!f[g].isNull)a.push(f[g]),q([-1,1],function(a){var c=a===1?"rightNull":"leftNull",d=0,n=e[b[i+a]];if(n)for(m=h;m>=0&&m<j;)p=n.points[m],p||(m===h?f[g][c]=!0:k[m]&&(s=e[g].points[m])&&(d-=\ns[1]-s[0])),m+=l;f[g][a===1?"rightCliff":"leftCliff"]=d});else{for(m=h;m>=0&&m<j;){if(p=e[g].points[m]){n=p[1];break}m+=l}n=d.toPixels(n,!0);a.push({isNull:!0,plotX:c.toPixels(g,!0),plotY:n,yBottom:n})}})}return a},getGraphPath:function(a){var b=R.prototype.getGraphPath,c=this.options,d=c.stacking,e=this.yAxis,f,g,h=[],i=[],j=this.index,k,l=e.stacks[this.stackKey],m=c.threshold,n=e.getThreshold(c.threshold),o,c=c.connectNulls||d==="percent",q=function(b,c,f){var g=a[b],b=d&&l[g.x].points[j],o=g[f+\n"Null"]||0,f=g[f+"Cliff"]||0,p,q,g=!0;f||o?(p=(o?b[0]:b[1])+f,q=b[0]+f,g=!!o):!d&&a[c]&&a[c].isNull&&(p=q=m);p!==void 0&&(i.push({plotX:k,plotY:p===null?n:e.getThreshold(p),isNull:g}),h.push({plotX:k,plotY:q===null?n:e.getThreshold(q)}))},a=a||this.points;d&&(a=this.getStackPoints());for(f=0;f<a.length;f++)if(g=a[f].isNull,k=p(a[f].rectPlotX,a[f].plotX),o=p(a[f].yBottom,n),!g||c){c||q(f,f-1,"left");if(!g||d||!c)i.push(a[f]),h.push({x:f,plotX:k,plotY:o});c||q(f,f+1,"right")}f=b.call(this,i,!0,!0);\nh.reversed=!0;g=b.call(this,h,!0,!0);g.length&&(g[0]=S);g=f.concat(g);b=b.call(this,i,!1,c);g.xMap=f.xMap;this.areaPath=g;return b},drawGraph:function(){this.areaPath=[];R.prototype.drawGraph.apply(this);var a=this,b=this.areaPath,c=this.options,d=[["area",this.color,c.fillColor]];q(this.zones,function(b,f){d.push(["zoneArea"+f,b.color||a.color,b.fillColor||c.fillColor])});q(d,function(d){var f=d[0],g=a[f];g?(g.endX=b.xMap,g.animate({d:b})):(g={fill:d[2]||d[1],zIndex:0},d[2]||(g["fill-opacity"]=p(c.fillOpacity,\n0.75)),g=a[f]=a.chart.renderer.path(b).attr(g).add(a.group),g.isArea=!0);g.startX=b.xMap;g.shiftUnit=c.step?2:1})},drawLegendSymbol:K.drawRectangle});L.area=qa;fa.spline=E(ha);xa=sa(R,{type:"spline",getPointSpline:function(a,b,c){var d=b.plotX,e=b.plotY,f=a[c-1],c=a[c+1],g,h,i,j;if(f&&!f.isNull&&c&&!c.isNull){a=f.plotY;i=c.plotX;var c=c.plotY,k=0;g=(1.5*d+f.plotX)/2.5;h=(1.5*e+a)/2.5;i=(1.5*d+i)/2.5;j=(1.5*e+c)/2.5;i!==g&&(k=(j-h)*(i-d)/(i-g)+e-j);h+=k;j+=k;h>a&&h>e?(h=t(a,e),j=2*e-h):h<a&&h<e&&(h=\nF(a,e),j=2*e-h);j>c&&j>e?(j=t(c,e),h=2*e-j):j<c&&j<e&&(j=F(c,e),h=2*e-j);b.rightContX=i;b.rightContY=j}b=["C",p(f.rightContX,f.plotX),p(f.rightContY,f.plotY),p(g,d),p(h,e),d,e];f.rightContX=f.rightContY=null;return b}});L.spline=xa;fa.areaspline=E(fa.area);qa=qa.prototype;xa=sa(xa,{type:"areaspline",getStackPoints:qa.getStackPoints,getGraphPath:qa.getGraphPath,setStackCliffs:qa.setStackCliffs,drawGraph:qa.drawGraph,drawLegendSymbol:K.drawRectangle});L.areaspline=xa;fa.column=E(ha,{borderColor:"#FFFFFF",\nborderRadius:0,groupPadding:0.2,marker:null,pointPadding:0.1,minPointLength:0,cropThreshold:50,pointRange:null,states:{hover:{brightness:0.1,shadow:!1,halo:!1},select:{color:"#C0C0C0",borderColor:"#000000",shadow:!1}},dataLabels:{align:null,verticalAlign:null,y:null},softThreshold:!1,startFromThreshold:!0,stickyTracking:!1,tooltip:{distance:6},threshold:0});xa=sa(R,{type:"column",pointAttrToOptions:{stroke:"borderColor",fill:"color",r:"borderRadius"},cropShoulder:0,directTouch:!0,trackerGroups:["group",\n"dataLabelsGroup"],negStacks:!0,init:function(){R.prototype.init.apply(this,arguments);var a=this,b=a.chart;b.hasRendered&&q(b.series,function(b){if(b.type===a.type)b.isDirty=!0})},getColumnMetrics:function(){var a=this,b=a.options,c=a.xAxis,d=a.yAxis,e=c.reversed,f,g={},h=0;b.grouping===!1?h=1:q(a.chart.series,function(b){var c=b.options,e=b.yAxis,i;if(b.type===a.type&&b.visible&&d.len===e.len&&d.pos===e.pos)c.stacking?(f=b.stackKey,g[f]===A&&(g[f]=h++),i=g[f]):c.grouping!==!1&&(i=h++),b.columnIndex=\ni});var i=F(Q(c.transA)*(c.ordinalSlope||b.pointRange||c.closestPointRange||c.tickInterval||1),c.len),j=i*b.groupPadding,k=(i-2*j)/h,b=F(b.maxPointWidth||c.len,p(b.pointWidth,k*(1-2*b.pointPadding)));a.columnMetrics={width:b,offset:(k-b)/2+(j+((a.columnIndex||0)+(e?1:0))*k-i/2)*(e?-1:1)};return a.columnMetrics},crispCol:function(a,b,c,d){var e=this.chart,f=this.borderWidth,g=-(f%2?0.5:0),f=f%2?0.5:1;e.inverted&&e.renderer.isVML&&(f+=1);c=Math.round(a+c)+g;a=Math.round(a)+g;c-=a;d=Math.round(b+d)+\nf;g=Q(b)<=0.5&&d>0.5;b=Math.round(b)+f;d-=b;g&&d&&(b-=1,d+=1);return{x:a,y:b,width:c,height:d}},translate:function(){var a=this,b=a.chart,c=a.options,d=a.borderWidth=p(c.borderWidth,a.closestPointRange*a.xAxis.transA<2?0:1),e=a.yAxis,f=a.translatedThreshold=e.getThreshold(c.threshold),g=p(c.minPointLength,5),h=a.getColumnMetrics(),i=h.width,j=a.barW=t(i,1+2*d),k=a.pointXOffset=h.offset;b.inverted&&(f-=0.5);c.pointPadding&&(j=va(j));R.prototype.translate.apply(a);q(a.points,function(c){var d=F(p(c.yBottom,\nf),9E4),h=999+Q(d),h=F(t(-h,c.plotY),e.len+h),o=c.plotX+k,q=j,r=F(h,d),s,w=t(h,d)-r;Q(w)<g&&g&&(w=g,s=!e.reversed&&!c.negative||e.reversed&&c.negative,r=Q(r-f)>g?d-g:f-(s?g:0));c.barX=o;c.pointWidth=i;c.tooltipPos=b.inverted?[e.len+e.pos-b.plotLeft-h,a.xAxis.len-o-q/2,w]:[o+q/2,h+e.pos-b.plotTop,w];c.shapeType="rect";c.shapeArgs=a.crispCol(o,r,q,w)})},getSymbol:Ba,drawLegendSymbol:K.drawRectangle,drawGraph:Ba,drawPoints:function(){var a=this,b=this.chart,c=a.options,d=b.renderer,e=c.animationLimit||\n250,f,g;q(a.points,function(h){var i=h.graphic,j;if(J(h.plotY)&&h.y!==null)f=h.shapeArgs,j=s(a.borderWidth)?{"stroke-width":a.borderWidth}:{},g=h.pointAttr[h.selected?"select":""]||a.pointAttr[""],i?(Ka(i),i.attr(j).attr(g)[b.pointCount<e?"animate":"attr"](E(f))):h.graphic=d[h.shapeType](f).attr(j).attr(g).add(h.group||a.group).shadow(c.shadow,null,c.stacking&&!c.borderRadius);else if(i)h.graphic=i.destroy()})},animate:function(a){var b=this,c=this.yAxis,d=b.options,e=this.chart.inverted,f={};if(ga)a?\n(f.scaleY=0.001,a=F(c.pos+c.len,t(c.pos,c.toPixels(d.threshold))),e?f.translateX=a-c.len:f.translateY=a,b.group.attr(f)):(f[e?"translateX":"translateY"]=c.pos,b.group.animate(f,x(bb(b.options.animation),{step:function(a,c){b.group.attr({scaleY:t(0.001,c.pos)})}})),b.animate=null)},remove:function(){var a=this,b=a.chart;b.hasRendered&&q(b.series,function(b){if(b.type===a.type)b.isDirty=!0});R.prototype.remove.apply(a,arguments)}});L.column=xa;fa.bar=E(fa.column);qa=sa(xa,{type:"bar",inverted:!0});\nL.bar=qa;fa.scatter=E(ha,{lineWidth:0,marker:{enabled:!0},tooltip:{headerFormat:\'<span style="color:{point.color}">\\u25cf</span> <span style="font-size: 10px;"> {series.name}</span><br/>\',pointFormat:"x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>"}});qa=sa(R,{type:"scatter",sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","markerGroup","dataLabelsGroup"],takeOrdinalPosition:!1,kdDimensions:2,drawGraph:function(){this.options.lineWidth&&R.prototype.drawGraph.call(this)}});L.scatter=\nqa;fa.pie=E(ha,{borderColor:"#FFFFFF",borderWidth:1,center:[null,null],clip:!1,colorByPoint:!0,dataLabels:{distance:30,enabled:!0,formatter:function(){return this.y===null?void 0:this.point.name},x:0},ignoreHiddenPoint:!0,legendType:"point",marker:null,size:null,showInLegend:!1,slicedOffset:10,states:{hover:{brightness:0.1,shadow:!1}},stickyTracking:!1,tooltip:{followPointer:!0}});ha={type:"pie",isCartesian:!1,pointClass:sa(Ma,{init:function(){Ma.prototype.init.apply(this,arguments);var a=this,b;\na.name=p(a.name,"Slice");b=function(b){a.slice(b.type==="select")};N(a,"select",b);N(a,"unselect",b);return a},setVisible:function(a,b){var c=this,d=c.series,e=d.chart,f=d.options.ignoreHiddenPoint,b=p(b,f);if(a!==c.visible){c.visible=c.options.visible=a=a===A?!c.visible:a;d.options.data[pa(c,d.data)]=c.options;q(["graphic","dataLabel","connector","shadowGroup"],function(b){if(c[b])c[b][a?"show":"hide"](!0)});c.legendItem&&e.legend.colorizeItem(c,a);!a&&c.state==="hover"&&c.setState("");if(f)d.isDirty=\n!0;b&&e.redraw()}},slice:function(a,b,c){var d=this.series;Va(c,d.chart);p(b,!0);this.sliced=this.options.sliced=a=s(a)?a:!this.sliced;d.options.data[pa(this,d.data)]=this.options;a=a?this.slicedTranslation:{translateX:0,translateY:0};this.graphic.animate(a);this.shadowGroup&&this.shadowGroup.animate(a)},haloPath:function(a){var b=this.shapeArgs,c=this.series.chart;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(c.plotLeft+b.x,c.plotTop+b.y,b.r+a,b.r+a,{innerR:this.shapeArgs.r,\nstart:b.start,end:b.end})}}),requireSorting:!1,directTouch:!0,noSharedTooltip:!0,trackerGroups:["group","dataLabelsGroup"],axisTypes:[],pointAttrToOptions:{stroke:"borderColor","stroke-width":"borderWidth",fill:"color"},animate:function(a){var b=this,c=b.points,d=b.startAngleRad;if(!a)q(c,function(a){var c=a.graphic,g=a.shapeArgs;c&&(c.attr({r:a.startR||b.center[3]/2,start:d,end:d}),c.animate({r:g.r,start:g.start,end:g.end},b.options.animation))}),b.animate=null},updateTotals:function(){var a,b=0,\nc=this.points,d=c.length,e,f=this.options.ignoreHiddenPoint;for(a=0;a<d;a++){e=c[a];if(e.y<0)e.y=null;b+=f&&!e.visible?0:e.y}this.total=b;for(a=0;a<d;a++)e=c[a],e.percentage=b>0&&(e.visible||!f)?e.y/b*100:0,e.total=b},generatePoints:function(){R.prototype.generatePoints.call(this);this.updateTotals()},translate:function(a){this.generatePoints();var b=0,c=this.options,d=c.slicedOffset,e=d+c.borderWidth,f,g,h,i=c.startAngle||0,j=this.startAngleRad=ta/180*(i-90),i=(this.endAngleRad=ta/180*(p(c.endAngle,\ni+360)-90))-j,k=this.points,l=c.dataLabels.distance,c=c.ignoreHiddenPoint,m,n=k.length,o;if(!a)this.center=a=this.getCenter();this.getX=function(b,c){h=Z.asin(F((b-a[1])/(a[2]/2+l),1));return a[0]+(c?-1:1)*W(h)*(a[2]/2+l)};for(m=0;m<n;m++){o=k[m];f=j+b*i;if(!c||o.visible)b+=o.percentage/100;g=j+b*i;o.shapeType="arc";o.shapeArgs={x:a[0],y:a[1],r:a[2]/2,innerR:a[3]/2,start:C(f*1E3)/1E3,end:C(g*1E3)/1E3};h=(g+f)/2;h>1.5*ta?h-=2*ta:h<-ta/2&&(h+=2*ta);o.slicedTranslation={translateX:C(W(h)*d),translateY:C(ea(h)*\nd)};f=W(h)*a[2]/2;g=ea(h)*a[2]/2;o.tooltipPos=[a[0]+f*0.7,a[1]+g*0.7];o.half=h<-ta/2||h>ta/2?1:0;o.angle=h;e=F(e,l/2);o.labelPos=[a[0]+f+W(h)*l,a[1]+g+ea(h)*l,a[0]+f+W(h)*e,a[1]+g+ea(h)*e,a[0]+f,a[1]+g,l<0?"center":o.half?"right":"left",h]}},drawGraph:null,drawPoints:function(){var a=this,b=a.chart.renderer,c,d,e=a.options.shadow,f,g,h,i;if(e&&!a.shadowGroup)a.shadowGroup=b.g("shadow").add(a.group);q(a.points,function(j){if(j.y!==null){d=j.graphic;h=j.shapeArgs;f=j.shadowGroup;g=j.pointAttr[j.selected?\n"select":""];if(!g.stroke)g.stroke=g.fill;if(e&&!f)f=j.shadowGroup=b.g("shadow").add(a.shadowGroup);c=j.sliced?j.slicedTranslation:{translateX:0,translateY:0};f&&f.attr(c);if(d)d.setRadialReference(a.center).attr(g).animate(x(h,c));else{i={"stroke-linejoin":"round"};if(!j.visible)i.visibility="hidden";j.graphic=d=b[j.shapeType](h).setRadialReference(a.center).attr(g).attr(i).attr(c).add(a.group).shadow(e,f)}}})},searchPoint:Ba,sortByAngle:function(a,b){a.sort(function(a,d){return a.angle!==void 0&&\n(d.angle-a.angle)*b})},drawLegendSymbol:K.drawRectangle,getCenter:Db.getCenter,getSymbol:Ba};ha=sa(R,ha);L.pie=ha;R.prototype.drawDataLabels=function(){var a=this,b=a.options,c=b.cursor,d=b.dataLabels,e=a.points,f,g,h=a.hasRendered||0,i,j,k=p(d.defer,!0),l=a.chart.renderer;if(d.enabled||a._hasPointLabels)a.dlProcessOptions&&a.dlProcessOptions(d),j=a.plotGroup("dataLabelsGroup","data-labels",k&&!h?"hidden":"visible",d.zIndex||6),k&&(j.attr({opacity:+h}),h||N(a,"afterAnimate",function(){a.visible&&\nj.show(!0);j[b.animation?"animate":"attr"]({opacity:1},{duration:200})})),g=d,q(e,function(e){var h,k=e.dataLabel,q,r,t=e.connector,w=!0,v,u={};f=e.dlOptions||e.options&&e.options.dataLabels;h=p(f&&f.enabled,g.enabled)&&e.y!==null;if(k&&!h)e.dataLabel=k.destroy();else if(h){d=E(g,f);v=d.style;h=d.rotation;q=e.getLabelConfig();i=d.format?Na(d.format,q):d.formatter.call(q,d);v.color=p(d.color,v.color,a.color,"black");if(k)if(s(i))k.attr({text:i}),w=!1;else{if(e.dataLabel=k=k.destroy(),t)e.connector=\nt.destroy()}else if(s(i)){k={fill:d.backgroundColor,stroke:d.borderColor,"stroke-width":d.borderWidth,r:d.borderRadius||0,rotation:h,padding:d.padding,zIndex:1};if(v.color==="contrast")u.color=d.inside||d.distance<0||b.stacking?l.getContrast(e.color||a.color):"#000000";if(c)u.cursor=c;for(r in k)k[r]===A&&delete k[r];k=e.dataLabel=l[h?"text":"label"](i,0,-9999,d.shape,null,null,d.useHTML).attr(k).css(x(v,u)).add(j).shadow(d.shadow)}k&&a.alignDataLabel(e,k,d,null,w)}})};R.prototype.alignDataLabel=\nfunction(a,b,c,d,e){var f=this.chart,g=f.inverted,h=p(a.plotX,-9999),i=p(a.plotY,-9999),j=b.getBBox(),k=f.renderer.fontMetrics(c.style.fontSize).b,l=c.rotation,m=c.align,n=this.visible&&(a.series.forceDL||f.isInsidePlot(h,C(i),g)||d&&f.isInsidePlot(h,g?d.x+1:d.y+d.height-1,g)),o=p(c.overflow,"justify")==="justify";if(n)d=x({x:g?f.plotWidth-i:h,y:C(g?f.plotHeight-h:i),width:0,height:0},d),x(c,{width:j.width,height:j.height}),l?(o=!1,g=f.renderer.rotCorr(k,l),g={x:d.x+c.x+d.width/2+g.x,y:d.y+c.y+{top:0,\nmiddle:0.5,bottom:1}[c.verticalAlign]*d.height},b[e?"attr":"animate"](g).attr({align:m}),h=(l+720)%360,h=h>180&&h<360,m==="left"?g.y-=h?j.height:0:m==="center"?(g.x-=j.width/2,g.y-=j.height/2):m==="right"&&(g.x-=j.width,g.y-=h?0:j.height)):(b.align(c,null,d),g=b.alignAttr),o?this.justifyDataLabel(b,c,g,j,d,e):p(c.crop,!0)&&(n=f.isInsidePlot(g.x,g.y)&&f.isInsidePlot(g.x+j.width,g.y+j.height)),c.shape&&!l&&b.attr({anchorX:a.plotX,anchorY:a.plotY});if(!n)Ka(b),b.attr({y:-9999}),b.placed=!1};R.prototype.justifyDataLabel=\nfunction(a,b,c,d,e,f){var g=this.chart,h=b.align,i=b.verticalAlign,j,k,l=a.box?0:a.padding||0;j=c.x+l;if(j<0)h==="right"?b.align="left":b.x=-j,k=!0;j=c.x+d.width-l;if(j>g.plotWidth)h==="left"?b.align="right":b.x=g.plotWidth-j,k=!0;j=c.y+l;if(j<0)i==="bottom"?b.verticalAlign="top":b.y=-j,k=!0;j=c.y+d.height-l;if(j>g.plotHeight)i==="top"?b.verticalAlign="bottom":b.y=g.plotHeight-j,k=!0;if(k)a.placed=!f,a.align(b,null,e)};if(L.pie)L.pie.prototype.drawDataLabels=function(){var a=this,b=a.data,c,d=a.chart,\ne=a.options.dataLabels,f=p(e.connectorPadding,10),g=p(e.connectorWidth,1),h=d.plotWidth,i=d.plotHeight,j,k,l=p(e.softConnector,!0),m=e.distance,n=a.center,o=n[2]/2,s=n[1],r=m>0,u,w,v,x=[[],[]],A,y,D,E,B,H=[0,0,0,0],M=function(a,b){return b.y-a.y};if(a.visible&&(e.enabled||a._hasPointLabels)){R.prototype.drawDataLabels.apply(a);q(b,function(a){if(a.dataLabel&&a.visible)x[a.half].push(a),a.dataLabel._pos=null});for(E=2;E--;){var I=[],N=[],J=x[E],L=J.length,K;if(L){a.sortByAngle(J,E-0.5);for(B=b=0;!b&&\nJ[B];)b=J[B]&&J[B].dataLabel&&(J[B].dataLabel.getBBox().height||21),B++;if(m>0){w=F(s+o+m,d.plotHeight);for(B=t(0,s-o-m);B<=w;B+=b)I.push(B);w=I.length;if(L>w){c=[].concat(J);c.sort(M);for(B=L;B--;)c[B].rank=B;for(B=L;B--;)J[B].rank>=w&&J.splice(B,1);L=J.length}for(B=0;B<L;B++){c=J[B];v=c.labelPos;c=9999;var P,O;for(O=0;O<w;O++)P=Q(I[O]-v[1]),P<c&&(c=P,K=O);if(K<B&&I[B]!==null)K=B;else for(w<L-B+K&&I[B]!==null&&(K=w-L+B);I[K]===null;)K++;N.push({i:K,y:I[K]});I[K]=null}N.sort(M)}for(B=0;B<L;B++){c=\nJ[B];v=c.labelPos;u=c.dataLabel;D=c.visible===!1?"hidden":"inherit";c=v[1];if(m>0){if(w=N.pop(),K=w.i,y=w.y,c>y&&I[K+1]!==null||c<y&&I[K-1]!==null)y=F(t(0,c),d.plotHeight)}else y=c;A=e.justify?n[0]+(E?-1:1)*(o+m):a.getX(y===s-o-m||y===s+o+m?c:y,E);u._attr={visibility:D,align:v[6]};u._pos={x:A+e.x+({left:f,right:-f}[v[6]]||0),y:y+e.y-10};u.connX=A;u.connY=y;if(this.options.size===null)w=u.width,A-w<f?H[3]=t(C(w-A+f),H[3]):A+w>h-f&&(H[1]=t(C(A+w-h+f),H[1])),y-b/2<0?H[0]=t(C(-y+b/2),H[0]):y+b/2>i&&(H[2]=\nt(C(y+b/2-i),H[2]))}}}if(Ha(H)===0||this.verifyDataLabelOverflow(H))this.placeDataLabels(),r&&g&&q(this.points,function(b){j=b.connector;v=b.labelPos;if((u=b.dataLabel)&&u._pos&&b.visible)D=u._attr.visibility,A=u.connX,y=u.connY,k=l?[X,A+(v[6]==="left"?5:-5),y,"C",A,y,2*v[2]-v[4],2*v[3]-v[5],v[2],v[3],S,v[4],v[5]]:[X,A+(v[6]==="left"?5:-5),y,S,v[2],v[3],S,v[4],v[5]],j?(j.animate({d:k}),j.attr("visibility",D)):b.connector=j=a.chart.renderer.path(k).attr({"stroke-width":g,stroke:e.connectorColor||b.color||\n"#606060",visibility:D}).add(a.dataLabelsGroup);else if(j)b.connector=j.destroy()})}},L.pie.prototype.placeDataLabels=function(){q(this.points,function(a){var b=a.dataLabel;if(b&&a.visible)(a=b._pos)?(b.attr(b._attr),b[b.moved?"animate":"attr"](a),b.moved=!0):b&&b.attr({y:-9999})})},L.pie.prototype.alignDataLabel=Ba,L.pie.prototype.verifyDataLabelOverflow=function(a){var b=this.center,c=this.options,d=c.center,e=c.minSize||80,f=e,g;d[0]!==null?f=t(b[2]-t(a[1],a[3]),e):(f=t(b[2]-a[1]-a[3],e),b[0]+=\n(a[3]-a[1])/2);d[1]!==null?f=t(F(f,b[2]-t(a[0],a[2])),e):(f=t(F(f,b[2]-a[0]-a[2]),e),b[1]+=(a[0]-a[2])/2);f<b[2]?(b[2]=f,b[3]=Math.min(/%$/.test(c.innerSize||0)?f*parseFloat(c.innerSize||0)/100:parseFloat(c.innerSize||0),f),this.translate(b),this.drawDataLabels&&this.drawDataLabels()):g=!0;return g};if(L.column)L.column.prototype.alignDataLabel=function(a,b,c,d,e){var f=this.chart.inverted,g=a.series,h=a.dlBox||a.shapeArgs,i=p(a.below,a.plotY>p(this.translatedThreshold,g.yAxis.len)),j=p(c.inside,\n!!this.options.stacking);if(h){d=E(h);if(d.y<0)d.height+=d.y,d.y=0;h=d.y+d.height-g.yAxis.len;h>0&&(d.height-=h);f&&(d={x:g.yAxis.len-d.y-d.height,y:g.xAxis.len-d.x-d.width,width:d.height,height:d.width});if(!j)f?(d.x+=i?0:d.width,d.width=0):(d.y+=i?d.height:0,d.height=0)}c.align=p(c.align,!f||j?"center":i?"right":"left");c.verticalAlign=p(c.verticalAlign,f||j?"middle":i?"top":"bottom");R.prototype.alignDataLabel.call(this,a,b,c,d,e)};(function(a){var b=a.Chart,c=a.each,d=a.pick,e=a.addEvent;b.prototype.callbacks.push(function(a){function b(){var e=\n[];c(a.series,function(a){var b=a.options.dataLabels,f=a.dataLabelCollections||["dataLabel"];(b.enabled||a._hasPointLabels)&&!b.allowOverlap&&a.visible&&c(f,function(b){c(a.points,function(a){if(a[b])a[b].labelrank=d(a.labelrank,a.shapeArgs&&a.shapeArgs.height),e.push(a[b])})})});a.hideOverlappingLabels(e)}b();e(a,"redraw",b)});b.prototype.hideOverlappingLabels=function(a){var b=a.length,d,e,j,k,l,m,n,o,p;for(e=0;e<b;e++)if(d=a[e])d.oldOpacity=d.opacity,d.newOpacity=1;a.sort(function(a,b){return(b.labelrank||\n0)-(a.labelrank||0)});for(e=0;e<b;e++){j=a[e];for(d=e+1;d<b;++d)if(k=a[d],j&&k&&j.placed&&k.placed&&j.newOpacity!==0&&k.newOpacity!==0&&(l=j.alignAttr,m=k.alignAttr,n=j.parentGroup,o=k.parentGroup,p=2*(j.box?0:j.padding),l=!(m.x+o.translateX>l.x+n.translateX+(j.width-p)||m.x+o.translateX+(k.width-p)<l.x+n.translateX||m.y+o.translateY>l.y+n.translateY+(j.height-p)||m.y+o.translateY+(k.height-p)<l.y+n.translateY)))(j.labelrank<k.labelrank?j:k).newOpacity=0}c(a,function(a){var b,c;if(a){c=a.newOpacity;\nif(a.oldOpacity!==c&&a.placed)c?a.show(!0):b=function(){a.hide()},a.alignAttr.opacity=c,a[a.isOld?"animate":"attr"](a.alignAttr,null,b);a.isOld=!0}})}})(u);ha=u.TrackerMixin={drawTrackerPoint:function(){var a=this,b=a.chart,c=b.pointer,d=a.options.cursor,e=d&&{cursor:d},f=function(a){for(var c=a.target,d;c&&!d;)d=c.point,c=c.parentNode;if(d!==A&&d!==b.hoverPoint)d.onMouseOver(a)};q(a.points,function(a){if(a.graphic)a.graphic.element.point=a;if(a.dataLabel)a.dataLabel.element.point=a});if(!a._hasTracking)q(a.trackerGroups,\nfunction(b){if(a[b]&&(a[b].addClass("highcharts-tracker").on("mouseover",f).on("mouseout",function(a){c.onTrackerMouseOut(a)}).css(e),fb))a[b].on("touchstart",f)}),a._hasTracking=!0},drawTrackerGraph:function(){var a=this,b=a.options,c=b.trackByArea,d=[].concat(c?a.areaPath:a.graphPath),e=d.length,f=a.chart,g=f.pointer,h=f.renderer,i=f.options.tooltip.snap,j=a.tracker,k=b.cursor,l=k&&{cursor:k},m=function(){if(f.hoverSeries!==a)a.onMouseOver()},n="rgba(192,192,192,"+(ga?1.0E-4:0.002)+")";if(e&&!c)for(k=\ne+1;k--;)d[k]===X&&d.splice(k+1,0,d[k+1]-i,d[k+2],S),(k&&d[k]===X||k===e)&&d.splice(k,0,S,d[k-2]+i,d[k-1]);j?j.attr({d:d}):(a.tracker=h.path(d).attr({"stroke-linejoin":"round",visibility:a.visible?"visible":"hidden",stroke:n,fill:c?n:"none","stroke-width":b.lineWidth+(c?0:2*i),zIndex:2}).add(a.group),q([a.tracker,a.markerGroup],function(a){a.addClass("highcharts-tracker").on("mouseover",m).on("mouseout",function(a){g.onTrackerMouseOut(a)}).css(l);if(fb)a.on("touchstart",m)}))}};if(L.column)xa.prototype.drawTracker=\nha.drawTrackerPoint;if(L.pie)L.pie.prototype.drawTracker=ha.drawTrackerPoint;if(L.scatter)qa.prototype.drawTracker=ha.drawTrackerPoint;x(rb.prototype,{setItemEvents:function(a,b,c,d,e){var f=this;(c?b:a.legendGroup).on("mouseover",function(){a.setState("hover");b.css(f.options.itemHoverStyle)}).on("mouseout",function(){b.css(a.visible?d:e);a.setState()}).on("click",function(b){var c=function(){a.setVisible&&a.setVisible()},b={browserEvent:b};a.firePointEvent?a.firePointEvent("legendItemClick",b,c):\nI(a,"legendItemClick",b,c)})},createCheckboxForItem:function(a){a.checkbox=da("input",{type:"checkbox",checked:a.selected,defaultChecked:a.selected},this.options.itemCheckboxStyle,this.chart.container);N(a.checkbox,"click",function(b){I(a.series||a,"checkboxClick",{checked:b.target.checked,item:a},function(){a.select()})})}});U.legend.itemStyle.cursor="pointer";x(ib.prototype,{showResetZoom:function(){var a=this,b=U.lang,c=a.options.chart.resetZoomButton,d=c.theme,e=d.states,f=c.relativeTo==="chart"?\nnull:"plotBox";this.resetZoomButton=a.renderer.button(b.resetZoom,null,null,function(){a.zoomOut()},d,e&&e.hover).attr({align:c.position.align,title:b.resetZoomTitle}).add().align(c.position,!1,f)},zoomOut:function(){var a=this;I(a,"selection",{resetSelection:!0},function(){a.zoom()})},zoom:function(a){var b,c=this.pointer,d=!1,e;!a||a.resetSelection?q(this.axes,function(a){b=a.zoom()}):q(a.xAxis.concat(a.yAxis),function(a){var e=a.axis,h=e.isXAxis;if(c[h?"zoomX":"zoomY"]||c[h?"pinchX":"pinchY"])b=\ne.zoom(a.min,a.max),e.displayBtn&&(d=!0)});e=this.resetZoomButton;if(d&&!e)this.showResetZoom();else if(!d&&$(e))this.resetZoomButton=e.destroy();b&&this.redraw(p(this.options.chart.animation,a&&a.animation,this.pointCount<100))},pan:function(a,b){var c=this,d=c.hoverPoints,e;d&&q(d,function(a){a.setState()});q(b==="xy"?[1,0]:[1],function(b){var b=c[b?"xAxis":"yAxis"][0],d=b.horiz,h=a[d?"chartX":"chartY"],d=d?"mouseDownX":"mouseDownY",i=c[d],j=(b.pointRange||0)/2,k=b.getExtremes(),l=b.toValue(i-h,\n!0)+j,j=b.toValue(i+b.len-h,!0)-j,i=i>h;if(b.series.length&&(i||l>F(k.dataMin,k.min))&&(!i||j<t(k.dataMax,k.max)))b.setExtremes(l,j,!1,!1,{trigger:"pan"}),e=!0;c[d]=h});e&&c.redraw(!1);M(c.container,{cursor:"move"})}});x(Ma.prototype,{select:function(a,b){var c=this,d=c.series,e=d.chart,a=p(a,!c.selected);c.firePointEvent(a?"select":"unselect",{accumulate:b},function(){c.selected=c.options.selected=a;d.options.data[pa(c,d.data)]=c.options;c.setState(a&&"select");b||q(e.getSelectedPoints(),function(a){if(a.selected&&\na!==c)a.selected=a.options.selected=!1,d.options.data[pa(a,d.data)]=a.options,a.setState(""),a.firePointEvent("unselect")})})},onMouseOver:function(a,b){var c=this.series,d=c.chart,e=d.tooltip,f=d.hoverPoint;if(d.hoverSeries!==c)c.onMouseOver();if(f&&f!==this)f.onMouseOut();if(this.series&&(this.firePointEvent("mouseOver"),e&&(!e.shared||c.noSharedTooltip)&&e.refresh(this,a),this.setState("hover"),!b))d.hoverPoint=this},onMouseOut:function(){var a=this.series.chart,b=a.hoverPoints;this.firePointEvent("mouseOut");\nif(!b||pa(this,b)===-1)this.setState(),a.hoverPoint=null},importEvents:function(){if(!this.hasImportedEvents){var a=E(this.series.options.point,this.options).events,b;this.events=a;for(b in a)N(this,b,a[b]);this.hasImportedEvents=!0}},setState:function(a,b){var c=V(this.plotX),d=this.plotY,e=this.series,f=e.options.states,g=fa[e.type].marker&&e.options.marker,h=g&&!g.enabled,i=g&&g.states[a],j=i&&i.enabled===!1,k=e.stateMarkerGraphic,l=this.marker||{},m=e.chart,n=e.halo,o,a=a||"";o=this.pointAttr[a]||\ne.pointAttr[a];if(!(a===this.state&&!b||this.selected&&a!=="select"||f[a]&&f[a].enabled===!1||a&&(j||h&&i.enabled===!1)||a&&l.states&&l.states[a]&&l.states[a].enabled===!1)){if(this.graphic)g=g&&this.graphic.symbolName&&o.r,this.graphic.attr(E(o,g?{x:c-g,y:d-g,width:2*g,height:2*g}:{})),k&&k.hide();else{if(a&&i)if(g=i.radius,l=l.symbol||e.symbol,k&&k.currentSymbol!==l&&(k=k.destroy()),k)k[b?"animate":"attr"]({x:c-g,y:d-g});else if(l)e.stateMarkerGraphic=k=m.renderer.symbol(l,c-g,d-g,2*g,2*g).attr(o).add(e.markerGroup),\nk.currentSymbol=l;if(k)k[a&&m.isInsidePlot(c,d,m.inverted)?"show":"hide"](),k.element.point=this}if((c=f[a]&&f[a].halo)&&c.size){if(!n)e.halo=n=m.renderer.path().add(m.seriesGroup);n.attr(x({fill:this.color||e.color,"fill-opacity":c.opacity,zIndex:-1},c.attributes))[b?"animate":"attr"]({d:this.haloPath(c.size)})}else n&&n.attr({d:[]});this.state=a}},haloPath:function(a){var b=this.series,c=b.chart,d=b.getPlotBox(),e=c.inverted,f=Math.floor(this.plotX);return c.renderer.symbols.circle(d.translateX+\n(e?b.yAxis.len-this.plotY:f)-a,d.translateY+(e?b.xAxis.len-f:this.plotY)-a,a*2,a*2)}});x(R.prototype,{onMouseOver:function(){var a=this.chart,b=a.hoverSeries;if(b&&b!==this)b.onMouseOut();this.options.events.mouseOver&&I(this,"mouseOver");this.setState("hover");a.hoverSeries=this},onMouseOut:function(){var a=this.options,b=this.chart,c=b.tooltip,d=b.hoverPoint;b.hoverSeries=null;if(d)d.onMouseOut();this&&a.events.mouseOut&&I(this,"mouseOut");c&&!a.stickyTracking&&(!c.shared||this.noSharedTooltip)&&\nc.hide();this.setState()},setState:function(a){var b=this.options,c=this.graph,d=b.states,e=b.lineWidth,b=0,a=a||"";if(this.state!==a&&(this.state=a,!(d[a]&&d[a].enabled===!1)&&(a&&(e=d[a].lineWidth||e+(d[a].lineWidthPlus||0)),c&&!c.dashstyle))){a={"stroke-width":e};for(c.attr(a);this["zoneGraph"+b];)this["zoneGraph"+b].attr(a),b+=1}},setVisible:function(a,b){var c=this,d=c.chart,e=c.legendItem,f,g=d.options.chart.ignoreHiddenSeries,h=c.visible;f=(c.visible=a=c.userOptions.visible=a===A?!h:a)?"show":\n"hide";q(["group","dataLabelsGroup","markerGroup","tracker"],function(a){if(c[a])c[a][f]()});if(d.hoverSeries===c||(d.hoverPoint&&d.hoverPoint.series)===c)c.onMouseOut();e&&d.legend.colorizeItem(c,a);c.isDirty=!0;c.options.stacking&&q(d.series,function(a){if(a.options.stacking&&a.visible)a.isDirty=!0});q(c.linkedSeries,function(b){b.setVisible(a,!1)});if(g)d.isDirtyBox=!0;b!==!1&&d.redraw();I(c,f)},show:function(){this.setVisible(!0)},hide:function(){this.setVisible(!1)},select:function(a){this.selected=\na=a===A?!this.selected:a;if(this.checkbox)this.checkbox.checked=a;I(this,a?"select":"unselect")},drawTracker:ha.drawTrackerGraph});x(u,{Color:na,Point:Ma,Tick:Xa,Renderer:eb,SVGElement:O,SVGRenderer:Ea,arrayMin:Oa,arrayMax:Ha,charts:T,correctFloat:aa,dateFormat:Sa,error:ca,format:Na,pathAnim:void 0,getOptions:function(){return U},hasBidiBug:Rb,isTouchDevice:Nb,setOptions:function(a){U=E(!0,U,a);Gb();return U},addEvent:N,removeEvent:Y,createElement:da,discardElement:Ua,css:M,each:q,map:Da,merge:E,\nsplat:ua,stableSort:jb,extendClass:sa,pInt:B,svg:ga,canvas:la,vml:!ga&&!la,product:"Highcharts",version:"4.2.6"});return u});\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
}]);